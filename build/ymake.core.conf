FAKEID=4164599

CURDIR=.
BINDIR=bin:/
SRCDIR=
YMAKE=ymake
ECHO=echo
INCLUDE_EXTS=.h .hh .hpp .rli .cuh .inc .i
OBJ_SUF=
CFLAGS=

# Only to fix warning from library/build_info
SANDBOX_TASK_ID=0

ARCADIA_TEST_ROOT=../arcadia_tests_data/
DEFAULT_REQUIREMENTS=network:restricted

when ($USE_GCCFILTER == "yes") {
    GCCFILTER=${ARCADIA_ROOT}/devtools/gccfilter/gccfilter.pl
    when ($USE_GCCFILTER_COLOR == "yes") {
        GCCFILTER+=-c
    }
}
otherwise {
    GCCFILTER=
}

when ($CODENAVIGATION && $NOCODENAVIGATION != "yes") {
    PYTHON_YNDEXER_ARGS=${cwd:ARCADIA_BUILD_ROOT} ${env:"XDG_CACHE_HOME=$ARCADIA_BUILD_ROOT"} $YMAKE_PYTHON ${input:"build/scripts/python_yndexer.py"} $PYNDEXER_RESOURCE_GLOBAL/pyxref 1500 ${output;noext;rootrel:REALPRJNAME.ydx.pb2} $TARGET
    YNDEXER_ARGS=$YMAKE_PYTHON ${input:"build/scripts/yndexer.py"} $CPPYNDEXER_RESOURCE_GLOBAL/yndexer 1500 $(SOURCE_ROOT) $ARCADIA_BUILD_ROOT ${input:SRC}
    YNDEXER_OUTPUT=$YNDEXER_OUTPUT_FILE
}
otherwise {
    YNDEXER_ARGS=
    YNDEXER_OUTPUT=
    PYTHON_YNDEXER_ARGS=
}

PY_PROGRAM_LINK_EXE=$LINK_EXE && $PYTHON_YNDEXER_ARGS

COVERAGE_FLAGS=
when ($GCOV_COVERAGE) {
    COVERAGE_FLAGS=-fprofile-arcs -ftest-coverage
    EXTRA_OUTPUT=$EXTRA_COVERAGE_OUTPUT
}

when ($ARCH_AARCH64 == "yes") {
    CFLAGS+=-fsigned-char -DIOV_MAX=1024
}
when ($ARCH_PPC64LE == "yes") {
    CFLAGS+=-fsigned-char
}

when ($OS_CYGWIN == "yes") {
    CFLAGS+=-D_LDBL_EQ_DBL=1 -U__STRICT_ANSI__
    USE_ASMLIB=no
    FSTACK=
    PICFLAGS=
}

CFLAGS+=$COVERAGE_FLAGS
LDFLAGS+=$COVERAGE_FLAGS

CHECKFLAG=
LEX_FLAGS=
NO_MAPREDUCE=

when ($NO_MAPREDUCE ==  "yes") {
    C_DEFINES+=-DNO_MAPREDUCE
}

SKIP_JUNK=yes

# USE_INTERNAL_STL is an internal flag (set on by default) but may be used externally to
# select system standard C++ library when USE_INTERNAL_STL=no is set.
#
# USE_STL_SYSTEM=yes is a regular way to select system standard C++ library.
#
when ($USE_STL_SYSTEM == "yes") {
    USE_INTERNAL_STL=no
}

when ($USE_INTERNAL_STL == "no") {
    USE_STL_SYSTEM=yes
}
otherwise {
    USE_INTERNAL_STL=yes
}

USE_ARCADIA_PYTHON=yes
USE_ARCADIA_LIBM=no
USE_EAT_MY_DATA=no

SFDL_TMP_OUT= ${output;tmp:SRC.tmp}

when (!$USE_PERL_SYSTEM) {
    USE_PERL_SYSTEM=yes
}

when ($USE_LOCAL_TOOLS == "yes") {
    PERL=$LOCAL_PERL
    PERL_VERSION=$LOCAL_PERL_VERSION
    PERL_PRIVLIB=$LOCAL_PERL_PRIVLIB
    PERL_ARCHLIB=$LOCAL_PERL_ARCHLIB
    when ($LOCAL_PERL_LIBS) {
        PERL_LIBS=$LOCAL_PERL_LIBS
    }
}
otherwise {
    PERL=NO-PERL-SELECTED
    PERL_VERSION=NO-PERL-SELECTED-VERSION
    PERL_PRIVLIB=NO-PERL-SELECTED-PRIVLIB
    PERL_ARCHLIB=NO-PERL-SELECTED-ARCHLIB
}

PERL_LD_LIBRARY_PATH=
PERL_INCLUDE=

when ($USE_PERL_SYSTEM == "yes") {
    PERL_LIB_ARCH=

    select ($OS_SDK) {
        "ubuntu-12" ? {
            PERL_VERSION=5.14
            PERL_FROM_SANDBOX=yes
        }
        "ubuntu-14" ? {
            PERL_VERSION=5.18
            PERL_FROM_SANDBOX=yes
        }
        "ubuntu-16" ? {
            PERL_VERSION=5.22
            PERL_FROM_SANDBOX=yes
            PERL_LIB_ARCH=/x86_64-linux-gnu
        }
        "ubuntu-18" ? {
            PERL_VERSION=5.26
            PERL_FROM_SANDBOX=yes
            PERL_LIB_ARCH=/x86_64-linux-gnu
        }
    }

    when ($PERL_FROM_SANDBOX == "yes") {
        PERL=$SYSTEM_PERL_RESOURCE_GLOBAL/perl${PERL_VERSION}/bin/perl
        PERL_ARCHLIB=$SYSTEM_PERL_RESOURCE_GLOBAL/perl${PERL_VERSION}/lib$PERL_LIB_ARCH/perl/${PERL_VERSION}
        PERL_PRIVLIB=$SYSTEM_PERL_RESOURCE_GLOBAL/perl${PERL_VERSION}/share/perl/${PERL_VERSION}
        PERL_LIBS=$SYSTEM_PERL_RESOURCE_GLOBAL/perl${PERL_VERSION}/lib${PERL_LIB_ARCH}
        PERL_LD_LIBRARY_PATH=${env:"LD_LIBRARY_PATH=$SYSTEM_PERL_RESOURCE_GLOBAL/perl${PERL_VERSION}/lib"}

        # Perl searches it's modules in INC@ paths. They can not be sysrooted or disabled (at least I haven't found a way),
        # so default Perl module directories should be prepended to perl command lines when using non-local perl.
        PERL_INCLUDE=-I${PERL_ARCHLIB} -I${PERL_PRIVLIB}
    }
}

PERLSUFFIX=-csuffix .cpp
PERLOUTPUT=${stdout;output:SRC.cpp}
when ($PERLC == "yes") {
    PERLSUFFIX=-csuffix .c
    PERLOUTPUT=${stdout;output:SRC.c}
}
XSUBPPFLAGS=

ARCH_TOOL=${tool:"tools/archiver"}
PROTOC=${tool:"contrib/tools/protoc"}
PROTOC_STYLEGUIDE_OUT=--cpp_styleguide_out=$ARCADIA_BUILD_ROOT/$PROTO_NAMESPACE
PROTOC_PLUGIN_STYLEGUIDE=--plugin=protoc-gen-cpp_styleguide=${tool:"contrib/tools/protoc/plugins/cpp_styleguide"}
FML_TOOL=${tool:"tools/relev_fml_codegen"}
FML_UNUSED_TOOL=${tool:"tools/relev_fml_unused"}
LUA_TOOL=${tool:"tools/lua"}
ENUM_PARSER_TOOL=${tool:"tools/enum_parser/enum_parser"}

CYTHON_SCRIPT=${input:"${ARCADIA_ROOT}/contrib/tools/cython/cython.py"}
CYTHON_OUTPUT_INCLUDES=${output_include;hide:"contrib/libs/python/Include/Python.h"} \
${output_include;hide:"contrib/libs/python/Include/pyconfig.h"} \
${output_include;hide:"contrib/libs/python/Include/compile.h"} \
${output_include;hide:"contrib/libs/python/Include/frameobject.h"} \
${output_include;hide:"contrib/libs/python/Include/traceback.h"}

# PYTHON_DISTR={ "default" | "macos-brew" }  determine python system supply
# see contrib/libs/platform/python/ya.make
PYTHON_DISTR="default"
when ($USE_SYSTEM_PYTHON) {
    USE_ARCADIA_PYTHON=no
    select ($USE_SYSTEM_PYTHON) {
        "2.7" ? {
            _SYSTEM_PYTHON27=yes
            PY_VERSION=2.7
            PY_FRAMEWORK_VERSION=2.7
        }
        "3.4" ? {
            _SYSTEM_PYTHON34=yes
            PY_VERSION=3.4m
            PY_FRAMEWORK_VERSION=3.4
        }
        "3.5" ? {
            _SYSTEM_PYTHON35=yes
            PY_VERSION=3.5m
            PY_FRAMEWORK_VERSION=3.5
        }
        "3.6" ? {
            _SYSTEM_PYTHON36=yes
            PY_VERSION=3.6m
            PY_FRAMEWORK_VERSION=3.6
        }
        "3.7" ? {
            _SYSTEM_PYTHON37=yes
            PY_VERSION=3.7m
            PY_FRAMEWORK_VERSION=3.7
        }
    }
}

#TODO: reuse PYTHON_PATH in other vars
PYTHON_TOOL=${ARCADIA_BUILD_ROOT}/contrib/tools/python/python
PYTHON_PATH=contrib/tools/python
PYTHON_BS_TOOL=${tool:"contrib/tools/python/bootstrap"}
when ($USE_ARCADIA_PYTHON == "no") {
    PYTHON_TOOL=python
    PYTHON_BS_TOOL=python
}
DEFAULT_ALLOCATOR=LF

when ($OS_ANDROID == "yes" || $MSVC == "yes") {
    DEFAULT_ALLOCATOR=J
}

when ($OS_CYGWIN == "yes") {
    DEFAULT_ALLOCATOR=SYSTEM
}

when ($SANITIZER_TYPE) {
    when ($SANITIZER_TYPE != "no") {
        DEFAULT_ALLOCATOR=SYSTEM
    }
    when ($SANITIZER_TYPE == "pg") {
        DEFAULT_ALLOCATOR=BS
    }
}

macro CHECK_CONFIG_H(Conf) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/check_config_h.py"} ${input;rootrel:Conf} ${output;noext:Conf.config.cpp} ${kv;hide:"p CH"} ${kv;hide:"pc yellow"}
    OUTPUT_INCLUDES=$Conf
}

PROTO_NAMESPACE=
PROTO_PATH=$ARCADIA_ROOT/contrib/libs/protobuf

CPP_PROTO_CMDLINE=
CPP_PROTO_OUTS=
CPP_EV_OPTS=
CPP_EV_OUTS=
CPP_GRPC_OPTS=
CPP_GRPC_OUTS=

OPTIMIZE_PY_PROTOS_FLAG=no

macro OPTIMIZE_PY_PROTOS() {
    SET(OPTIMIZE_PY_PROTOS_FLAG yes)
}

macro GO_PROTO_CMD(File) {
    .CMD=${cwd;rootdir;input:File} $PROTOC --plugin=protoc-gen-go=${ARCADIA_BUILD_ROOT}/vendor/github.com/golang/protobuf/protoc-gen-go/protoc-gen-go ${tool;hide:"vendor/github.com/golang/protobuf/protoc-gen-go"} -I=./$PROTO_NAMESPACE -I=$ARCADIA_ROOT/$PROTO_NAMESPACE -I=$ARCADIA_BUILD_ROOT -I=$PROTO_PATH --go_out=$ARCADIA_BUILD_ROOT/$PROTO_NAMESPACE ${input;rootrel:File} ${output;hide;noauto;norel;noext;suf=.pb.go:File} ${kv;hide:"p PT"} ${kv;hide:"pc yellow"}
    .PEERDIR=contrib/go/_std/src/fmt contrib/go/_std/src/math vendor/github.com/golang/protobuf/proto vendor/github.com/golang/protobuf/protoc-gen-go/descriptor
}

macro CPP_PROTO_CMD(File) {
    .CMD=$CPP_PROTO_CMDLINE $CPP_GRPC_OPTS $CPP_PROTO_OUTS $CPP_GRPC_OUTS ${kv;hide:"p PB"} ${kv;hide:"pc yellow"}
    .PEERDIR=contrib/libs/protobuf
}

macro CPP_EVLOG_CMD(File) {
    .CMD=$CPP_PROTO_CMDLINE $CPP_EV_OPTS $CPP_EV_OUTS ${kv;hide:"p EV"} ${kv;hide:"pc yellow"}
    .PEERDIR=library/eventlog contrib/libs/protobuf
}

macro CPP_PROTO_EVLOG_CMD(File) {
    # process .proto as .ev
    .CMD=$CPP_PROTO_CMDLINE $CPP_EV_OPTS $CPP_PROTO_OUTS ${kv;hide:"p PB"} ${kv;hide:"pc yellow"}
    .PEERDIR=library/eventlog contrib/libs/protobuf
}

macro MAPKIT_CPP_PROTO_CMD(File) {
    # We don't support GRPC for protoc used here
    .CMD=$CPP_PROTO_CMDLINE $CPP_PROTO_OUTS ${kv;hide:"p PB"} ${kv;hide:"pc yellow"}
    .PEERDIR=build/external_resources/mapkit_sdk
}

macro PY_PROTO_CMD(File) {
    .CMD=${cwd;rootdir;input:File} $PROTOC -I=./$PROTO_NAMESPACE -I=$ARCADIA_ROOT/$PROTO_NAMESPACE -I=$ARCADIA_BUILD_ROOT -I=$PROTO_PATH --python_out=$ARCADIA_BUILD_ROOT/$PROTO_NAMESPACE ${input;rootrel:File} ${output;hide;noauto;norel;noext;suf=_pb2.py:File} ${kv;hide:"p PT"} ${kv;hide:"pc yellow"} $GRPC_PY_ARGS
}

macro PY_GLY_CMD(File) {
    .CMD=${cwd;rootdir;input:File} $PROTOC -I=./$PROTO_NAMESPACE -I=$ARCADIA_ROOT/$PROTO_NAMESPACE -I=$ARCADIA_BUILD_ROOT -I=$PROTO_PATH --plugin=protoc-gen-gly_py=${tool:"glycine/gen/proto/python"} --gly_py_out=$ARCADIA_BUILD_ROOT/$PROTO_NAMESPACE ${input;rootrel:File} ${output;hide;noauto;norel;noext;suf=.py:File} ${kv;hide:"p GL"} ${kv;hide:"pc yellow"}
    .PEERDIR=glycine/gen/runtime
}

macro JAVA_PROTO_CMD(File) {
    .CMD=${cwd;rootdir;input:File} $YMAKE_PYTHON ${input:"build/scripts/tared_protoc.py"} --tar-output ${output;norel;noext;suf=.jsrc:File} --protoc-out-dir $ARCADIA_BUILD_ROOT/java_out $PROTOC -I=./$PROTO_NAMESPACE -I=$ARCADIA_ROOT -I=$PROTO_PATH --java_out=$ARCADIA_BUILD_ROOT/java_out ${input;rootrel:File} ${kv;hide:"p PT"} ${kv;hide:"pc yellow"} $GRPC_JAVA_ARGS
}

macro XS_PROTO(File, Dir, Outputs...) {
    .CMD=$PROTOC -I=${ARCADIA_ROOT}/${Dir} -I=${ARCADIA_ROOT} -I=${PROTO_PATH} --perlxs_out=${BINDIR} ${input:File} ${hide;output:Outputs}
    PEERDIR(${Dir})
    ADDINCL(${ARCADIA_BUILD_ROOT}/${Dir})
}

macro PROTO2FBS(File) {
    .CMD=${cwd:BINDIR} ${tool:"contrib/tools/flatc"} -I . -I ${ARCADIA_ROOT} --proto ${input:File} ${output;hide;noext:File.fbs} ${kv;hide:"p FBS"} ${kv;hide:"pc yellow"}
}

when ($PY_PROTOS_FOR == "yes") {
    PEERDIR+=contrib/libs/protobuf/python
}

macro PY_EVLOG_CMD(File) {
    .CMD=${cwd;rootdir;input:File} $PROTOC -I=./$PROTO_NAMESPACE -I=$ARCADIA_ROOT/$PROTO_NAMESPACE -I=$ARCADIA_BUILD_ROOT -I=$PROTO_PATH --python_out=$ARCADIA_BUILD_ROOT/$PROTO_NAMESPACE ${input;rootrel:File} ${output;hide;noauto;norel;noext;suf=_ev_pb2.py:File} ${kv;hide:"p PT"} ${kv;hide:"pc yellow"}
    .PEERDIR=library/eventlog/proto
}

macro JAVA_EVLOG_CMD(File) {
    .CMD=$COPY_CMD ${input:File} ${output;noext;norel;suf=_ev.proto:File} ${kv;hide:"p EV"} ${kv;hide:"pc yellow"}
    .PEERDIR=library/eventlog/proto
}

RUN_NO_SANITIZE=$YMAKE_PYTHON ${input:"build/scripts/run_tool.py"} --

when ($IS_CROSS_SANITIZE) {
    RUN_NO_SANITIZE=
}

YIELD=$YMAKE_PYTHON ${input:"build/scripts/yield_line.py"} -- ${BINDIR}/__args
XARGS=$YMAKE_PYTHON ${input:"build/scripts/xargs.py"} -- ${BINDIR}/__args

RESPFILE_CMD=$YMAKE_PYTHON ${input:"build/scripts/writer.py"}

FS_TOOLS=$YMAKE_PYTHON ${input:"build/scripts/fs_tools.py"}

COPY_CMD=$FS_TOOLS copy
REMOVE_FILE=$FS_TOOLS remove
MOVE_FILE=$FS_TOOLS rename

MSVC_DYNAMICBASE=/DYNAMICBASE
when ($ALLOCATOR == "LF") {
    MSVC_DYNAMICBASE=/DYNAMICBASE:NO
}

SANITIZER_CFLAGS=

GRPC_FLAG=no
macro GRPC() {
    SET(GRPC_FLAG yes)
}

GRPC_PY_ARGS=
GRPC_JAVA_ARGS=

# variables must be defined for all module types to make generate_mf.py work
MODULE_PREFIX=
MODULE_SUFFIX=
LICENSE_NAMES=
NO_GPL=
NO_GPL_FLAG=
when ($NO_GPL == "yes") {
    NO_GPL_FLAG=--no-gpl
}
NEED_PLATFORM_PEERDIRS=yes

PYTHON2=no
PYTHON3=no
module BASE_UNIT {
    .EXTS=.*
    .CMD=TOUCH_UNIT
    .NODE_TYPE=Bundle
    .PEERDIR_POLICY=as_include
    .RESTRICTED=GRPC INDUCED_DEPS

    PEERDIR_TAGS=CPP_PROTO PY2 __EMPTY__
    PROTO_SOURCE_INCLUDE=contrib/libs/protobuf/stubs/common.h contrib/libs/protobuf/generated_message_util.h contrib/libs/protobuf/repeated_field.h contrib/libs/protobuf/extension_set.h contrib/libs/protobuf/generated_message_reflection.h contrib/libs/protobuf/service.h contrib/libs/protobuf/messagext.h
    PROTO_HEADER_INCLUDE=contrib/libs/protobuf/stubs/once.h contrib/libs/protobuf/io/coded_stream.h contrib/libs/protobuf/wire_format_lite_inl.h contrib/libs/protobuf/descriptor.h contrib/libs/protobuf/reflection_ops.h contrib/libs/protobuf/wire_format.h
    PROTO_HEADER_EXTS=.pb.h

    CPP_PROTO_CMDLINE=${cwd;rootdir;input:File} $PROTOC -I=./$PROTO_NAMESPACE -I=$ARCADIA_ROOT/$PROTO_NAMESPACE -I=$ARCADIA_BUILD_ROOT -I=$PROTO_PATH --cpp_out=$ARCADIA_BUILD_ROOT/$PROTO_NAMESPACE $PROTOC_STYLEGUIDE_OUT $PROTOC_PLUGIN_STYLEGUIDE ${input;rootrel:File}
    CPP_EV_OPTS=--plugin=protoc-gen-event2cpp=${tool:"tools/event2cpp"} --event2cpp_out=$ARCADIA_BUILD_ROOT -I=$ARCADIA_ROOT/library/eventlog

    when ($GRPC_FLAG == "yes") {
        CPP_GRPC_OPTS+=--plugin=protoc-gen-grpc_cpp=${tool:"contrib/tools/protoc/plugins/grpc_cpp"} --grpc_cpp_out=$ARCADIA_BUILD_ROOT/$PROTO_NAMESPACE
        when ($OPTIMIZE_PY_PROTOS_FLAG == "yes") {
            CPP_GRPC_OUTS+=${output;hide;norel;noext;noauto:File.grpc.pb.cc} ${output;hide;norel;noext;noauto:File.grpc.pb.h}
        }
        otherwise {
            CPP_GRPC_OUTS+=${output;hide;norel;noext:File.grpc.pb.cc} ${output;hide;norel;noext:File.grpc.pb.h}
        }
        GRPC_PY_ARGS+=--plugin=protoc-gen-grpc_py=${tool:"contrib/tools/protoc/plugins/grpc_python"} --grpc_py_out=$ARCADIA_BUILD_ROOT/$PROTO_NAMESPACE ${output;hide;noauto;norel;noext;suf=_pb2_grpc.py:File}
        GRPC_JAVA_ARGS+=--plugin=protoc-gen-grpc_java=${tool:"contrib/tools/protoc/plugins/grpc_java"} --grpc_java_out=$ARCADIA_BUILD_ROOT/java_out
        PROTO_HEADER_INCLUDE+=contrib/libs/grpc/include/grpc++/impl/codegen/async_stream.h contrib/libs/grpc/include/grpc++/impl/codegen/async_unary_call.h contrib/libs/grpc/include/grpc++/impl/codegen/method_handler_impl.h contrib/libs/grpc/include/grpc++/impl/codegen/proto_utils.h contrib/libs/grpc/include/grpc++/impl/codegen/rpc_method.h contrib/libs/grpc/include/grpc++/impl/codegen/service_type.h contrib/libs/grpc/include/grpc++/impl/codegen/status.h contrib/libs/grpc/include/grpc++/impl/codegen/stub_options.h contrib/libs/grpc/include/grpc++/impl/codegen/sync_stream.h
        PROTO_SOURCE_INCLUDE+=contrib/libs/grpc/include/grpc++/impl/codegen/async_stream.h contrib/libs/grpc/include/grpc++/impl/codegen/async_unary_call.h contrib/libs/grpc/include/grpc++/impl/codegen/channel_interface.h contrib/libs/grpc/include/grpc++/impl/codegen/client_unary_call.h contrib/libs/grpc/include/grpc++/impl/codegen/method_handler_impl.h contrib/libs/grpc/include/grpc++/impl/codegen/rpc_service_method.h contrib/libs/grpc/include/grpc++/impl/codegen/service_type.h contrib/libs/grpc/include/grpc++/impl/codegen/sync_stream.h
    }

    DEFAULT(PY_PROTOS_FOR no)
    DEFAULT(BUILD_PROTO_AS_EVLOG no)

    when ($OPTIMIZE_PY_PROTOS_FLAG == "yes") {
        CPP_PROTO_OUTS=${output;hide;norel;noext;noauto:File.pb.cc} ${output;main;hide;norel;noext;noauto:File.pb.h}
        CPP_EV_OUTS=${output;hide;norel;noauto:File.pb.cc} ${output;hide;norel;noauto:File.pb.h}
    }
    otherwise {
        CPP_PROTO_OUTS=${output;hide;norel;noext:File.pb.cc} ${output;main;hide;norel;noext:File.pb.h}
        CPP_EV_OUTS=${output;hide;norel:File.pb.cc} ${output;hide;norel:File.pb.h}
    }

    when ($PY_PROTOS_FOR == "yes") {
        MACRO_ALIAS(EVLOG_CMD PY_EVLOG_CMD)
        MACRO_ALIAS(PROTO_CMD PY_PROTO_CMD)
    }
    otherwise {
        MACRO_ALIAS(EVLOG_CMD CPP_EVLOG_CMD)
        when ($BUILD_PROTO_AS_EVLOG == "yes") {
            MACRO_ALIAS(PROTO_CMD CPP_PROTO_EVLOG_CMD)
        }
        otherwise {
            when ($ARCADIA_MAPKIT) {
                PROTOC=$MAPKIT_SDK_RESOURCE_GLOBAL/mapkit_sdk/bin/protoc
                PROTOC_STYLEGUIDE_OUT=
                PROTOC_PLUGIN_STYLEGUIDE=
                PROTO_PATH=$MAPKIT_SDK_RESOURCE_GLOBAL/mapkit_sdk/include
                MACRO_ALIAS(PROTO_CMD MAPKIT_CPP_PROTO_CMD)
                PROTO_SOURCE_INCLUDE=
                PROTO_HEADER_INCLUDE=
            }
            otherwise {
                MACRO_ALIAS(PROTO_CMD CPP_PROTO_CMD)
            }
        }
    }

    SANITIZER_DEFINED=no

    when ($SANITIZER_TYPE && $SANITIZER_TYPE != "no" && $SANITIZER_TYPE != "pg") {
        CFLAGS+=-fsanitize=$SANITIZER_TYPE -D${SANITIZER_TYPE}_sanitizer_enabled -fsanitize-blacklist=${input:"build/sanitize-blacklist.txt"} $SANITIZER_CFLAGS
        LDFLAGS+=-fsanitize=$SANITIZER_TYPE -fsanitize-blacklist=${input:"build/sanitize-blacklist.txt"}
        SANITIZER_DEFINED=yes
    }

    when ($SANITIZE_COVERAGE && $SANITIZE_COVERAGE != "no") {
        CFLAGS+=-fsanitize-coverage=$SANITIZE_COVERAGE
        LDFLAGS+=-fsanitize-coverage=$SANITIZE_COVERAGE
    }

    when ($CLANG_COVERAGE && $CLANG_COVERAGE != "no") {
        CFLAGS+=-fprofile-instr-generate -fcoverage-mapping -DCLANG_COVERAGE
        LDFLAGS+=-fprofile-instr-generate -fcoverage-mapping
    }

    when ($SANITIZER_TYPE && $SANITIZER_TYPE == "pg") {
        CFLAGS+=-fno-omit-frame-pointer -Dpg_sanitizer_enabled
    }

    when ($SANITIZER_TYPE && $SANITIZER_TYPE != "no") {
        HAVE_CUDA=no
    }

    when ($GCC) {
        select ($SANITIZER_TYPE) {
            "address" ? {
                LDFLAGS+=-static-libasan
            }
            "undefined" ? {
                LDFLAGS+=-static-libubsan
            }
            "thread" ? {
                LDFLAGS+=-pie -static-libtsan
            }
        }
    }

    when ($HARDENING == "yes") {
        when ($CLANG) {
            USE_LTO=yes
            CFLAGS+=-fstack-protector-all -flto -fvisibility=hidden -fsanitize=cfi -fPIE -D_FORTIFY_SOURCE=2
            LDFLAGS+=-z relro -z now -z noexecstack -pie
        }
    }

    when ($USE_LTO == "yes") {
        when ($GCC) {
            CFLAGS+=-flto -fno-fat-lto-objects
            LDFLAGS+=-flto
        }
        when ($CLANG) {
            CFLAGS+=-emit-llvm
            LDFLAGS+=-flto
        }
    }

    when ($USE_THINLTO == "yes") {
        when ($GCC) {
            CFLAGS+=-flto=thin
            LDFLAGS+=-flto=thin
        }
        when ($CLANG) {
            CFLAGS+=-flto=thin
            LDFLAGS+=-flto=thin
        }
    }


    when ($CLANG) {
        when ($PGO_ADD == "yes") {
            CFLAGS+=-fprofile-instr-generate
            LDFLAGS+=-fprofile-instr-generate
        }
        when ($PGO_PATH) {
            CFLAGS+=-fprofile-instr-use=$PGO_PATH -Wno-profile-instr-unprofiled -Wno-profile-instr-out-of-date
            LDFLAGS+=-fprofile-instr-use=$PGO_PATH
        }
    }

    when ($COMPILER_PLATFORM && $NEED_PLATFORM_PEERDIRS == "yes") {
        PEERDIR+=$COMPILER_PLATFORM
    }

    when ($NORUNTIME != "yes") {
        PEERDIR+=contrib/libs/cxxsupp
    }

    when ($NOUTIL != "yes") {
        PEERDIR+=util
    }

    when ($MUSL == "yes") {
        PEERDIR += contrib/libs/musl-1.1.20/full
    }

    # g++ has proxy C-headers which are incompatible with libc++ proxy C-headers.
    # The same problem exists for clang toolchain. On the other hand, the problem
    # doesn't affect cl since it has united C/C++ library and doesn't need
    # proxy C-headers.
    # Disable all C++ headers including proxy C-headers when we use libc++.
    when ($USE_INTERNAL_STL == "yes" && $MSVC != "yes") {
        CXXFLAGS += -nostdinc++
    }

    when ($MSVC == "yes" && $NO_WINDOWS_STRICT != "yes") {
        CFLAGS+=/DSTRICT
    }

    when ($MSVC == "yes" && $NO_WIN32_LEAN != "yes") {
        CFLAGS+=/DNOMINMAX /DWIN32_LEAN_AND_MEAN
    }

    when ($CODENAVIGATION && $NOCODENAVIGATION != "yes") {
        PEERDIR += build/external_resources/codenavigation
    }

    when ($CYTHON_COVERAGE && $CYTHON_COVERAGE == "yes") {
        CFLAGS+=-DCYTHON_TRACE=1 -DCYTHON_TRACE_NOGIL=1
    }

    DEFAULT(PACKAGE_PREFIX_ARGS)

    DEFAULT(MODULE_VERSION)
    DEFAULT(MODULE_PREFIX)
    DEFAULT(MODULE_SUFFIX)

    DEFAULT(BYACC_FLAGS -v)
    DEFAULT(SWIG_LANG python)
    DEFAULT(BISON_FLAGS -v)
    DEFAULT(GP_FLAGS -CtTLANSI-C -Dk* -c)
}

module LINK_UNIT: BASE_UNIT {
    .EXTS=.o .obj
    .CMD=LINK_EXE
    .NODE_TYPE=Program
    .PEERDIR_POLICY=as_build_from

    DEFAULT(ALLOCATOR $DEFAULT_ALLOCATOR)
    USE_LINKER()

    #link with libunwind manually
    when ($DARWIN == "yes" && $NOPLATFORM != "yes") {
        PEERDIR += contrib/libs/cxxsupp/libcxxrt
    }

    when ($USE_LIBCXXRT == "yes") {
        PEERDIR += contrib/libs/cxxsupp/libcxxrt
    }

    when ($USE_MKL == "yes") {
        NOPLATFORM=yes
    }

    when (($USE_EAT_MY_DATA == "yes") && ($WIN32 != "yes") && ($DARWIN != "yes") && ($OS_ANDROID != "yes")) {
        PEERDIR+=contrib/libs/libeatmydata
    }

    when ($USE_ARCADIA_LIBM == "yes") {
        PEERDIR+=contrib/libs/libm
    }
    when ($USE_ARCADIA_LIBM == "no") {
        C_SYSTEM_LIBRARIES+=-lm
    }

    when (($MUSL != "yes" && $WITH_VALGRIND == "yes") || $SANITIZER_DEFINED == "yes") {
        when ($ALLOCATOR in [ "GOOGLE", "J", "LF", "LF_YT", "LF_DBG", "B", "BS", "C" ]) {
            PEERDIR+=library/malloc/system
        }
    }
    otherwise {
        select ($ALLOCATOR) {
            "GOOGLE" ? {
                PEERDIR+=library/malloc/galloc
            }
            "J" ? {
                when ($WIN32 == "yes") {
                    PEERDIR+=library/malloc/system
                }
                otherwise {
                    PEERDIR+=library/malloc/jemalloc
                }
            }
            "LF" ? {
                PEERDIR+=library/lfalloc
            }
            "LF_YT" ? {
                PEERDIR+=library/lfalloc/yt
            }
            "LF_DBG" ? {
                PEERDIR+=library/lfalloc/dbg
            }
            "B" ? {
                PEERDIR+=library/balloc
            }
            "BS" ? {
                PEERDIR+=library/balloc/sanitize
            }
            "C" ? {
                PEERDIR+=library/malloc/calloc
            }
            "LOCKLESS" ? {
                PEERDIR+=library/malloc/lockless
            }
        }
    }

    when ($ALLOCATOR == "SYSTEM") {
        PEERDIR+=library/malloc/system
    }
    # TODO: fix WERROR and MSVC_WERROR macros
    when ($NO_COMPILER_WARNINGS != "yes" && $WERROR != "no") {
        when ($WERROR_MODE == "all" || ($WERROR_MODE == "compiler_specific" && $WERROR == "yes")) {
            CFLAGS+=$WERROR_FLAG
        }
    }

    when ($ICC == "yes") {
        PEERDIR+=contrib/libs/intel/core
    }
    when ($WITH_VALGRIND == "yes") {
        PEERDIR+=contrib/libs/valgrind
    }
}

MODULE_TYPE=UNKNOWN

module BASE_PROGRAM: LINK_UNIT {
    .SYMLINK_POLICY=EXE
    .ALLOWED=INDUCED_DEPS
    SET(MODULE_TYPE PROGRAM)

    when ($WIN32 == "yes" || $OS_CYGWIN == "yes") {
        MODULE_SUFFIX=.exe
    }

    when ($MSVC != "yes" && $NOPLATFORM != "yes" && $WITH_VALGRIND != "yes" && $USE_ASMLIB != "no" && $MIC_ARCH != "yes") {
        PEERDIR+=contrib/libs/asmlib
    }

    when ($MUSL == "yes" && $WITH_VALGRIND == "yes" && $OS_LINUX && $ARCH_X86_64) {
        # Force a dynamic interpreter into the binary. It is required by Valgrind
        # to preload it's runtime (vgpreload_core-amd64-linux.so) into the process
        # and intercept custom malloc/free implemetations.
        LDFLAGS += /lib64/ld-linux-x86-64.so.2
    }

    when ($USE_ARC_PROFILE == "yes" && $NOUTIL != "yes") {
        PEERDIR += library/execprofile/autostart
    }

    when ($SANITIZER_DEFINED == "yes") {
        PEERDIR += contrib/libs/cxxsupp/libsan
    }

    when ($CLANG_COVERAGE && $CLANG_COVERAGE != "no") {
        PEERDIR+=library/testing/dump_clang_coverage
    }
}

### @usage PROGRAM ([progname])
### @brief Project Definition-Program. You can not specify a name, then it will be formed from the name of the containing project directory.
module PROGRAM: BASE_PROGRAM {
    ADD_YTEST($REALPRJNAME coverage.extractor)
}

### PY_PROGRAM is a module of a program that is compiled from Python sources.
### You can not specify a name, then it will be formed from the name of the containing project directory.
### https://wiki.yandex-team.ru/devtools/commandsandvars/py_srcs/
### has features when working with PROTO_LIBRARY.
module PY_PROGRAM: BASE_PY_PROGRAM {
    # Look's like we cannot avoid copy-paste util ymake supports multiple inheritance
    # We need to attach coverage.extractor to every py_program target, except pytest targets
    ADD_YTEST($REALPRJNAME coverage.extractor)
}

module PY3_PROGRAM: BASE_PY3_PROGRAM {
    # Look's like we cannot avoid copy-paste util ymake supports multiple inheritance
    # We need to attach coverage.extractor to every py_program target, except pytest targets
    ADD_YTEST($REALPRJNAME coverage.extractor)
}

macro YCR_GENERATE_CONFIGS_INTL(Package, App, Configs...) {
    .CMD=${tool:"maps/tools/yacare/scripts/make_configs"} $Package $App ${cwd:BINDIR} ${output;hide;pre=debian/$Package/:Configs}
}

macro YCR_GENERATE_CONFIGS(Package, App) {
    .CMD=$YCR_GENERATE_CONFIGS_INTL($Package $App ${pre=etc/yandex/maps/yacare/:App.conf} ${pre=etc/logrotate.d/:App} ${pre=etc/template_generator/templates/etc/logrotate.d/:App} ${pre=etc/monrun/conf.d/:App.conf} ${pre=etc/nginx/sites-available/:App.conf} ${pre=etc/syslog-ng/conf-available/:App.conf} ${pre=usr/lib/yandex/maps/yacare/checks/:App} ${pre=usr/lib/yandex/maps/yacare/stat/:App}  ${pre=etc/template_generator/config.d/:App.yaml} ${pre=/juggler/checks-available/yacare_;suf=/MANIFEST.json:App} ${pre=etc/yandex/maps/roquefort/:App.conf} ${pre=usr/lib/yandex/maps/yacare/lua/init_worker.d/rate_limiter_:App.lua} ${pre=usr/lib/yandex/maps/yacare/lua/init_worker.d/tvm_:App.lua} ${pre=usr/lib/yandex/maps/yacare/lua/init.d/tvm_:App.lua})
}

YCR_LINK_EXE=$LINK_EXE && $YCR_GENERATE_CONFIGS($REALPRJNAME $REALPRJNAME)

module YCR_PROGRAM: PROGRAM {
    .CMD=YCR_LINK_EXE
}

macro EXPORTS_SCRIPT(Arg) {
    SET(EXPORTS_FILE $Arg)
}

module UNITTEST_BASE: BASE_PROGRAM {
    when ($UT_SKIP_EXCEPTIONS == "yes") {
        C_DEFINES+=-DUT_SKIP_EXCEPTIONS
    }
    ADD_YTEST($REALPRJNAME unittest.py)
}

### @usage: UNITTEST ([name])
###
### Project Definition-unit test.
###
### is used only in conjunction with the END() macro
### It is recommended not to specify the name (name) UNITTEST-and explicitly
### Documentation: https://wiki.yandex-team.ru/yatool/test/#opisanievya. make1
module UNITTEST: UNITTEST_BASE {
    .NODE_TYPE=Program
    PEERDIR(library/unittest/main)
}

module YT_UNITTEST: UNITTEST_BASE {
    .NODE_TYPE=Program
    PEERDIR(mapreduce/yt/library/utlib)
}

module UNITTEST_WITH_CUSTOM_ENTRY_POINT: UNITTEST_BASE {
    .NODE_TYPE=Program
}

USE_AFL=no

### @usage: FUZZ ()
###
### In order to start using Fazzingom in Arcadia, you need to create a FUZZ module with the implementation of the function Llvmfuzzertestoneinput (example) and add RECURSE from the file AutoCheck/ya. Make under IF (FUZZING).
### in Arcadia supported AFL and Libfuzzer on top of a single interface, but the automatic fuzzing still works only through Libfuzzer.
###
### Documentation: https://wiki.yandex-team.ru/yatool/fuzzing/
module FUZZ: BASE_PROGRAM {
    .NODE_TYPE=Program

    DEFAULT(LIBFUZZER_PATH contrib/libs/libfuzzer)
    when ($USE_AFL == "no") {
        PEERDIR+=$LIBFUZZER_PATH
    }
    when ($USE_AFL == "yes") {
        PEERDIR+=contrib/libs/libfuzzer/afl
    }

    when (!$SANITIZER_TYPE || $SANITIZER_TYPE == "no") {
        PEERDIR+=devtools/nofuzz
    }

    ADD_YTEST($REALPRJNAME fuzz.test)
}

module BOOSTTEST: BASE_PROGRAM {
    .NODE_TYPE=Program
    PEERDIR(library/testing/ya_boost_test)
    ADD_YTEST($REALPRJNAME boost.test)
}

FUZZ_DICTS_VALUE=
### @usage: Fuzz_dicts (path1 [path2...])
### allows you to specify dictionaries, relative to the root of Arcadia, which will be used in Fazzinge.
### is used only for the purpose of FUZZ.
### Libfuzzer and AFL use a single syntax for dictionary descriptions.
###
### Documentation: https://wiki.yandex-team.ru/yatool/fuzzing/
macro FUZZ_DICTS(Data...) {
    SET_APPEND(FUZZ_DICTS_VALUE $Data)
}

FUZZ_OPTS_VALUE=
### @usage: fuzz_opts (opt1 [Opt2...])
###
### Overrides or adds options to the chassis run and Fazzingu.
### is used only for the purpose of FUZZ.
### currently supported only Libfuzzer, so you should use the options for it.
### Example:
### Fuzz_opts (
###-Max_len = 1024
###-RSS_LIMIT_MB = 8192
### )
###
### Documentation: https://wiki.yandex-team.ru/yatool/fuzzing/
macro FUZZ_OPTS(Data...) {
    SET_APPEND(FUZZ_OPTS_VALUE $Data)
}

TEST_SRCS_VALUE=
macro TEST_SRCS(Tests...) {
    SET_APPEND(TEST_SRCS_VALUE $Tests)
}

macro _TEST3_SRCS(Tests...) {
    SET_APPEND(TEST_SRCS_VALUE $Tests)
}

TEST_DATA_VALUE=
### @usage: DATA([path...])
###
### Specifies the path to the data necessary test.
### Valid: arcadia/<path> , arcadia_tests_data/<path>.
### ### You can also specify the number of the resource required test in cbr format://<eng-id> (resource will be brought to the working directory of the test before it is started)
### Used only inside a macro UNITTEST
###
### Documentation: https://wiki.yandex-team.ru/yatool/test/#dannyeizrepozitorija
macro DATA(Data...) {
    SET_APPEND(TEST_DATA_VALUE $Data)
}

TEST_TAGS_VALUE=
### @usage: TAG ([tag...])
###
### Each test can have one or more tags used to filter tests list for running.
### There are also special tags affecting test behaviour, for example ya:external, sb:ssd.
###
### Documentation: https://wiki.yandex-team.ru/yatool/test/#obshhieponjatija
macro TAG(Tags...) {
    SET_APPEND(TEST_TAGS_VALUE $Tags)
}

TEST_REQUIREMENTS_VALUE=
### @usage: REQUIREMENTS(cpu:ram COUNT:SIZE disk_usage:ram_disk SIZE:SIZE)
###
### Allows you to specify the requirements of the test.
###
### Documentation about the system test: https://wiki.yandex-team.ru/yatool/test/
macro REQUIREMENTS(Tags...) {
    SET(TEST_REQUIREMENTS_VALUE $Tags)
}

TEST_DEPENDS_VALUE=
### @usage: DEPENDS(path1 [path2...])
###
### Creates a dependency between the test and the result of building goals by the ways of the path, then the test can use them
macro DEPENDS(Data...) {
    SET_APPEND(TEST_DEPENDS_VALUE $Data)
}

TEST_ENV_VALUE=
### @usage: ENV(key[=value])
###
### Sets env variable key to value (gets value from system env by default)
macro ENV(Data...) {
    SET_APPEND(TEST_ENV_VALUE ${quo:Data})
}

TEST_RECIPES_VALUE=
### @usage USE_RECIPE(path [arg1 arg2...])
###
### Provides prepared environment via recipe for test
### Documentation: <TODO wiki link>
macro USE_RECIPE(Data...) {
    SET_APPEND(TEST_RECIPES_VALUE $Data)
    SET_APPEND(TEST_RECIPES_VALUE "USE_RECIPE_DELIM")
}

TEST_PYTHON_PATH_VALUE=
macro PYTHON_PATH(Path) {
    SET(TEST_PYTHON_PATH_VALUE $Path)
}

SKIP_TEST_VALUE=
macro SKIP_TEST(Reason...) {
    SET(SKIP_TEST_VALUE $Reason)
}

LINT_LEVEL_VALUE=base
### @usage: NO_LINT()
###
### Keep checking for style files included in PY_SRCS , TEST_SRCS
macro NO_LINT() {
    SET(LINT_LEVEL_VALUE none)
}
macro LINT(level) {
    SET(LINT_LEVEL_VALUE $level)
}

module PYTEST_SCRIPT: BASE_UNIT {
    .NODE_TYPE=Program
    SET(MODULE_SUFFIX .pkg.fake)
    NO_PLATFORM()
    ADD_PYTEST_SCRIPT(PY_TEST)
}

module PYTEST_COMMON: BASE_PY_PROGRAM {
    .NODE_TYPE=Program
    when ($USE_ARCADIA_PYTHON == "yes") {
        PEERDIR+=library/python/pytest
    }
    when ($USE_ARCADIA_PYTHON == "no") {
        MODULE_SUFFIX=.pkg.fake
        PEERDIR+=library/python/pytest/empty
    }

    # XXX DEVTOOLS-3210
    when ($PYTHON_COVERAGE == "yes") {
        PEERDIR+=contrib/python/coverage
    }
}

module PYTEST_BIN: PYTEST_COMMON {
    .NODE_TYPE=Program
    SETUP_PYTEST_BIN()
}

### @usage: PYTEST([name])
###
### Definition of the test using py.test.
### Is only used together with the macro END()
### Documentation: https://wiki.yandex-team.ru/yatool/test/#testynapytest
module PYTEST: PYTEST_BIN {
    when ($BUILD_TYPE == "DEBUG") {
        NO_STRIP=yes
    }
}

module PY3TEST_BIN: BASE_PY3_PROGRAM {
    .NODE_TYPE=Program
    .ALIASES=TEST_SRCS=_TEST3_SRCS
    SETUP_PYTEST_BIN()
    PEERDIR+=library/python/pytest
}

module PY3TEST: PY3TEST_BIN {
    when ($BUILD_TYPE == "DEBUG") {
        NO_STRIP=yes
    }
}

module GTEST: BASE_PROGRAM {
    .NODE_TYPE=Program
    ADDINCL(contrib/libs/gtest contrib/libs/gmock)
    PEERDIR(contrib/libs/gtest contrib/libs/gmock)
    ADD_YTEST($REALPRJNAME gtest)
}

### @usage: YQL_UDF_TEST()
### Definition of the project is to test YQL C++ UDF.
### Documentation: https://wiki.yandex-team.ru/yql/lib/#yqludftest
module YQL_UDF_TEST: PYTEST {
    PEERDIR(yql/library/udf_test)
    PEERDIR(contrib/python/yt/lite)

    DEPENDS(yql/tools/astdiff)
    DEPENDS(yql/tools/udf_resolver)
    DEPENDS(yql/tools/yqlrun)
    DATA(arcadia/yql/mount)
}

### @usage: EXECTEST() + RUN()
###
### Macros for the description and use of the exec tests, suitable for testing the successful launches of programs
###
### EXECTEST()
###
### OWNER(g:yatool)
###
### RUN(
###    cat input.txt
### )
###
### DATA(
###     arcadia/devtools/ya/test/tests/exectest/data
### )
###
### DEPENDS(
###    devtools/dummy_arcadia/cat
### )
###
### TEST_CWD(devtools/ya/test/tests/exectest/data)
###
### END()
### More examples: https://wiki.yandex-team.ru/devtools/ya/test/test/exec test
module EXECTEST: BASE_UNIT {
    .NODE_TYPE=Program
    SET(MODULE_SUFFIX .pkg.fake)
    NO_PLATFORM()
    SETUP_EXECTEST()
}

### @usage: BENCHMARK([benchmarkname])
### Program benchmark, uses library library/testing/benchmark
module BENCHMARK: PROGRAM {
    PEERDIR(library/testing/benchmark/main)
}

TEST_ROOT=$(TESTS_DATA_ROOT)
RESULT_MAX_FILE=0
STRIP_FILES=--dont-strip-files
VERIFY_RESULTS=--verify-results
ADDITIONAL_PATH=

# set for tests variables to fill it by YA_DEV or YA
YA_ROOT=ya
when ($YA_DEV == "yes") {
    YA_ROOT=ya-dev
}

### @usage: UNITTEST_FOR(path/to/lib)
### Definition of the project - Unit-tests. Must be used in conjunction with the macro END().
### Macro UNITTEST_FOR automatically makes SRCDIR + ADDINCL + PEERDIR on path/to/lib
### path/to/lib is the path to the directory with the LIBRARY project.
module UNITTEST_FOR: UNITTEST {
    PEERDIR(ADDINCL $UNITTEST_DIR)
    SRCDIR($UNITTEST_DIR)
}

module _LIBRARY: BASE_UNIT {
    .CMD=LINK_LIB
    .NODE_TYPE=Library
    .PEERDIR_POLICY=as_include
    .EXTS=.o .obj .a .mf
    .ALLOWED=GRPC EXTRALIBS OBJADDE_GLOBAL
    .GLOBAL=USER_CFLAGS USER_CXXFLAGS LDFLAGS SRCS
    .RESTRICTED=ALLOCATOR SIZE TAG DATA TEST_DATA DEPENDS FORK_TESTS FORK_SUBTESTS SPLIT_FACTOR TEST_CWD RUN TIMEOUT
    #TODO: Remove this hack (really we do not need add fake src at all)
    ENABLE(NEED_ADD_FAKE_SRC)

    when ($USE_MKL == "yes") {
        NOPLATFORM=yes
    }

    when ($MSVC == "yes" || $CYGWIN == "yes") {
        MODULE_PREFIX=
        MODULE_SUFFIX=.lib
    }
    otherwise {
        MODULE_PREFIX=lib
        MODULE_SUFFIX=.a
    }

    # TODO: fix WERROR and MSVC_WERROR macros
    when ($NO_COMPILER_WARNINGS != "yes" && $WERROR != "no") {
        when ($WERROR_MODE == "all" || ($WERROR_MODE == "compiler_specific" && $WERROR == "yes")) {
            CFLAGS+=$WERROR_FLAG
        }
    }

    when ($WITH_VALGRIND == "yes") {
        PEERDIR+=contrib/libs/valgrind
    }

    when ($USE_ARCADIA_LIBM == "yes") {
        PEERDIR+=contrib/libs/libm
    }
}

### @usage: LIBRARY()
### Definition of the project - a static library.
### It is recommended not to specify the name
module LIBRARY: _LIBRARY {
    when ($GRPC_FLAG == "yes") {
        PEERDIR+=contrib/libs/grpc
    }
    SET(MODULE_TYPE LIBRARY)
}

# XXX: dirty hack for correct LDFLAGS passing
RESOURCES_LIBRARY_LINK=$LINK_LIB ${hide:LDFLAGS_GLOBAL} ${hide:LDFLAGS}

module RESOURCES_LIBRARY: _LIBRARY {
    .CMD=RESOURCES_LIBRARY_LINK
    .ALLOWED=DECLARE_EXTERNAL_RESOURCE
    .RESTRICTED=ALLOCATOR SIZE TAG DATA TEST_DATA DEPENDS FORK_TESTS FORK_SUBTESTS SPLIT_FACTOR TEST_CWD RUN TIMEOUT SRCS PEERDIR

    SET(NEED_PLATFORM_PEERDIRS no)
    DISABLE(WITH_VALGRIND)
    NO_CODENAVIGATION()
    NO_PLATFORM()
    NO_RUNTIME()
    NO_UTIL()
}

### Definition of the project is "fat" object file, the result of a partial layout of all static libraries, achievable with PEERDIR + available local and global object files.
### Designed for use in XCode projects for IOS.
### It is recommended not to specify the name
module FAT_OBJECT: LIBRARY {
    .CMD=LINK_FAT_OBJECT
    .PEERDIR_POLICY=as_build_from
    SET(MODULE_SUFFIX .o)
}

module DLL_UNIT: LINK_UNIT {
    .CMD=LINK_DYN_LIB
    .NODE_TYPE=Library
    .SYMLINK_POLICY=SO
    .ALLOWED=EXTRALIBS OBJADDE_GLOBAL
    .GLOBAL=USER_CFLAGS USER_CXXFLAGS LDFLAGS
    ALLOCATOR(FAKE)

    when ($MODULE_VERSION) {
        # TODO(somov): SONAME is already used in ymake_conf.py. Check whether both usages are coreect.
        LINK_DYN_LIB_FLAGS+=--soname ${output;noext:SONAME}
    }

    when ($MSVC == "yes" || $CYGWIN == "yes") {
        MODULE_SUFFIX=.dll
    }
    elsewhen ($DARWIN == "yes" || $OS_IOS == "yes") {
        MODULE_PREFIX=lib
        MODULE_SUFFIX=.dylib$MODULE_VERSION
    }
    otherwise {
        MODULE_PREFIX=lib
        MODULE_SUFFIX=.so$MODULE_VERSION
    }

    when ($LINUX == "yes") {
        # `-z notext' is needed for linking mkl into shared libraries
        LDFLAGS += -Wl,-z,notext
        LINK_DYN_LIB_FLAGS+=--fix-elf ${tool:"tools/fix_elf"}
    }

    when ($DARWIN == "yes") {
        LDFLAGS += -undefined dynamic_lookup
    }

    when ($CLANG_COVERAGE && $CLANG_COVERAGE != "no") {
        PEERDIR+=library/testing/dump_clang_coverage
    }
}

### @usage: PYMODULE(name, major_ver [minor_ver]] [EXPORTS symlist_file] [PREFIX prefix])
### Definition of the project is a Python module.
### 1. The version you have, whole.
### 2. The resulting .so will have the prefix "lib".
### 3. Processing EXPORTS and PREFIX is the same as processing in DLL
module PYMODULE: DLL_UNIT {
    when ($MSVC != "yes" && $DARWIN != "yes") {
        LDFLAGS+= -Wl,-Bsymbolic
    }

    when ($USE_ARCADIA_PYTHON == "yes" && $MSVC == "yes" || $IS_CROSS_TOOLS == "yes") {
        PEERDIR+=contrib/tools/python/lib
    }

    when ($USE_ARCADIA_PYTHON == "no") {
        when ($USE_SYSTEM_PYTHON) {
            PEERDIR+=contrib/libs/platform/python
        }
        otherwise {
            when ($MSVC == "yes" || $CYGWIN == "yes") {
                LDFLAGS+=$PYTHON_LIBRARIES
            }
        }
    }

    # -bundle
    when ($DARWIN == "yes") {
        LDFLAGS+=-flat_namespace
    }
    PYTHON_ADDINCL()

    when ($MSVC == "yes" || $CYGWIN == "yes") {
        MODULE_PREFIX=
        MODULE_SUFFIX=.pyd$MODULE_VERSION
    }
    otherwise {
        MODULE_PREFIX=
        MODULE_SUFFIX=.so$MODULE_VERSION
    }
}

module R_MODULE: DLL_UNIT {
    when ($DARWIN == "yes") {
        LDFLAGS+=-flat_namespace
    }

    when ($MSVC == "yes" || $CYGWIN == "yes") {
        MODULE_PREFIX=lib
        MODULE_SUFFIX=.dll
    }
    otherwise {
        MODULE_SUFFIX=.so$MODULE_VERSION
    }

    ADDINCL(contrib/libs/r-lang)
}

### @usage: DLL(name [major_ver [minor_ver]] [EXPORTS symlist_file] [PREFIX prefix])
### Definition of the project is a dynamic library.
### 1. Version, sure, whole
### 2. EXPORTS allows you to explicitly specify the list of exported functions
### 3. PREFIX allows you to change the prefix of the output file (default DLL has the prefix "lib")
module DLL: DLL_UNIT {
    SET(MAKE_ONLY_SHARED_LIB yes)

    when ($MSVC == "yes" || $CYGWIN == "yes") {
        MODULE_SUFFIX=.dll
    }

    # TODO: Make it possible to use this syntax
    # DEFAULT(DLL_FOR_DIR no)
    ### FIXME: XXX
    ###when ($DLL_FOR_DIR != "no") {
    ###    SRCDIR($DLL_FOR_DIR)
    ###    ADDINCL($DLL_FOR_DIR)
    ###}
}

### In SRCS have indicated DLL_JAVA swig sources.
### Obtained from DLL_JAVA dynamic library is treated the same as in the case of PEERDIR to DLL.
### Obtained from DLL_JAVA jar goes on the classpath. Example.
###
### Documentation: https://wiki.yandex-team.ru/yatool/java/#integracijascpp/pythonsborkojj
module DLL_JAVA: DLL {
    .EXTS=.o .obj .jsrc .java .mf
    .CMD=SWIG_DLL_JAR_CMD
    PEERDIR(contrib/libs/platform/java/jdk)

    SET(SWIG_LANG java)
}

module UDF_BASE: DLL_UNIT  {
    PRINT_MODULE_TYPE(UDF $REALPRJNAME)

    when ($MSVC != "yes" && $DARWIN != "yes") {
        LDFLAGS+= -Wl,-Bsymbolic
    }
}

### @usage: UDF(name [EXPORTS symlist_file] [PREFIX prefix])
### Definition of the project - KiWi UDF. (Deprecated)
### Processing EXPORTS and PREFIX is the same as processing in DLL
### https://wiki.yandex-team.ru/robot/manual/kiwi/userguide/#polzovatelskiefunkciiudftriggerykwcalc
module UDF: UDF_BASE {
    PEERDIR(yweb/robot/kiwi/kwcalc/udflib)
}

### It is similar to LIBRARY() macro but has additional PEERDIR by default
### It is recommended not to specify a name
module UDF_LIB: LIBRARY {
    PEERDIR(yweb/robot/kiwi/kwcalc/udflib)
}

when ($SANITIZER_TYPE || $USE_ARCADIA_PYTHON == "no") {
    YQL_UDF_LINK_CMD=$LINK_DYN_LIB
}
otherwise {
    YQL_UDF_LINK_CMD=$LINK_DYN_LIB && ${tool:"yql/tools/udf_probe"} $TARGET ${kv;hide:"p UD"}
}

### @usage: YQL_UDF(name)
### Definition of the project YQL with C++ UDF (User Defined Function YQL)
### https://wiki.yandex-team.ru/yql/udf/cpp/
module YQL_UDF: UDF_BASE {

    .CMD=YQL_UDF_LINK_CMD

    PEERDIR(yql/library/udf)
    PEERDIR(yql/library/udf/support)
    SET_APPEND(USER_CXXFLAGS -DBUILD_UDF)
    # For Windows using declspecs
    DEFAULT(YQL_UDF_EXPORT ${ARCADIA_ROOT}/yql/library/udf/udfs_exports.exports)

    when ($WINDOWS == "yes") {
        YQL_UDF_EXPORT=
    }

    SET(EXPORTS_FILE $YQL_UDF_EXPORT)
}

### @usage: YQL_ABI_VERSION(major minor release))
### Specifying the supported ABI for YQL_UDF.
macro YQL_ABI_VERSION(Major, Minor, Patch) {
    YQL_ABI_FLAGS=-DUDF_ABI_VERSION_MAJOR=$Major -DUDF_ABI_VERSION_MINOR=$Minor -DUDF_ABI_VERSION_PATCH=$Patch
    SET_APPEND(USER_CXXFLAGS $YQL_ABI_FLAGS)
}

module YQL_PYTHON_UDF: YQL_UDF {
    PYTHON_ADDINCL()
    PEERDIR_TAGS=PY_PROTO PY2 __EMPTY__

    DEFAULT(YQL_PYTHON_UDF_EXPORT ${ARCADIA_ROOT}/yql/udfs/common/python/python_udf/python_udfs_exports.exports)

    when ($WINDOWS == "yes") {
        YQL_PYTHON_UDF_EXPORT=
    }

    ### FIXME: XXX the statement below uncoditionally set EXPORTS_FILE (due to incorrect behaviour of old ConfReader
    ###when ($USE_ARCADIA_PYTHON == "yes") SET(EXPORTS_FILE $YQL_PYTHON_UDF_EXPORT)
    SET(EXPORTS_FILE $YQL_PYTHON_UDF_EXPORT)
}

module YQL_PYTHON3_UDF: YQL_UDF {
    PYTHON3_ADDINCL()
    PEERDIR_TAGS=PY_PROTO PY3 __EMPTY__

    DEFAULT(YQL_PYTHON_UDF_EXPORT ${ARCADIA_ROOT}/yql/udfs/common/python/python_udf/python_udfs_exports.exports)

    when ($WINDOWS == "yes") {
        YQL_PYTHON_UDF_EXPORT=
    }

    ### FIXME: XXX the statement below uncoditionally set EXPORTS_FILE (due to incorrect behaviour of old ConfReader
    ###when ($USE_ARCADIA_PYTHON == "yes") SET(EXPORTS_FILE $YQL_PYTHON_UDF_EXPORT)
    SET(EXPORTS_FILE $YQL_PYTHON_UDF_EXPORT)
}

module YQL_PYTHON_UDF_TEST: YQL_PYTHON_UDF {
    PEERDIR(library/python/pytest)
    DEPENDS(yql/tools/run_python_udf)
    SETUP_PYTEST_BIN(RUNNER_BIN $(BUILD_ROOT)/yql/tools/run_python_udf/run_python_udf)
}

# as SRCS in packages use macro BUNDLE_SRCS!

PACKED_PACKAGE_ARGS=
PACKED_PACKAGE_EXT=
### @usage: PACK(archive_type)
### Is placed inside the PACKAGE, packages received in the Assembly tree to the archive.
macro PACK(Ext) {
    SET(PACKED_PACKAGE_EXT $Ext)
}

PACKAGE_STRICT_VALUE=
macro PACKAGE_STRICT() {
    SET(PACKAGE_STRICT_VALUE yes)
}

### @usage: PACKAGE(name)
### Module that is able to collect what is described directly inside it, and collect all transitive is available from him at PEERDIR am.
### As a result, in bilgeway directory project turns out the structure of the accessible part of arcadia, where the relevant paths are the build results PEERDIR-s.
###
### Is only used together with the macro END() and FILES()
###
### Example usage: https://wiki.yandex-team.ru/yatool/large-data/
module PACKAGE: BASE_UNIT  {
    .CMD=TOUCH_PACKAGE_MF
    .PEERDIR_POLICY=as_build_from
    .ALL_INS_TO_OUT=yes
    SET(MODULE_SUFFIX .pkg.fake)
    SET(DONT_RESOLVE_INCLUDES yes)
    NO_PLATFORM()
    when ($PACKED_PACKAGE_EXT) {
        PACKED_PACKAGE_ARGS+=--dest-arch ${output;suf=.$PACKED_PACKAGE_EXT:REALPRJNAME}
    }
    SET(NEED_PLATFORM_PEERDIRS no)
}

module TGZ_PACKAGE: UNION  {
    SET(MODULE_SUFFIX .tgz)
}

TOUCH_UNIT_MF=$TOUCH_UNIT && $GENERATE_MF


### @usage: UNION(name)
### Module that is able to collect what is described directly inside it, remember these reasons it PEERDIR-s, go there and collect.
### ### But the build DIR PEAR s in itself is not used. Semantics in relation PERDIR s the same LIBRARY.
### https://wiki.yandex-team.ru/yatool/large-data/
module UNION: BASE_UNIT {
    .ALL_INS_TO_OUT=yes
    NO_PLATFORM()
    SET(MODULE_SUFFIX .pkg.fake)
    SET(DONT_RESOLVE_INCLUDES yes)
    .CMD=TOUCH_UNIT_MF
    SET(NEED_PLATFORM_PEERDIRS no)
}

module PY_PACKAGE: UNION {
    .EXTS=.py
    .ALL_INS_TO_OUT=yes
    .ALLOWED=GRPC
}

PY_NAMESPACE_VALUE=
macro PY_NAMESPACE(Arg) {
    SET(PY_NAMESPACE_VALUE $Arg)
}

COMPILE_JAVA_MF=$COMPILE_JAVA && $GENERATE_MF

### JAVA_LIBRARY() is a module for describing the java library. The output artifact is .jar file.
module _JAVA_LIBRARY: BASE_UNIT {
    .EXTS=.jsrc .java .jar .mf
    .NODE_TYPE=Bundle
    .CMD=COMPILE_JAVA_MF
    .PEERDIR_POLICY=as_build_from

    PEERDIR(contrib/libs/platform/java/jdk)

    PEERDIR_TAGS=JAVA_PROTO
    MACRO_ALIAS(PROTO_CMD JAVA_PROTO_CMD)
    MACRO_ALIAS(EVLOG_CMD JAVA_EVLOG_CMD)

    when ($PACKAGE_PREFIX) {
        PACKAGE_PREFIX_ARGS=--package-prefix=$PACKAGE_PREFIX
    }

    NO_PLATFORM()
    SET(MODULE_SUFFIX .jar)
    SET(DONT_RESOLVE_INCLUDES yes)
}

JAVA_PROTOBUF=contrib/java/com/google/protobuf/protobuf-java/3.5.1
JAVA_GRPC_STUB=contrib/java/io/grpc/grpc-stub/1.12.0
JAVA_GRPC_PROTOBUF=contrib/java/io/grpc/grpc-protobuf/1.12.0

module PY_LIBRARY: _LIBRARY {
    PYTHON_ADDINCL()
    PEERDIR_TAGS=PY2 PY_PROTO __EMPTY__
    OPTIMIZE_PY_PROTOS()

    when ($NO_PYTHON_INCLS != "yes") {
        PEERDIR+=contrib/libs/python
    }
    when ($MSVC == "yes" || $CYGWIN == "yes") {
        MODULE_PREFIX=py
    }
    otherwise {
        MODULE_PREFIX=libpy
    }
    .IGNORED=GENERATE_ENUM_SERIALIZATION GENERATE_ENUM_SERIALIZATION_WITH_HEADER
}

module PY3_LIBRARY: _LIBRARY {
    PYTHON3_ADDINCL()
    SET(PEERDIR_TAGS PY3 PY3_PROTO __EMPTY__)
    OPTIMIZE_PY_PROTOS()

    when ($NO_PYTHON_INCLS != "yes") {
        PEERDIR+=contrib/libs/python
    }
    when ($MSVC == "yes" || $CYGWIN == "yes") {
        MODULE_PREFIX=py
    }
    otherwise {
        MODULE_PREFIX=libpy
    }
    .IGNORED=GENERATE_ENUM_SERIALIZATION GENERATE_ENUM_SERIALIZATION_WITH_HEADER
    .ALIASES=PY_SRCS=PY3_SRCS TEST_SRCS=_TEST3_SRCS PY_REGISTER=PY3_REGISTER
}

module BASE_PY_PROGRAM: BASE_PROGRAM {
    .CMD=PY_PROGRAM_LINK_EXE
    PYTHON_ADDINCL()
    PEERDIR_TAGS=PY_PROTO PY2 __EMPTY__
    OPTIMIZE_PY_PROTOS()

    when ($NO_PYTHON_INCLS != "yes") {
        PEERDIR+=contrib/libs/python
    }
    when ($USE_ARCADIA_PYTHON == "yes") {
        PEERDIR+=library/python/runtime/main contrib/python/subprocess32
    }

    ALLOCATOR(J)
    STRIP()

    when ($SANITIZER_TYPE && $SANITIZER_TYPE != "no") {
        NO_STRIP=yes
    }
}

module BASE_PY3_PROGRAM: BASE_PROGRAM {
    PYTHON3_ADDINCL()
    SET(PEERDIR_TAGS PY3_PROTO PY3 __EMPTY__)
    PEERDIR(library/python/runtime_py3/main)

    ALLOCATOR(J)
    STRIP()

    when ($NO_PYTHON_INCLS != "yes") {
        PEERDIR+=contrib/libs/python
    }
    when ($SANITIZER_TYPE && $SANITIZER_TYPE != "no") {
        NO_STRIP=yes
    }
    .ALIASES=PY_SRCS=PY3_SRCS PY_REGISTER=PY3_REGISTER PY_MAIN=PY3_MAIN TEST_SRCS=_TEST3_SRCS
}

JAVA_SWIG_DELIM=JAVA_SWIG_DELIM

JAVAC_OPTS=
when ($USE_SYSTEM_JDK) {
    JDK_RESOURCE=$USE_SYSTEM_JDK
}
otherwise {
    JDK_RESOURCE=$JDK_RESOURCE_GLOBAL
}
COMPILE_JAVA=${cwd:ARCADIA_BUILD_ROOT} $YMAKE_PYTHON ${input:"build/scripts/compile_java.py"} --javac-bin $JDK_RESOURCE/bin/javac --jar-bin $JDK_RESOURCE/bin/jar $PACKAGE_PREFIX_ARGS --jar-output $TARGET --srcs-jar-output ${output;suf=-sources.jar:REALPRJNAME} $AUTO_INPUT DELIM $JAVAC_OPTS DELIM $PEERS ${kv;hide:"p JV"} ${kv;hide:"pc light-blue"} ${kv;hide:"show_out"} ${kv;hide:"PEERS $PEERS"}
REAL_SWIG_DLL_JAR_CMD=${cwd:ARCADIA_BUILD_ROOT} $YMAKE_PYTHON ${input:"build/scripts/build_dll_and_java.py"} $JAVA_SWIG_DELIM $REAL_LINK_DYN_LIB $JAVA_SWIG_DELIM $COMPILE_JAVA $JAVA_SWIG_DELIM $AUTO_INPUT $JAVA_SWIG_DELIM $TARGET $JAVA_SWIG_DELIM ${output;suf=.jar:REALPRJNAME} $JAVA_SWIG_DELIM ${output;suf=-sources.jar:REALPRJNAME} $JAVA_SWIG_DELIM $ARCADIA_BUILD_ROOT

### @usage: METAQUERY()
### Project Definition - KIWI Meta query. (Objected)
### https://wiki.yandex-team.ru/robot/manual/kiwi/techdoc/design/metaquery/
module METAQUERY: BASE_UNIT  {
    .ALL_INS_TO_OUT=yes
    PRINT_MODULE_TYPE(METAQUERY $REALPRJNAME)
}

ARGS_DELIM="MACRO_CALLS_DELIM"

SYSTEM_PROPERTIES_VALUE=
macro SYSTEM_PROPERTIES(Args...) {
    SET_APPEND(SYSTEM_PROPERTIES_VALUE $Args)
}

JVM_ARGS_VALUE=
macro JVM_ARGS(Args...) {
    SET_APPEND(JVM_ARGS_VALUE $Args)
}

CHECK_JAVA_DEPS_VALUE=
macro CHECK_JAVA_DEPS(Arg) {
    SET(CHECK_JAVA_DEPS_VALUE $Arg)
}

ERROR_PRONE_VALUE=
macro USE_ERROR_PRONE() {
    SET(ERROR_PRONE_VALUE yes)
}

TEST_CWD_VALUE=
### @usage: TEST_CWD(path)
###
### Defines cwd test. Used in conjunction with DATA()
###
### Is only used inside of the macro TEST
###
macro TEST_CWD(Arg) {
    SET(TEST_CWD_VALUE $Arg)
}

MAKE_UBERJAR_VALUE=
### @usage UBERJAR()
### UBERJAR is a single all-in-one jar-archive includes all needed him (achievable PERDIR) Java dependence. Also supported pros classes inside the archive to a different package (similar to the Maven-shade-plugin).
### In order to collect uberjar, you need to add uberjar macros to the JAVA_PROGRAM module .
### Settings
### You can use the following macros to configure the saudi archive:
### 1. UBERJAR_HIDING_PREFIX prefix for roaming (shadows) classes (default still remains the same)
### 2. UBERJAR_HIDE_EXCLUDE_PATTERN for template classes that permission is not necessary(by default, all classes are moved )
### 3. UBERJAR_PATH_EXCLUDE_PREFIX the prefix for paths that should not get in the jar archive
macro UBERJAR() {
    SET(MAKE_UBERJAR_VALUE yes)
}

UBERJAR_PREFIX_VALUE=
macro UBERJAR_HIDING_PREFIX(Arg) {
    SET(UBERJAR_PREFIX_VALUE $Arg)
}

UBERJAR_HIDE_EXCLUDE_VALUE=
macro UBERJAR_HIDE_EXCLUDE_PATTERN(Args...) {
    SET_APPEND(UBERJAR_HIDE_EXCLUDE_VALUE $ARGS_DELIM $Args)
}

UBERJAR_PATH_EXCLUDE_VALUE=
macro UBERJAR_PATH_EXCLUDE_PREFIX(Args...) {
    SET_APPEND(UBERJAR_PATH_EXCLUDE_VALUE $ARGS_DELIM $Args)
}

ADD_WAR_VALUE=
macro ADD_WAR(Args...) {
    SET_APPEND(ADD_WAR_VALUE $ARGS_DELIM $Args)
}

IDEA_EXCLUDE_DIRS_VALUE=
### @usage: IDEA_RESOURCE_DIRS(<additional dirs>)
### Macro sets specified resource directories in an idea project generated by ya ide idea
macro IDEA_EXCLUDE_DIRS(Args...) {
    SET_APPEND(IDEA_EXCLUDE_DIRS_VALUE $Args)
}

IDEA_RESOURCE_DIRS_VALUE=
macro IDEA_RESOURCE_DIRS(Args...) {
    SET_APPEND(IDEA_RESOURCE_DIRS_VALUE $Args)
}

JAVAC_FLAGS_VALUE=
macro JAVAC_FLAGS(Args...) {
    SET_APPEND(JAVAC_FLAGS_VALUE $ARGS_DELIM $Args)
}

MAVEN_GROUP_ID_VALUE=
### @usage: MAVEN_GROUP_ID(group_id_for_maven_export)
### Set maven export group id for JAVA_PROGRAM() and JAVA_LIBRARY()
macro MAVEN_GROUP_ID(Arg) {
    SET(MAVEN_GROUP_ID_VALUE $Arg)
}


ANNOTATION_PROCESSOR_VALUE=
### @usage: ANNOTATION_PROCESSOR(processors...)
### The macro is in development.
### Used to specify annotation processors to build JAVA_PROGRAM() and JAVA_LIBRARY()
macro ANNOTATION_PROCESSOR(Args...) {
    SET_APPEND(ANNOTATION_PROCESSOR_VALUE $ARGS_DELIM $Args)
}

EXCLUDE_VALUE=
### EXCLUDE(prefixes)
### The macro is in development.
### Specifies which libraries should be excluded from the classpath.
macro EXCLUDE(Args...) {
    SET_APPEND(EXCLUDE_VALUE $ARGS_DELIM $Args)
}

JAVA_SRCS_VALUE=
### @usage: JAVA_SRCS(srcs)
### Using the macro JAVA_SRCS() specifies the java source files and resources. A macro can be contained in any of four java modules.
### Keywords:
### 1. X SRCDIR - specify the directory x is performed relatively to search the source code for these patterns. If there is no SRCDIR, the source will be searched relative to the module directory.
### 2. PACKAGE_PREFIX x - use if source paths relative to the SRCDIR does not coincide with the full class names. For example, if all sources of module are in the same package, you can create a directory package/name , and just put the source code in the SRCDIR and specify PACKAGE_PREFIX package.name.
### @example:
### Пример
### --- example/ya.make
### JAVA_PROGRAM()
### JAVA_SRCS(SRCDIR src/main/java **/*)
### END()
### --- example/src/main/java/ru/yandex/example/HelloWorld.java
### package ru.yandex.example;
### public class HelloWorld {
###     public static void main(String[] args) {
###         System.out.println("Hello, World!");
###     }
### }
### macro JAVA_SRCS(Args...) {
###     SET_APPEND(JAVA_SRCS_VALUE $ARGS_DELIM $Args)
### }
### Documentation: https://wiki.yandex-team.ru/yatool/java/#javasrcs
macro JAVA_SRCS(Args...) {
    SET_APPEND(JAVA_SRCS_VALUE $ARGS_DELIM $Args)
}

JAVA_ADD_DLLS_VALUE=no
macro ADD_DLLS_TO_JAR() {
    SET(JAVA_ADD_DLLS_VALUE yes)
}

EXTERNAL_JAR_VALUE=
### @usage: EXTERNAL_JAR(library.jar)
### Is used to indicate the collected external java libraries inside the project JAVA_LIBRARY()
###
### Documentation: https://wiki.yandex-team.ru/yatool/java/#ispolzovanievneshnixmavenbibliotek
macro EXTERNAL_JAR(Args...) {
    SET_APPEND(EXTERNAL_JAR_VALUE $ARGS_DELIM $Args)
}

DEPENDENCY_MANAGEMENT_VALUE=
### @usage: DEPENDENCY_MANAGEMENT(
###     path/to/lib1
###     path/to/lib2
###     ...
### )
### It allows you to lock the versions of the libraries from the contrib/java in one place, and all modules of the project when writing PEERDIR not specify a version.
### For example, if the module says PEERDIR (contrib/java/junit/junit), and
### 1. written DEPENDENCY_MANAGEMENT(contrib / java / junit/junit / 4.12), the PEERDIR is automatically replaced by contrib / java / junit/junit/4.12
### 2. not written appropriate DEPENDENCY_MANAGEMENT , PEERDIR automatically replaced with the default from contrib/java/junit/junit/ya.make. These defaults are always there and are supported in maven-import, which is put there the maximum(available in contrib/java ) version.
### The property is transitive. That is, if module a depends on module B , and PEERDIR is written in B(contrib/java/junit/junit), and this junit was replaced by junit-4.12, then junit-4.12 will come to A through B.
### Allows you to lock the versions of the libraries from the contrib/java falling in the classpath transitive.
### For example, if a module written DEPENDENCY_MANAGEMENT(contrib/java/junit/junit/4.12) , but not written appropriate PEERDIR(contrib/java/junit/junit),
### 1. if you are attracted by dependencies, such as contrib/java/junit/junit/4.11, it will be replaced by contrib/java/junit / junit / 4.12
### 2. if the dependency does not extend any junit DEPENDENCY_MANAGEMENT this has no effect
### This property is not passed transitively. That is, if module a depends on B, and B replaced itself transitively arriving junit-4.11 on junit-4.12, in a through B all the same will arrive junit-4.11.
###
### In the case when the module is written at the same time DEPENDENCY_MANAGEMENT(contrib/java/junit/junit/4.12) and PERDIR(contrib/java/junit/junit/4.11) PEERDIR wins.
macro DEPENDENCY_MANAGEMENT(Args...) {
    SET_APPEND(DEPENDENCY_MANAGEMENT_VALUE $ARGS_DELIM $Args)
}

module JAVA_PLACEHOLDER: BASE_UNIT  {
    .CMD=TOUCH_JAVA_UNIT
    PEERDIR_TAGS=JAVA_PROTO
    PEERDIR(contrib/libs/platform/java/jdk)
    PEERDIR(contrib/libs/platform/java/uberjar)

    NO_PLATFORM()
    JAVA_MODULE()
}

### @usage: JAVA_PROGRAM()
### JAVA_PROGRAM() - module for describing java programs.
### Output artifacts: .jar and directory with all the jar to the classpath of the formation.
###
### Documentation: https://wiki.yandex-team.ru/yatool/java/
module JAVA_PROGRAM: JAVA_PLACEHOLDER {
    SET(MODULE_TYPE JAVA_PROGRAM)
}

### @usage: JAVA_LIBRARY()
### Documentation: https://wiki.yandex-team.ru/yatool/java/
module JAVA_LIBRARY: JAVA_PLACEHOLDER {
    SET(MODULE_TYPE JAVA_LIBRARY)
}

### @usage: JTEST()
### Definition of the project the Junit test.
###
### Module to describe the java tests.
### If requested, build system will scan the source code of the module for the presence of junit tests and run them.
### Output artifacts: a jar, a directory of exhaust tests(if required run the tests) - test logs, system logs testiranja, temporary files, tests, etc.
### Documentation: https://wiki.yandex-team.ru/yatool/test/#testynajava
module JTEST: JAVA_PLACEHOLDER {
    SET(MODULE_TYPE JTEST)

    # TODO: if <needs_sonar>
    DEPENDS(contrib/java/org/sonarsource/scanner/cli/sonar-scanner-cli/2.8)
    DEPENDS(devtools/junit-runner devtools/jacoco-agent)
    JAVA_TEST()
}

module TESTNG: JAVA_PLACEHOLDER {
    SET(MODULE_TYPE TESTNG)
    PEERDIR(devtools/testng_plugin)
    JAVA_TEST()
}

### @usage: JTEST_FOR(x)
###
### Module to describe the java tests.
### In contrast to the JTEST , the build system will scan for the presence of the test sources of the module x . As x can be JAVA_PROGRAM or JAVA_LIBRARY . JTEST_FOR also can have its own source, in this case they will be compiled and added to the classpath of a test run.
### Output artifacts: a jar, a directory of exhaust tests(if requested tests are run).
### ### Documentation: https://wiki.yandex-team.ru/yatool/test/#testynajava
module JTEST_FOR: JTEST {
    SET(MODULE_TYPE JTEST_FOR)
    PEERDIR($UNITTEST_DIR)
    SET(REALPRJNAME jtest)
    JAVA_TEST()
}

multimodule SANDBOX_TASK {
    module SB_TASK_BIN: PY_PROGRAM {
        PY_MAIN(sandbox.taskbox.binary)
        PEERDIR(sandbox/bin sandbox/sdk2 sandbox/sandboxsdk)
        SET_APPEND(NO_CHECK_IMPORTS_FOR_VALUE api.*)
        SET_APPEND(NO_CHECK_IMPORTS_FOR_VALUE kernel.*)
        SET_APPEND(NO_CHECK_IMPORTS_FOR_VALUE library.*)
        SET_APPEND(NO_CHECK_IMPORTS_FOR_VALUE sky*)
    }
    module PY2: PY_LIBRARY {
        PEERDIR(sandbox/sdk2 sandbox/sandboxsdk)
    }
}

NO_PYTHON_INCLS=no
macro NO_PYTHON_INCLUDES() {
    ENABLE(NO_PYTHON_INCLS)
}

### @usage PYTHON_ADDINCL()
### This macro adds include path for Python headers (Python2 variant)
### This should be used in 2 cases only:
### - In PYMODULE since it compiles into .so and uses external Python runtime
### - In system Python libraries themselves since peerdir there may create a loop
### Never use this macro in PY_PROGRAM, PY_LIBRARY and PY23_LIBRARY: they have everything by default
### In all other cases use USE_PYTHON macro instead
### https://wiki.yandex-team.ru/devtools/commandsandvars/py_srcs
macro PYTHON_ADDINCL() {
    SET(MODULE_TAG PY2)
    SET(PYTHON2 yes)
    SET(PYTHON3 no)
    when ($USE_ARCADIA_PYTHON == "yes") {
        ADDINCL+=contrib/libs/python/Include
    }
    otherwise {
        when ($USE_SYSTEM_PYTHON) {
            PEERDIR+=contrib/libs/platform/python
        }
        otherwise {
            CFLAGS+=$PYTHON_INCLUDE
        }
    }
}

### @usage PYTHON3_ADDINCL()
### This macro adds include path for Python headers (Python3 variant)
### This should be used in 2 cases only:
### - In PYMODULE since it compiles into .so and uses external Python runtime
### - In system Python libraries themselves since peerdir there may create a loop
### Never use this macro in PY3_PROGRAM and PY3_LIBRARY and PY23_LIBRARY: they have everything by default
### In all other cases use USE_PYTHON3() macro instead
### https://wiki.yandex-team.ru/devtools/commandsandvars/py_srcs
macro PYTHON3_ADDINCL() {
    SET(MODULE_TAG PY3)
    SET(PYTHON3 yes)
    SET(PYTHON2 no)
    SET(PEERDIR_TAGS CPP_PROTO PY3 __EMPTY__)
    when ($USE_ARCADIA_PYTHON == "yes") {
        CFLAGS+=-DUSE_PYTHON3
        ADDINCL+=contrib/libs/python/Include
    }
    otherwise {
        when ($USE_SYSTEM_PYTHON) {
            PEERDIR+=contrib/libs/platform/python
        }
        otherwise {
            CFLAGS+=$PYTHON_INCLUDE
        }
    }
}

### @usage USE_PYTHON()
### This adds Python2 library to your LIBRARY and makes it Python2-compatible
### If you'd like to use #include <Python.h> with Python2 specify USE_PYTHON
### If you'd like to use #include <Python.h> with both Python2 and Python3 convert your LIBRARY to PY23_LIBRARY
macro USE_PYTHON() {
    PYTHON_ADDINCL()
    PEERDIR(contrib/libs/python)
}

### @usage USE_PYTHON3()
### This adds Python3 library to your LIBRARY and makes it Python3-compatible
### If you'd like to use #include <Python.h> with Python3 specify USE_PYTHON3
### If you'd like to use #include <Python.h> with both Python2 and Python3 convert your LIBRARY to PY23_LIBRARY
macro USE_PYTHON3() {
    PYTHON3_ADDINCL()
    PEERDIR(contrib/libs/python)

    when ($USE_ARCADIA_PYTHON == "yes") {
        PEERDIR+=library/python/runtime_py3
    }
}

when (($PERLXS == "yes") || ($PERLXSCPP == "yes") || ($USE_PERL == "yes")) {
    PEERDIR+=contrib/libs/platform/perl
}

macro USE_PERL_LIB() {
    PEERDIR(contrib/libs/platform/perl)
}

### @usage ALLOCATOR(Alloc)  # Default: LF
### Set allocator implementation for a program
### This may only be specified for programs. Use inside LIBRARY ALLOCATOR() END() leads to errors and stop the build.
### Available allocators are: "LF", "LF_YT", "LF_DBG", "J", "B", "BS", "C", "GOOGLE", "LOCKLESS", "SYSTEM", "FAKE"
###   LF - lfalloc (https://a.yandex-team.ru/arc/trunk/arcadia/library/lfalloc)
###   LF_YT -  Allocator selection for YT (https://a.yandex-team.ru/arc/trunk/arcadia/library/lfalloc/yt/ya.make)
###   LF_DBG -  Debug allocator selection(https://a.yandex-team.ru/arc/trunk/arcadia/library/lfalloc/dbg/ya.make)
###   J - The JEMalloc allocator (https://a.yandex-team.ru/arc/trunk/arcadia/library/malloc/jemalloc)
###   B - The balloc allocator named Pyotr Popov and Anton Samokhvalov
###       Discussion: https://ironpeter.at.yandex-team.ru/replies.xml?item_no=126
###       Code: https://a.yandex-team.ru/arc/trunk/arcadia/library/balloc
###   BS - The balloc allocator with leak sanitizer (https://a.yandex-team.ru/arc/trunk/arcadia/library/balloc/sanitize)
###   C - Like B, but can be disabled for each thread to LF or SYSTEM one (B can be disabled only to SYSTEM)
###   GOOGLE -  Google TCMalloc (https://a.yandex-team.ru/arc/trunk/arcadia/library/malloc/galloc)
###   LOCKLESS - Allocator based upon lockless queues (https://a.yandex-team.ru/arc/trunk/arcadia/library/malloc/lockless)
###   SYSTEM - Use target system allocator
###   FAKE - Don't link with any allocator
### More about the allocator in Arcadia: https://wiki.yandex-team.ru/arcadia/allocators/
macro ALLOCATOR(Alloc) {
    SET(ALLOCATOR $Alloc)

    when ($ALLOCATOR in [ "LF", "LF_YT", "LF_DBG", "J", "B", "BS", "C", "GOOGLE", "LOCKLESS", "SYSTEM", "FAKE" ]) {
    }
    otherwise {
        PEERDIR+=___configure_error___unknown_allocator_type___$ALLOCATOR
    }
}

macro ADD_PERL_MODULE(Dir, Module) {
    PEERDIR($Dir)
    SET_APPEND(modules $Module)
}

#LINK_STATICALLY=yes

when ($MIC_ARCH == "yes") {
    CFLAGS+=-mmic
    LDFLAGS+=-mmic
}
when ($USE_OPENMP == "yes") {
    PEERDIR+=contrib/libs/openmp
}

when ($STRIP == "yes" && $NO_STRIP != "yes") {
    STRIP_FLAG=$LD_STRIP_FLAG
    DWARF_COMMAND=
}

OBJCOPY_TOOL=$BINUTILS_ROOT_RESOURCE_GLOBAL/bin/objcopy
STRIP_TOOL=$BINUTILS_ROOT_RESOURCE_GLOBAL/bin/strip

SPLIT_DWARF_VALUE=no
NO_SPLIT_DWARF=no

macro SPLIT_DWARF() {
    SET(SPLIT_DWARF_VALUE yes)
}

SPLIT_DWARF_OUTPUT=${output;tobindir;pre=$MODULE_PREFIX;suf=$MODULE_SUFFIX.debug:REALPRJNAME}
when ($SPLIT_DWARF_VALUE == "yes" && $NO_SPLIT_DWARF != "yes" && $NO_DEBUGINFO != "yes" && $HOST_OS_LINUX == "yes" && $TARGET_PLATFORM == "LINUX") {
    DWARF_COMMAND+= \
        $OBJCOPY_TOOL --only-keep-debug $TARGET $SPLIT_DWARF_OUTPUT && \
        $STRIP_TOOL --remove-section .gnu_debuglink $TARGET && \
        $OBJCOPY_TOOL --add-gnu-debuglink $SPLIT_DWARF_OUTPUT $TARGET
    PEERDIR+=contrib/libs/platform/tools/misc/binutils
}

### Set 2 variables
macro BYK_NAME(BykName) {
    SET(__byk_name ${tolower:BykName})
    SET(__byk_lister ${BINDIR}/${__byk_name}.list)
}
### @usage: EXTRALIBS_STATIC(liblist)
### Add the specified external static libraries in linking the program
macro EXTRALIBS_STATIC(Args...) {
    LDFLAGS(-Wl,-Bstatic ${Args} -Wl,-Bdynamic)
}

### 2 RUN_PROGRAM under the condition
macro ADD_COMPILABLE_BYK(Prefixes, MakeBykOptions...) {
    SET(__bykname_upper ${toupper:__byk_name})
    SET(__bykname_lower ${tolower:__byk_name})

    SET(__make_byk_lister ${BINDIR}/${__bykname_lower}.list)
    SET(__make_byk_current_zip ${BINDIR}/${__bykname_lower}.image.gz)
    SET(__make_byk_current_cpp ${BINDIR}/bykimage.${__bykname_lower}.cpp)

    RUN_PROGRAM(dict/tools/make_byk ${MakeBykOptions} ${__bykname_lower} ${Prefixes} ${__make_byk_lister} CWD ${BINDIR} IN ${__make_byk_lister} ${Prefixes} OUT ${__make_byk_current_zip})
    RUN_PROGRAM(dict/tools/byktocpp Byk${__byk_name} ${__make_byk_current_zip} ${__make_byk_current_cpp} IN ${__make_byk_current_zip} OUT ${__make_byk_current_cpp})
}

### STRING(TOUPPER ...) + STRING(TOLOWER ...) + multiple RUN_PROGRAM
macro ADD_COMPILABLE_TRANSLATE(Dict, Name, MakeTransDictOptions...) {
     __translatename_lower=${tolower:Name}
     __translate_dict=${BINDIR}/transdict.${__translatename_lower}.cpp
     RUN_PROGRAM(dict/tools/maketransdict -i ${Dict} ${MakeTransDictOptions} ${Name} STDOUT ${__translate_dict} IN ${Dict})
}

### STRING(TOUPPER ...) + STRING(TOLOWER ...) + multiple RUN_PROGRAM
macro ADD_COMPILABLE_TRANSLIT(TranslitTable, NGrams, Name, Options...) {
     __translitname_lower=${tolower:Name}
     __translit_table=${BINDIR}/translit_trie_${__translitname_lower}.cpp
     __untranslit_table=${BINDIR}/untranslit_trie_${__translitname_lower}.cpp
     __ngrams_table=${BINDIR}/ngr_arr_${__translitname_lower}.cpp
     __gentrie_dir=dict/tools/make_untranslit_trie

     RUN_PROGRAM(${__gentrie_dir} -i ${TranslitTable} ${Options} ${__translitname_lower} IN ${TranslitTable} STDOUT ${__untranslit_table})
     RUN_PROGRAM(${__gentrie_dir} -i ${TranslitTable} -n ${Options} ${__translitname_lower} IN ${TranslitTable} STDOUT ${__translit_table})
     RUN_PROGRAM(dict/tools/make_ngrams -i ${NGrams} ${Options} ${__translitname_lower} IN ${NGrams} STDOUT ${__ngrams_table})
}

###
### Macro is obsolete and not recommended for use! Generate python bindings for protobuf files.
###
macro GENERATE_PY_PROTOS(FILES...) {
    foreach (FILE : $FILES) {
        PY_PROTO_CMD($FILE)
    }
}

macro GENERATE_PY_GLYS(FILES...) {
    foreach (FILE : $FILES) {
        PY_GLY_CMD($FILE)
    }
}

macro GENERATE_PY_EVS(FILES...) {
    foreach (FILE : $FILES) {
        PY_EVLOG_CMD($FILE)
    }
}

macro COPY_FILE(File, Destination) {
    .CMD=$COPY_CMD ${input:File} ${output;noauto:Destination} ${kv;hide:"p CP"} ${kv;hide:"pc light-cyan"}
}

macro FIX_PYTHON_MAIN(File, Destination) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/fix_python_main.py"} ${input:File} ${output;noauto:Destination} ${kv;hide:"p CP"} ${kv;hide:"pc light-cyan"}
}

macro BUNDLE_TARGET(Target, Destination) {
    .CMD=$MOVE_FILE ${result:Target} ${output:Destination} ${kv;hide:"p BN"} ${kv;hide:"pc light-cyan"}
}

### @usage:TIMEOUT(TIMEOUT)
### Sets a timeout on test execution
###
### Documentation about the system test: https://wiki.yandex-team.ru/yatool/test/
macro TIMEOUT(Time) {
    SET(TEST_TIMEOUT $Time)
}

TEST_FORK_MODE=none

### @usage: FORK_TESTS()
###
### Splits a test run on chunks classes.
### The number of chunks can be overridden using the macro SPLIT_FACTOR.
###
### Allows to run tests in parallel. Supported C++ ut and PyTest.
###
### Documentation about the system test: https://wiki.yandex-team.ru/yatool/test/
macro FORK_TESTS() {
    SET(TEST_FORK_MODE tests)
}

### @usage: FORK_SUBTESTS()
###
### Splits the test run in chunks on subtests.
### The number of chunks can be overridden using the macro SPLIT_FACTOR.
###
### Allows to run tests in parallel. Supported C++ ut and PyTest.
###
### Documentation about the system test: https://wiki.yandex-team.ru/yatool/test/
macro FORK_SUBTESTS() {
    SET(TEST_FORK_MODE subtests)
}

### @usage: SPLIT_FACTOR(x)
### Sets the number of chunks for parallel run tests when using FORK_TESTS, FORK_SUBTESTS
### As yourself use means the macro FORK_TESTS.
###
### Supports C++ ut and PyTest.
###
### Documentation about the system test: https://wiki.yandex-team.ru/yatool/test/
macro SPLIT_FACTOR(Factor) {
    SET(TEST_SPLIT_FACTOR $Factor)
}

FORK_TEST_FILES_MODE=off
### @usage: FORK_TEST_FILES()
###
### Only for PYTEST: splits a file executable with the tests on chunks in the files listed in TEST_SRCS
### Compatible with FORK_(SUB)TESTS.
###
### Documentation about the system test: https://wiki.yandex-team.ru/yatool/test/
macro FORK_TEST_FILES() {
    SET(FORK_TEST_FILES_MODE on)
}

TEST_SIZE_NAME=SMALL
### @usage: SIZE(SMALL/MEDIUM/LARGE)
### Marks a test of the specified size.
###
### Documentation about the system test: https://wiki.yandex-team.ru/yatool/test/
macro SIZE(Type) {
    SET(TEST_SIZE_NAME $Type)
}

macro JOIN_SRCS(Out, Src...) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/gen_join_srcs.py"} ${output:Out} ${input;rootrel:Src} ${output_include;hide:Src} ${kv;hide:"p JS"} ${kv;hide:"pc magenta"}
    # SRCS($Src)
}

macro JOIN_SRCS_GLOBAL(Out, Src...) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/gen_join_srcs.py"} ${output;noauto:Out} ${input;rootrel:Src} ${output_include;hide:Src} ${kv;hide:"p JS"} ${kv;hide:"pc magenta"}
    SRCS(GLOBAL $Out)
}

macro FLAT_JOIN_SRCS_GLOBAL(Out, Src...) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/fs_tools.py"} cat ${output:Out} ${input:Src} ${output_include;hide:Src} ${kv;hide:"p JS"} ${kv;hide:"pc magenta"}
    SRCS(GLOBAL $Out)
}

SSE2_CFLAGS=
SSE3_CFLAGS=
SSSE3_CFLAGS=
SSE41_CFLAGS=
AVX_CFLAGS=
AVX2_CFLAGS=
when ($ARCH_X86_64 || $ARCH_I386) {
    when ($MSVC) {
        SSE2_CFLAGS=/D__SSE2__=1
        SSE3_CFLAGS=/D__SSE3__=1
        SSSE3_CFLAGS=/D__SSSE3__=1
        SSE41_CFLAGS=/D__SSE41__=1
        AVX_CFLAGS=/arch:AVX
        AVX2_CFLAGS=/arch:AVX2
    }
    elsewhen ($CLANG || $GCC) {
        SSE2_CFLAGS=-msse2
        SSE3_CFLAGS=-msse3
        SSSE3_CFLAGS=-mssse3
        SSE41_CFLAGS=-msse4.1
        AVX_CFLAGS=-mavx
        AVX2_CFLAGS=-mavx2
    }
}

### Generic macro definition for _SRC (just a placeholder, it does nothing)
macro _SRC(EXT, SRC, SRCFLAGS...) {
}

macro _SRC("S", SRC, SRCFLAGS...) {
    .CMD=$GCCFILTER $C_COMPILER $C_FLAGS_PLATFORM -c -o ${output:SRC.o} ${input:SRC} ${pre=-I:INCLUDE} ${SRCFLAGS} ${kv;hide:"p CC"} ${kv;hide:"pc light-green"} $TOOLCHAIN_ENV
}

macro _SRC("s", SRC, SRCFLAGS...) {
    .CMD=$_SRC(S, $SRC $SRCFLAGS)
}

macro _SRC("mm", SRC, SRCFLAGS...) {
    .CMD=$GCCFILTER $C_COMPILER $C_FLAGS_PLATFORM -x objective-c++ -fobjc-arc -fobjc-abi-version=2 -c -o ${output:SRC.o} ${input:SRC} $CXXFLAGS ${pre=-I:INCLUDE} ${SRCFLAGS} ${kv;hide:"p CC"} ${kv;hide:"pc light-green"} $TOOLCHAIN_ENV
}

macro _SRC("fml", SRC, SRCFLAGS...) {
    .CMD=$FML_TOOL $CHECKFLAG -b -o ${output:SRC.inc} -T ${input:SRC} ${SRCFLAGS} ${kv;hide:"p FM"} ${kv;hide:"pc yellow"}
}

macro _SRC("fml2", SRC, SRCFLAGS...) {
    .CMD=$FML_TOOL $CHECKFLAG -b -o ${output;noext:SRC.fml.inc} -2 -O ${output;noext:SRC.fml.cpp} -T ${input:SRC} ${SRCFLAGS} ${kv;hide:"p FM"} ${kv;hide:"pc yellow"}
}

macro _SRC("fml3", SRC, SRCFLAGS...) {
    .CMD=$FML_TOOL $CHECKFLAG -b -o ${output;noext:SRC.fml.inc} -3 -O ${output;noext:SRC.fml.cpp} -L ${input;noext:SRC.list} -P ${noext:SRC} -T ${input:SRC} ${SRCFLAGS} ${kv;hide:"p FM"} ${kv;hide:"pc yellow"}
}

macro _SRC("sfdl", SRC, SRCFLAGS...) {
    .CMD=$CXX_COMPILER $C_FLAGS_PLATFORM $CXXFLAGS $SFDL_FLAG ${SRCFLAGS} ${input:SRC} && ${tool:"tools/calcstaticopt"} -i ${tmp:SRC.tmp} -a $ARCADIA_ROOT ${output;stdout;noext;defext=.inc:SRC} ${kv;hide:"p SF"} ${kv;hide:"pc yellow"} $TOOLCHAIN_ENV
}

macro _SRC("xs", SRC, SRCFLAGS...) {
    .CMD=$PERL_LD_LIBRARY_PATH $PERL $PERL_INCLUDE ${suf=/ExtUtils/xsubpp:PERL_PRIVLIB} -typemap ${suf=/ExtUtils/typemap:PERL_PRIVLIB} $PERLSUFFIX $XSUBPPFLAGS ${SRCFLAGS} ${input:SRC} $PERLOUTPUT ${kv;hide:"p XS"} ${kv;hide:"pc yellow"}
}

macro _SRC("y", SRC, SRCFLAGS...) {
    # .CMD=${tool:"contrib/tools/byacc"} $BYACC_FLAGS ${noext;output:SRC.cpp} ${input:SRC} ${noext;hide;output;addincl:SRC.h} ${kv;hide:"p YC"} ${kv;hide:"pc light-green"}
    .CMD=${tool:"contrib/tools/bison/bison"} $BISON_FLAGS --m4=${tool:"contrib/tools/bison/m4"} -d -o ${noext;output;main;hide:SRC.h} ${noext;output:SRC.cpp} ${input:SRC} ${SRCFLAGS} && $YMAKE_PYTHON ${input:"build/scripts/preprocess.py"} ${noext;output;addincl:SRC.h} ${kv;hide:"p YC"} ${kv;hide:"pc light-green"}
}

macro _SRC("ypp", SRC, SRCFLAGS...) {
    .CMD=$_SRC(y $SRC $SRCFLAGS)
}

macro _SRC("gperf", SRC, SRCFLAGS...) {
    .CMD=$RUN_NO_SANITIZE ${tool:"contrib/tools/gperf"} $GP_FLAGS ${SRCFLAGS} ${pre=-Nin_;suf=_set;noallext:SRC} ${input:SRC} ${output;stdout;noext;defext=.gperf.cpp:SRC} ${kv;hide:"p GP"} ${kv;hide:"pc yellow"}
}

macro _SRC("rl", SRC, SRCFLAGS...) {
    .CMD=$RUN_NO_SANITIZE ${tool:"contrib/tools/ragel5/ragel"} $RAGEL_FLAGS ${SRCFLAGS} -o ${tmp:SRC.tmp} ${input:SRC} && $RUN_NO_SANITIZE ${tool:"contrib/tools/ragel5/rlgen-cd"} $RLGEN_FLAGS -o ${output;noext;defext=.cpp:SRC} ${tmp:SRC.tmp} ${kv;hide:"p R5"} ${kv;hide:"pc yellow"}
}

macro _SRC("rl5", SRC, SRCFLAGS...) {
    .CMD=$_SRC(rl $SRC $SRCFLAGS)
}

macro _SRC("asp", SRC, SRCFLAGS...) {
    .CMD=$RUN_NO_SANITIZE ${tool:"tools/html2cpp"} ${input:SRC} ${output:SRC.cpp} ${kv;hide:"p HT"} ${kv;hide:"pc yellow"}
}

macro _SRC("rl6", SRC, SRCFLAGS...) {
    .CMD=$RUN_NO_SANITIZE ${tool:"contrib/tools/ragel6"} $RAGEL6_FLAGS ${SRCFLAGS} -I${ARCADIA_ROOT} -o ${output;noext;defext=.rl6.cpp:SRC} ${input:SRC} ${kv;hide:"p R6"} ${kv;hide:"pc yellow"}
}

macro _SRC("l", SRC, SRCFLAGS...) {
    .CMD=${tool:"contrib/tools/flex-old"} $LEX_FLAGS ${SRCFLAGS} -o${output:SRC.cpp} ${output_include;hide:"util/system/compiler.h"} ${input:SRC} ${kv;hide:"p LX"} ${kv;hide:"pc yellow"}
    .ADDINCL=contrib/tools/flex-old
}

macro _SRC("lex", SRC, SRCFLAGS...) {
    .CMD=$_SRC(l $SRC $SRCFLAGS)
}

macro _SRC("lpp", SRC, SRCFLAGS...) {
    .CMD=$_SRC(l $SRC $SRCFLAGS)
}

macro _SRC("pln", SRC, SRCFLAGS...) {
    .CMD=$FML_TOOL -b -o ${output;pre=pln.;noext:SRC.cpp} -f ${input:SRC} ${SRCFLAGS} ${kv;hide:"p FM"} ${kv;hide:"pc yellow"}
}

macro _SRC("xsyn", SRC, SRCFLAGS...) {
    .CMD=$YMAKE_PYTHON ${input:"library/xml/parslib/xsyn2ragel.py"} ${input:SRC} ${input:"library/xml/parslib/xmlpars.xh"} dontuse ${output;stdout:SRC.h.rl5} ${kv;hide:"p XN"} ${kv;hide:"pc yellow"}
}

macro _SRC("ev", SRC, SRCFLAGS...) {
    .CMD=$EVLOG_CMD($SRC)
}

macro _SRC("proto", SRC, SRCFLAGS...) {

    .CMD=$PROTO_CMD($SRC)
}

macro _SRC("gztproto", SRC, SRCFLAGS...) {
    # PROTO_PATH is before ARCADIA_ROOT in includes because in gazetteer we don't use builtins now and paths'canonization (resolving) depends on order of roots.
    # descriptor.proto must be resolved as google/protobuf/descriptor.proto
    .CMD=${tool:"dict/gazetteer/compiler"} -p -I$PROTO_PATH -I$ARCADIA_ROOT ${SRCFLAGS} ${input:SRC} ${output;noext:SRC.proto} ${kv;hide:"p GZ"} ${kv;hide:"pc yellow"}
    .PEERDIR=kernel/gazetteer
}

macro _SRC("pyx", SRC, SRCFLAGS...) {
    # Copy-paste from BUILDWITH_CYTHON
    .CMD=$YMAKE_PYTHON $CYTHON_SCRIPT --cplus -I$ARCADIA_ROOT ${input:SRC} -o ${output;tobindir:SRC.cpp} $CYTHON_OUTPUT_INCLUDES ${SRCFLAGS} ${kv;hide:"p CY"} ${kv;hide:"pc yellow"}
    .ADDINCL=contrib/tools/cython/Cython/Includes
}

macro _SRC("in", SRC, SRCFLAGS...) {
   .CMD=$CONFIGURE_FILE(${SRC} ${noext:SRC})
}

macro _SRC("sc", SRC, SRCFLAGS...) {
    .CMD=${tool:"tools/domschemec"} --in ${input:SRC} --out ${output:SRC.h} ${output_include;hide:"util/generic/strbuf.h"} ${output_include;hide:"util/generic/string.h"} ${output_include;hide:"util/generic/vector.h"} ${output_include;hide:"util/string/cast.h"} ${SRCFLAGS} ${kv;hide:"p SC"} ${kv;hide:"pc yellow"}
}

macro _SRC("external", SRC, SRCFLAGS...) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/fetch_from_external.py"} ${input:SRC} ${output;noext:SRC} ${kv;hide:"p CC"} ${kv;hide:"pc light-green"}
}

macro _SRC("f", SRC, SRCFLAGS...) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/f2c.py"} -t ${tool:"contrib/tools/f2c"} -c ${input:SRC} -o ${output:SRC.c} ${kv;hide:"p FT"} ${kv;hide:"pc light-green"}
    .PEERDIR=contrib/libs/libf2c
    .ADDINCL=contrib/libs/libf2c
}

macro _SRC("cpp", SRC, SRCFLAGS...) {
    .CMD=$_SRC_cpp($SRC $SRCFLAGS)
}

macro _SRC("cxx", SRC, SRCFLAGS...) {
    .CMD=$_SRC(cpp $SRC $SRCFLAGS)
}

macro _SRC("cc", SRC, SRCFLAGS...) {
    .CMD=$_SRC(cpp $SRC $SRCFLAGS)
}

macro _SRC("C", SRC, SRCFLAGS...) {
    .CMD=$_SRC(cpp $SRC $SRCFLAGS)
}

macro _SRC("c", SRC, SRCFLAGS...) {
    .CMD=$_SRC_c($SRC $SRCFLAGS)
}

macro _SRC("m", SRC, SRCFLAGS...) {
    .CMD=$_SRC(c $SRC $SRCFLAGS)
}

macro _SRC("masm", SRC, SRCFLAGS...) {
    .CMD=$_SRC_masm($SRC $SRCFLAGS)
}

macro _SRC("yasm", SRC, SRCFLAGS...) {
    .CMD=$_SRC_yasm($SRC $SRCFLAGS)
}

macro _SRC("asm", SRC, SRCFLAGS...) {
    .CMD=$_SRC(yasm $SRC $SRCFLAGS)
}

macro _SRC("po", SRC, SRCFLAGS...) {
    .CMD=$YMAKE_PYTHON ${input:"contrib/tools/python/src/Tools/i18n/msgfmt.py"} -o ${output;noauto;noext;tobindir:SRC.mo} ${input:SRC}
}

macro SRC(FILE, FLAGS...) {
    _SRC(${lastext:FILE} $FILE $FLAGS)
}

### @usage SRCS([GLOBAL file]* filenames...)
###
### @brief Source files of the project
### Arcadia Paths from the root and is relative to the project's LIST are supported
###
### @param GLOBAL marks next file as direct input link of the program/shared library project built into
### The scope of the GLOBAL keyword - the following file (that is, in the case of SRCS(GLOBAL foo.the cpp bar.cpp) global will be only foo.cpp)
###
### @example:
### Consider the file to ya.make:
### LIBRARY(test_global)
###SRCS(GLOBAL foo.cpp)
### END()
### SRCS(GLOBAL foo.cpp) - use to PROGRAM and DLL that is implicitly* peerdir Yat test_global had clearly been linked with foo.cpp.o.
### - we say that prog1 (or dll1) implicitly peerdirs libN, if there is a relationship of the form: "prog1 (or dll1) peerdirs lib1, lib1 peerdirs lib2, ..., libN-1 peerdirs libN"
macro SRCS(FILES...) {
    foreach (FILE : $FILES) {
        _SRC(${lastext:FILE} $FILE)
    }
}

macro SRC_C_SSE2(FILE, FLAGS...) {
    _SRC(c $FILE $SSE2_CFLAGS $FLAGS)
}

macro SRC_C_SSE3(FILE, FLAGS...) {
    _SRC(c $FILE $SSE3_CFLAGS $FLAGS)
}

macro SRC_C_SSSE3(FILE, FLAGS...) {
    _SRC(c $FILE $SSSE3_CFLAGS $FLAGS)
}

macro SRC_C_SSE41(FILE, FLAGS...) {
    _SRC(c $FILE $SSE41_CFLAGS $FLAGS)
}

macro SRC_C_AVX(FILE, FLAGS...) {
    _SRC(c $FILE $AVX_CFLAGS $FLAGS)
}

macro SRC_C_AVX2(FILE, FLAGS...) {
    _SRC(c $FILE $AVX2_CFLAGS $FLAGS)
}

macro SRC_CPP_SSE2(FILE, FLAGS...) {
    _SRC(cpp $FILE $SSE2_CFLAGS $FLAGS)
}

macro SRC_CPP_SSE3(FILE, FLAGS...) {
    _SRC(cpp $FILE $SSE3_CFLAGS $FLAGS)
}

macro SRC_CPP_SSSE3(FILE, FLAGS...) {
    _SRC(cpp $FILE $SSSE3_CFLAGS $FLAGS)
}

macro SRC_CPP_SSE41(FILE, FLAGS...) {
    _SRC(cpp $FILE $SSE41_CFLAGS $FLAGS)
}

macro SRC_CPP_AVX(FILE, FLAGS...) {
    _SRC(cpp $FILE $AVX_CFLAGS $FLAGS)
}

macro SRC_CPP_AVX2(FILE, FLAGS...) {
    _SRC(cpp $FILE $AVX2_CFLAGS $FLAGS)
}

# TODO: use it in [.pyx] cmd
### @usage: BUILDWITH_CYTHON_CPP
###
### Generates. cpp file from .pyx
macro BUILDWITH_CYTHON_CPP(Src, Options...) {
    .CMD=$YMAKE_PYTHON $CYTHON_SCRIPT ${Options} --cplus -I$ARCADIA_ROOT ${input:Src} -o ${output;tobindir:Src.cpp} $CYTHON_OUTPUT_INCLUDES ${kv;hide:"p CY"} ${kv;hide:"pc yellow"}
    ADDINCL(contrib/tools/cython/Cython/Includes)
}

### @usage: BUILDWITH_CYTHON_C
###
### Generates. c file from .pyx
macro BUILDWITH_CYTHON_C(Src, Options...) {
    .CMD=$YMAKE_PYTHON $CYTHON_SCRIPT ${Options} -I$ARCADIA_ROOT ${input:Src} -o ${output;tobindir:Src.c} $CYTHON_OUTPUT_INCLUDES ${kv;hide:"p CY"} ${kv;hide:"pc yellow"}
    ADDINCL(contrib/tools/cython/Cython/Includes)
}

macro BUILDWITH_RAGEL6(Src, Options...) {
    .CMD=$RUN_NO_SANITIZE ${tool:"contrib/tools/ragel6"} $RAGEL6_FLAGS ${Options} -I${ARCADIA_ROOT} -o ${output;noext;defext=.rl6.cpp:Src} ${input:Src} ${kv;hide:"p R6"} ${kv;hide:"pc yellow"}
}

# TODO: use it in [.pyx] cmd
### @usage: PY_REGISTER()
###
### Register python module
### Documentation: https://wiki.yandex-team.ru/devtools/commandsandvars/pysrcs/#makrospyregister
macro _PY_REGISTER(Func) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/gen_py_reg.py"} $Func ${output;noauto:Func.reg.cpp} ${kv;hide:"p PY"} ${kv;hide:"pc yellow"}
    SRCS(GLOBAL $Func.reg.cpp)
}

macro _PY3_REGISTER(Func) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/gen_py3_reg.py"} $Func ${output;noauto:Func.reg3.cpp} ${kv;hide:"p PY"} ${kv;hide:"pc yellow"}
    SRCS(GLOBAL $Func.reg3.cpp)
}

macro PY_COMPILE_BYTECODE(SrcX, Src) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/py_compile.py"} $SrcX ${input:Src} ${output;noauto:Src.yapyc} ${kv;hide:"p PY"} ${kv;hide:"pc yellow"}
}

macro PY3_COMPILE_BYTECODE(SrcX, Src) {
    .CMD=$(PYTHON3)/python3 ${input:"build/scripts/py3_compile.py"} $SrcX ${input:Src} ${output;noauto:Src.yapyc3} ${kv;hide:"p PY"} ${kv;hide:"pc yellow"} ${kv;hide:"needs_resourcePYTHON3"}
}

### @usage: ARCHIVE_ASM(NAME archive_name files...)
###
### Similar to the macro ARCHIVE, but ARCHIVE_ASM:
### 1. works faster and it is better to use for large files.
### 2. Different syntax (see examples in codesearch or users/pg/tests/archive_test)
macro ARCHIVE_ASM(NAME="", DONTCOMPRESS?"-p":"", Files...) {
    .CMD=$ARCH_TOOL -q $DONTCOMPRESS ${input;join=\: :Files}: -o ${output;chksum;suf=.rodata:NAME} ${kv;hide:"p AR"} ${kv;hide:"pc light-cyan"}
}

### yweb specific
macro PIRE_INLINE_CMD(SRC) {
   .CMD=${tool:"library/regex/pire/inline"} -o ${output:SRC} ${input:SRC} ${output_include;hide:SRC} ${kv;hide:"p PI"} ${kv;hide:"pc yellow"}
}

macro PIRE_INLINE(FILES...) {
    foreach (FILE : $FILES) {
        PIRE_INLINE_CMD($FILE)
    }
}

### @usage: ARCHIVE(NAME, archive_name files...)
###
### To add data (resources, arbitrary files)
### Example: https://wiki.yandex-team.ru/yatool/howtowriteyamakefiles/#a1ispolzujjtekomanduarchive
macro ARCHIVE(NAME="", DONTCOMPRESS?"-p":"", Files...) {
    .CMD=$ARCH_TOOL -q -x $DONTCOMPRESS ${input;join=\: :Files}: -o ${output;chksum;addincl;noauto:NAME} ${kv;hide:"p AR"} ${kv;hide:"pc light-red"}
}

macro ARCHIVE_BY_KEYS(NAME="", KEYS="", DONTCOMPRESS?"-p":"", Files...) {
    .CMD=$ARCH_TOOL -q -x $DONTCOMPRESS ${input:Files} -k $KEYS -o ${output;chksum;addincl;noauto:NAME} ${kv;hide:"p AR"} ${kv;hide:"pc light-red"}
}

#scripts

#special commands
SVNVERSION_SCRIPT=build/scripts/svn_version_gen.py
BUILDVERSION_SCRIPT=build/scripts/build_info_gen.py
SVNVERSION_JAVA_MARKER=output-java-class

### @usage: CREATE_SVNVERSION_FOR()
### Creates a file with information about the svn revision and various other things
###
### Can lead to frequent rebuilding programs.
### Partly off by setting to yes NO_SVN_DEPENDS
macro CREATE_SVNVERSION_FOR(Unused, GenHdr) {
    .CMD=$YIELD $ARCADIA_ROOT && $YIELD $ARCADIA_BUILD_ROOT && $YIELD ${quo:YMAKE_PYTHON} && $XARGS $YMAKE_PYTHON ${input:SVNVERSION_SCRIPT} ${output;chksum:GenHdr} $SVN_DEPENDS ${kv;hide:"p SV"} ${kv;hide:"pc yellow"} ${hide;kv:"show_out"} ${hide;kv:"disable_cache"}
}

macro CREATE_JAVA_SVNVERSION_FOR(GenHdr) {
    .CMD=$YIELD $SVNVERSION_JAVA_MARKER && $YIELD $ARCADIA_ROOT && $YIELD $ARCADIA_BUILD_ROOT && $YIELD ${quo:YMAKE_PYTHON} && $XARGS $YMAKE_PYTHON ${input:SVNVERSION_SCRIPT} ${output;chksum:GenHdr} $SVN_DEPENDS ${kv;hide:"p SV"} ${kv;hide:"pc yellow"} ${hide;kv:"show_out"} ${hide;kv:"disable_cache"}
}

macro CREATE_BUILDINFO_FOR(GenHdr) {
    .CMD=$YIELD $CXX_COMPILER && $YIELD $CXXFLAGS && $XARGS $YMAKE_PYTHON ${input:BUILDVERSION_SCRIPT} ${output:GenHdr} ${kv;hide:"p BI"} ${kv;hide:"pc yellow"} ${hide;kv:"show_out"} ${hide;kv:"disable_cache"}
}

DECIMAL_MD5_SCRIPT=build/scripts/decimal_md5.py
DECIMAL_MD5_FIXED=

### @usage: DECIMAL_MD5_LOWER_32_BITS(<fileName> [FUNCNAME funcName] [inputs...])
###
### Generates .cpp file <fileName> with one defined function 'const char* <funcName>() { return "<calculated_md5_hash>"; }'.
### <calculated_md5_hash> will be md5 hash for all inputs passed to this macro.
###
macro DECIMAL_MD5_LOWER_32_BITS(File, FUNCNAME="", Opts...) {
    .CMD=$YMAKE_PYTHON ${input:DECIMAL_MD5_SCRIPT} --fixed-output=${DECIMAL_MD5_FIXED} --func-name=${FUNCNAME} --lower-bits 32 --source-root=$ARCADIA_ROOT ${input:Opts} ${output;stdout;chksum:File} ${kv;hide:"p SV"} ${kv;hide:"pc yellow"} ${hide;kv:"show_out"}
}

### @usage: CONFIGURE_FILE(from to @ONLY)
### Copy files with the replacement @CMakeListsVar@ variable CMakeListsVar from ya.make during the build.
### Similar to the processing of files with the extension .in
macro CONFIGURE_FILE(Src, Dst) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/configure_file.py"} ${input:Src} ${output;addincl:Dst} $CFG_VARS ${kv;hide:"p CF"} ${kv;hide:"pc yellow"}
}

macro CFG_VARS() {
    .GEN_FROM_FILE=yes
}

### @usage: BASE_CODEGEN(tool_path prefix)
###
### Generator ${prefix}.cpp + ${prefix}.h files based on ${prefix}.in
macro BASE_CODEGEN(Tool, Prefix, Opts...) {
    .CMD=${tool:Tool} ${input:Prefix.in} ${output;nopath;noauto:Prefix.cpp} ${output;nopath:Prefix.h} $Opts ${kv;hide:"p BC"} ${kv;hide:"pc yellow"}
}

### @usage: SPLIT_CODEGEN(tool prefix opts... [OUT_NUM num] [OUTPUT_INCLUDES output_includes...])
###
### Generator of a certain number .the. cpp file + one header .h file from .in
###
### Supports keywords:
### 1. OUT_NUM <the number of generated Prefix.N.cpp default 25 (N varies from 0 to 24)>
### 2. OUTPUT_INCLUDES <path to files that will be included in generalnyj of macro files>
macro SPLIT_CODEGEN_BASE(Tool, Prefix, OUT[], OPTS[], OUTPUT_INCLUDES[]) {
    .CMD=${tool:Tool} ${input:Prefix.in} ${output;hide:OUT} ${output;nopath;noauto:Prefix.cpp} ${output;nopath:Prefix.h} $OPTS ${output_include;hide:OUTPUT_INCLUDES} ${kv;hide:"p SC"} ${kv;hide:"pc yellow"}
}

STRUCT_CODEGEN_OUTPUT_INCLUDES=${output_include;hide:"util/generic/singleton.h"} \
${output_include;hide:"util/generic/strbuf.h"} \
${output_include;hide:"util/generic/vector.h"} \
${output_include;hide:"util/generic/ptr.h"} \
${output_include;hide:"util/generic/yexception.h"} \
${output_include;hide:"kernel/struct_codegen/reflection/reflection.h"} \
${output_include;hide:"kernel/struct_codegen/reflection/floats.h"}

### @usage: STRUCT_CODEGEN(prefix cpp_dependant)
### A special case BASE_CODEGEN , in which the tool is used kernel/struct_codegen/codegen_tool
macro STRUCT_CODEGEN(Prefix) {
    .CMD=$BASE_CODEGEN(kernel/struct_codegen/codegen_tool, $Prefix, $STRUCT_CODEGEN_OUTPUT_INCLUDES)
    .PEERDIR=kernel/struct_codegen/metadata kernel/struct_codegen/reflection
}

macro DUMPERF_CODEGEN(Prefix) {
    .CMD=$BASE_CODEGEN(extsearch/images/robot/tools/dumperf/codegen, $Prefix, ${output_include;hide:"extsearch/images/kernel/erf/erf_format.h"})
}

# LDFLAGS "macro" does not substitute build variables. Use this fixed version to workaround.
macro LDFLAGS_FIXED(Flags...) {
    SET_APPEND(LDFLAGS $Flags)
    SET_APPEND(LDFLAGS_GLOBAL $Flags)
}

### @usage: CFLAGS([GLOBAL compiler_flag]* compiler_flags)
### Add the specified flags to the compile line of files C/C++.
### @params: GLOBAL - Distributes these flags on dependent projects
### Note: remember about the incompatibility flags for gcc and cl (to set flags for the cl macro is used MSVC_FLAGS).
macro CFLAGS(Flags...) {
   SET_APPEND_WITH_GLOBAL(USER_CFLAGS $Flags)
}

### @usage: MASMFLAGS(compiler flags)
### Add the specified flags to the compile line .masm files.
macro MASMFLAGS(Flags...) {
   SET_APPEND(MASMFLAGS $Flags)
}

### @usage: CONLYFLAGS([GLOBAL compiler_flag]* compiler_flags)
### Add the specified flags to the compile line of files of type C.
### @params: GLOBAL - Distributes these flags on dependent projects
macro CONLYFLAGS(Flags...) {
   SET_APPEND_WITH_GLOBAL(USER_CONLYFLAGS $Flags)
}

### @usage: CXXFLAGS(compiler_flags)
### Add the specified flags to the string compile-only C++files.
macro CXXFLAGS(Flags...) {
   SET_APPEND_WITH_GLOBAL(USER_CXXFLAGS $Flags)
}

### @usage: CUDA_NVCC_FLAGS(compiler flags)
### Add the specified flags to the compile line .cu-files.
macro CUDA_NVCC_FLAGS(Flags...) {
   SET_APPEND(CUDA_NVCC_FLAGS $Flags)
}

macro STRIP() {
    ENABLE(STRIP)
}

macro NO_OPTIMIZE() {
    ENABLE(NO_OPTIMIZE)
}

macro NO_COMPILER_WARNINGS() {
    ENABLE(NO_COMPILER_WARNINGS)
    ENABLE(NO_WSHADOW)
}

### @usage: WERROR()
### Consider warning for error in the current project.
### In the bright future will be removed, since WERROR is the default.
### Priorities: NO_COMPILER_WARNINGS > NO_WERROR > WERROR_MODE > WERROR
macro WERROR() {
    # TODO: fix WERROR and MSVC_WERROR macros
    # when ($MSVC != "yes") ENABLE(WERROR)
    ENABLE(WERROR)
}

### @usage: NO_WERROR()
### Back-to-WERROR()
### Priorities: NO_COMPILER_WARNINGS > NO_WERROR > WERROR_MODE > WERROR
macro NO_WERROR() {
    DISABLE(WERROR)
}

macro NO_WSHADOW() {
    ENABLE(NO_WSHADOW)
}

macro NO_PLATFORM_RESOURCES() {
    ENABLE(NOPLATFORM_RESOURCES)
}

macro NO_CODENAVIGATION() {
    ENABLE(NOCODENAVIGATION)
}

macro NO_UTIL() {
    ENABLE(NOUTIL)
}

### @usage: NO_RUNTIME()
###
### This macro:
### 1. Sets the ENABLE(NOUTIL) + DISABLE(USE_INTERNAL_STL)
### 2. If the project that contains the macro NO_RUNTIME(), peerdir-it project does not contain NO_RUNTIME() => Warning
macro NO_RUNTIME() {
    SET(USE_ARCADIA_LIBM no)
    NO_UTIL()
    ENABLE(NORUNTIME)
}

### NO_LIBC() + ENABLE(NOPLATFORM)
macro NO_PLATFORM() {
    NO_LIBC()
    ENABLE(NOPLATFORM)
}

### @usage: NO_LIBC()
### NO_RUNTIME() + ENABLE(NOLIBC)
macro NO_LIBC() {
    NO_RUNTIME()
    ENABLE(NOLIBC)
    DISABLE(MUSL)
}

macro NO_JOIN_SRC() {
    ENABLE(NOJOINSRC)
}

### @usage: NO_SANITIZE()
###
### DISABLE(SANITIZER_TYPE)
macro NO_SANITIZE() {
    DISABLE(SANITIZER_TYPE)
}

macro NO_SANITIZE_COVERAGE() {
    DISABLE(SANITIZE_COVERAGE)
}

macro NO_CLANG_COVERAGE() {
    DISABLE(CLANG_COVERAGE)
}

macro JOINSRC() {
    ENABLE(JOINSRC)
}

LUAJIT_PATH=$ARCADIA_ROOT/contrib/libs/luajit/
macro LUAJIT_OBJDUMP(Src, OUT="") {
   .CMD=${cwd:LUAJIT_PATH} ${tool:"contrib/libs/luajit/compiler"} -b -g ${input:Src} ${output;noauto:OUT} ${kv;hide:"p LJ"} ${kv;hide:"pc light-cyan"}
}

macro MX_BIN_TO_INFO(Src) {
    .CMD=${tool:"tools/mx_bin2info"} ${input:Src} ${output;noext;noauto:Src.info} ${kv;hide:"p MX"} ${kv;hide:"pc yellow"}
}

MX_GEN_TABLE_INCLS=${output_include;hide:"yabs_mx_calc_table.h"} \
${output_include;hide:"kernel/matrixnet/mn_sse.h"} \
${output_include;hide:"library/archive/yarchive.h"} \
${output_include;hide:"util/memory/blob.h"} \
${output_include;hide:"util/generic/hash.h"} \
${output_include;hide:"util/generic/ptr.h"} \
${output_include;hide:"util/generic/singleton.h"}

macro MX_GEN_TABLE(Srcs...) {
   .CMD=$YMAKE_PYTHON ${input:"build/scripts/gen_mx_table.py"} $Srcs ${output;stdout:"mx_tables.cpp"} $MX_GEN_TABLE_INCLS ${kv;hide:"p MX"} ${kv;hide:"pc yellow"}
   PEERDIR(kernel/matrixnet)
   PEERDIR(library/archive)
}

RELEV_FML_CODEGEN_INCLS=${output_include;hide:"kernel/relevfml/relev_fml.h"} ${output_include;hide:"library/sse2neon/sse_adhoc.h"}

### @usage: GENERATE_ENUM_SERIALIZATION(headername.h)
### Build funkciigi input-output of enumeration members defined in the header
### Documentation: https://wiki.yandex-team.ru/yatool/HowToWriteYaMakeFiles/
macro GENERATE_ENUM_SERIALIZATION(File) {
    .CMD=$ENUM_PARSER_TOOL ${input:File} --include-path ${input;rootrel:File} --output ${output;chksum;suf=_serialized.cpp:File} ${output_include;hide:File} ${output_include;hide:"util/generic/serialized_enum.h"} ${kv;hide:"p EN"} ${kv;hide:"pc yellow"}
    PEERDIR(tools/enum_parser/enum_serialization_runtime)
}

macro GENERATE_ENUM_SERIALIZATION_WITH_HEADER(File) {
    .CMD=$ENUM_PARSER_TOOL ${input:File} --include-path ${input;rootrel:File} --output ${output;chksum;suf=_serialized.cpp:File} --header ${output;chksum;suf=_serialized.h:File} ${output_include;hide:File} ${kv;hide:"p EN"} ${kv;hide:"pc yellow"}
    PEERDIR(tools/enum_parser/enum_serialization_runtime)
}

### @usage: DEB_VERSION(File)
###
### Creates a header file DebianVersion.h define th DEBIAN_VERSION taken from the File
macro DEB_VERSION(File) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/mkver.py"} ${input:File} ${output;stdout:"DebianVersion.h"} ${kv;hide:"p CL"} ${kv;hide:"pc yellow"}
}

BUILD_MN_SCRIPT=build/scripts/build_mn.py

### @usage: BUILD_MN([CHECK] [PTR] [MULTI] mninfo mnname)
###
### MatrixNet specific macro
### Alternative macros:
### 1. BUILD_MNS([CHECK] NAME listname mninfos...) - works faster and better for large files
### 2. BUILD_MN_ASM([CHECK] [PTR] [MULTI] mninfo mnname)
macro BUILD_MN(MnInfo, MnName, CHECK?"fml_tool=$FML_UNUSED_TOOL CHECK":"", MULTI?, PTR?, RANKING_SUFFIX="") {
    .CMD=$YMAKE_PYTHON ${input:BUILD_MN_SCRIPT} BuildMnF $ARCADIA_ROOT $ARCH_TOOL ${input:MnInfo} $MnName ranking_suffix=$RANKING_SUFFIX ${output;chksum;pre=mn.:MnName.cpp} ${output;hide;pre=MN_External_;suf=.rodata:MnName} ${output_include;hide:"kernel/matrixnet/mn_sse.h"} $CHECK $MULTI $PTR ${kv;hide:"p MN"} ${kv;hide:"pc yellow"}
}

BUILD_CATBOOST_SCRIPT=build/scripts/build_catboost.py
### @usage: BUILD_CB(cbmodel cbname)
###
### CatBoost specific macro
### cbmodel - CatBoost model file name (*.cmb)
### cbname - name for a variable (of NCatboostCalcer::TCatboostCalcer type) to be available in CPP code
macro BUILD_CATBOOST(CbModel, CbName) {
    .CMD=$YMAKE_PYTHON ${input:BUILD_CATBOOST_SCRIPT} build_cb_f $ARCADIA_ROOT $ARCH_TOOL ${input:CbModel} $CbName ${output;chksum;pre=cb.:CbName.cpp} ${output;hide;pre=CB_External_;suf=.rodata:CbName} ${output_include;hide:"kernel/catboost/catboost_calcer.h"} ${kv;hide:"p CB"} ${kv;hide:"pc yellow"}
}


macro BUILD_MNS_FILE(Input, Name, Output, Suffix, Check, Fml_tool, AsmDataName) {
    .CMD=$YMAKE_PYTHON ${input:BUILD_MN_SCRIPT} BuildMnsFilesF $ARCADIA_ROOT $BINDIR $ARCH_TOOL fml_tool=$Fml_tool $Name ranking_suffix=$Suffix ${input:Input} ${output;hide:Output} ${output;hide;pre=MN_External_;suf=.rodata:AsmDataName} ${output_include;hide:"kernel/matrixnet/mn_sse.h"} ${kv;hide:"p MN"} ${kv;hide:"pc yellow"}
}

MNS_OUTPUT=mnmodels

macro BUILD_MNS_CPP(NAME="", CHECK?, RANKING_SUFFIX="", Files...) {
    .CMD=$YMAKE_PYTHON ${input:BUILD_MN_SCRIPT} BuildMnsCppF $NAME ranking_suffix=$RANKING_SUFFIX ${input:MNS_OUTPUT.h} ${output:MNS_OUTPUT.cpp} ${input:Files} ${output_include;hide:MNS_OUTPUT.h} ${output_include;hide:"kernel/matrixnet/mn_sse.h"} ${kv;hide:"p MN"} ${kv;hide:"pc yellow"}
}

macro BUILD_MNS_HEADER(NAME="", CHECK?, RANKING_SUFFIX="", Files...) {
    .CMD=$YMAKE_PYTHON ${input:BUILD_MN_SCRIPT} BuildMnsHeaderF $NAME ranking_suffix=$RANKING_SUFFIX ${output:MNS_OUTPUT.h} ${input:Files} ${output_include;hide:"kernel/matrixnet/mn_sse.h"} ${output_include;hide:"kernel/matrixnet/mn_multi_categ.h"} ${kv;hide:"p MN"} ${kv;hide:"pc yellow"}
}

# TODO: support foreach_in and keywords simultaneous usage (look at BUILD_MNS_FILES)

### @usage: BUILD_MNS([CHECK] NAME listname mninfos...)
###
### MatrixNet specific macro. Faster version of BUILD_MN([CHECK] [PTR] [MULTI] mninfo mnname) for large files
macro BUILD_MNS(Files...) {
    BUILD_MNS_HEADER($Files)
    BUILD_MNS_CPP($Files)
    BUILD_MNS_FILES($Files)
}

### Commits to the project marked with this macro will be blocked by pre-commit check and then will be
### automatically merged to trunk only if there is no new broken build targets in check results.
### The use of this macro is disabled by default.
macro NEED_CHECK(Flags...) {
    # TODO: FIXME
    ENABLE(UNUSED_MACRO)
}

### Mark the project as needing review.
### Reviewers are listed in the macro OWNER. The use of this macro is disabled by default.
### Details can be found here: https://clubs.at.yandex-team.ru/arcadia/6104
macro NEED_REVIEW(Flags...) {
    # TODO: FIXME
    ENABLE(UNUSED_MACRO)
}

### @usage: LICENSE(licenses...)
###
### Specify the license of the module, separated by spaces
###
### A license must be prescribed for contribs
macro LICENSE(Flags...) {
    SET(LICENSE_NAMES $Flags)
}

### To check the license of the dependencies, indicated by macro LICENSE, and fail the build in case of detection of GPL-like licenses.
### Do not use with LIBRARY().
### Issues a warning if the detected dependencies from contrib-ov in which the license is not specified.
macro NO_GPL() {
    SET(NO_GPL yes)
}

macro VERSION(Flags...) {
    ENABLE(UNUSED_MACRO)
}

macro BUILD_PLNS(Src...) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/build_pln_header.py"} ${output:"plnmodels.h"} ${input:Src} $RELEV_FML_CODEGEN_INCLS ${kv;hide:"p PN"} ${kv;hide:"pc yellow"}
    .PEERDIR=kernel/relevfml library/sse2neon
}

DATAWORK_SCHEEME_EXPORT_FLAGS=

when ($UNIX == "yes") {
    SCHEEME2_CFLAGS= -E -x c++
}

when ($WIN32 == "yes") {
    SCHEEME2_CFLAGS= /E /TP
}

SCHEEME2_STRUCT_INFO_FLAGS=-f "const static ui32 RecordSig" -u "RecordSig" --gcc44_no_typename --no_complex_overloaded_func_export
### @usage: GEN_SCHEEME2(scheeme_name from_file dependent_files...)
###
### Generates a C++ description for structure(contains the field RecordSig) in the specified file (and connected).
###
### 1. ${scheeme_name}.inc - the name of the generated file.
### 2. Use an environment variable - DATAWORK_SCHEEME_EXPORT_FLAGS that allows to specify flags to tools/structparser
###
### @example:
### SET(DATAWORK_SCHEEME_EXPORT_FLAGS --final_only -m "::")
### all options are passed to structparser (in this example --final_only - do not export heirs with public base that contains the required field,,- m "::" only from the root namespace)
### sets in extra option
###
### @example:
### SET(EXTRACT_STRUCT_INFO_FLAGS -f \"const static ui32 RecordSig\" -u \"RecordSig\" -n${scheeme_name}SchemeInfo ----gcc44_no_typename no_complex_overloaded_func_export ${DATAWORK_SCHEEME_EXPORT_FLAGS})
### for compatibility with C++ compiler and the external environment.
### (the details necessary to look in tools/structparser)
macro GEN_SCHEEME2(ScheemeName, FromFile) {
    .CMD=$GCCFILTER $CXX_COMPILER -c ${tmp;stdout:FromFile.cph} $SCHEEME2_CFLAGS ${input:FromFile} ${pre=-I:INCLUDE} $CXXFLAGS -Wno-error && ${tool:"tools/structparser"} -o ${output:ScheemeName.inc} -n N${ScheemeName}SchemeInfo $SCHEEME2_STRUCT_INFO_FLAGS $DATAWORK_SCHEEME_EXPORT_FLAGS ${tmp:FromFile.cph} ${output;stdout;noauto:ScheemeName.inc.log} ${kv;hide:"p SH"} ${kv;hide:"pc yellow"}
}

### @usage SYMLINK(from to)
### Add symlink
macro SYMLINK(From, To) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/symlink.py"} ${input;dirallowed:From} ${output;noauto:To} ${kv;hide:"p LN"} ${kv;hide:"pc light-cyan"}
}

macro SCRIPT(Tool, ScriptPath, IN{input}[], OUT{output}[], OUT_NOAUTO{output}[], TOOL{tool}[], OUTPUT_INCLUDES[], IN_DEPS[], STDOUT="", CWD="", Args...) {
    .CMD=${cwd:CWD} ${tool:Tool} ${input:ScriptPath} $Args ${input;hide:IN} ${input;hide:IN_DEPS} ${output_include;hide:OUTPUT_INCLUDES} ${tool;hide:TOOL} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${output;stdout:STDOUT} ${kv;hide:"p SC"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"}
}

### @usage: LUA(script_path args...
### [CWD working_directory] [TOOL tools...]
### [IN inputs...]
### [OUTPUT_INCLUDES output_includes...]
### ( (OUT[_NOAUTO] outputs...) | (Output STDOUT) ) )
###
### Execute the lua script.
### Similar parameters in macros, PYTHON, BUILTIN_PYTHON, RUN_PROGRAM, LUA
###
### Characteristic:
### 1. script_path is the path to the script (absolute or relative)
### 2. args... - Script arguments, some of them will be modified under the action keyword - TOOL / IN / OUT / STDOUT
### 3. IN inputs... Input file.
### 4. inputs... path to your input files (absolute or relative). If the path is relative, then IN keyword modifies the args... replacing relative path absolute.
### (The scope of IN - to following keywords)
### 5. OUTPUT_INCLUDES output_includes... - Include for the output files. Used to specify the build system what include will have a generated file.
### (Scope OUTPUT_INCLUDES - up to the following keywords)
### 6. OUT outputs... - Output file. outputs... - path to output file (absolute or relative).
### If the path is relative, then the OUT keyword modifies the args... replacing relative path absolute.
### (The scope OUT to the following keywords)
### The files OUT are added to the build process.
### To avoid this, you must use OUT_NOAUTO .
### 7. STDOUT output Redirection the standard output stream.
### Is replaced with "> output_abs_path" where output_abs_path the absolute path to the output y.
### (Scope STDOUT - the following argument)
### 8. CWD working_directory - Change the working directory. working_directory is the absolute path of the working directory
### (Scope CWD - next argument)
### 9. TOOL tools... - tool-s. tools... - absolute or relative path to the tool directories-s.
### Modify args... substituting the appropriate path on the way to the assembled binary.
### (The scope TOOL to the following keywords)
macro LUA(ScriptPath, IN{input}[], OUT{output}[], OUT_NOAUTO{output}[], TOOL{tool}[], OUTPUT_INCLUDES[], IN_DEPS[], STDOUT="", CWD="", Args...) {
    .CMD=${cwd:CWD} $LUA_TOOL ${input:ScriptPath} $Args ${input;hide:IN} ${input;hide:IN_DEPS} ${output_include;hide:OUTPUT_INCLUDES} ${tool;hide:TOOL} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${output;stdout:STDOUT} ${kv;hide:"p LU"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"}
}

### @usage: PYTHON(script_path args...
### [CWD working_directory] [TOOL tools...]
### [IN inputs...]
### [OUTPUT_INCLUDES output_includes...]
### ( (OUT[_NOAUTO] outputs...) | (Output STDOUT) ) )
###
### Run python script. As the Python interpreter used by contrib/tools/python .
### Similar parameters in macros, PYTHON, RUN_PROGRAM, LUA
###
### Characteristic:
### 1. script_path is the path to the script (absolute or relative)
### 2. args... - Script arguments, some of them will be modified under the action keyword - TOOL / IN / OUT / STDOUT
### 3. IN inputs... Input file.
### 4. inputs... path to your input files (absolute or relative). If the path is relative, then IN keyword modifies the args... replacing relative path absolute.
### (The scope of IN - to following keywords)
### 5. OUTPUT_INCLUDES output_includes... - Include for the output files. Used to specify the build system what include will have a generated file.
### (Scope OUTPUT_INCLUDES - up to the following keywords)
### 6. OUT outputs... - Output file.  outputs... - path to output file (absolute or relative).
### If the path is relative, then the OUT keyword modifies the args... replacing relative path absolute.
### (The scope OUT to the following keywords)
### The files OUT are added to the build process.
### To avoid this, you must use OUT_NOAUTO .
### 7. STDOUT output Redirection the standard output stream.
### Is replaced with "> output_abs_path" where output_abs_path the absolute path to the output y.
### (Scope STDOUT - the following argument)
### 8. CWD working_directory - Change the working directory. working_directory is the absolute path of the working directory
### (Scope CWD - next argument)
### 9. TOOL tools... - tool-s.  tools... - absolute or relative path to the tool directories-s.
### Modify args... substituting the appropriate path on the way to the assembled binary.
### (The scope TOOL to the following keywords)
macro PYTHON(ScriptPath, IN{input}[], OUT{output}[], OUT_NOAUTO{output}[], TOOL{tool}[], OUTPUT_INCLUDES[], IN_DEPS[], STDOUT="", CWD="", Args...) {
    .CMD=${cwd:CWD} $PYTHON_BS_TOOL ${input:ScriptPath} $Args ${input;hide:IN} ${input;hide:IN_DEPS} ${output_include;hide:OUTPUT_INCLUDES} ${tool;hide:TOOL} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${output;stdout:STDOUT} ${kv;hide:"p PY"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"}
}

### @usage: BUILTIN_PYTHON(script_path args...
### [CWD working_directory] [TOOL tools...]
### [IN inputs...]
### [OUTPUT_INCLUDES output_includes...]
### ( (OUT[_NOAUTO] outputs...) | (Output STDOUT) ) )
###
### Similar parameters in macros, PYTHON, LUA, BUILTIN_PYTHON, RUN_PROGRAM
### Run python script. Unlike PYTHON used python skompilowany to ymake.
###
### Characteristic:
### 1. script_path is the path to the script (absolute or relative)
### 2. args... - Script arguments, some of them will be modified under the action keyword - TOOL / IN / OUT / STDOUT
### 3. IN inputs... Input file.
### 4. inputs... path to your input files (absolute or relative). If the path is relative, then IN keyword modifies the args... replacing relative path absolute.
### (The scope of IN - to following keywords)
### 5. OUTPUT_INCLUDES output_includes... - Include for the output files. Used to specify the build system what include will have a generated file.
### (Scope OUTPUT_INCLUDES - up to the following keywords)
### 6. OUT outputs... - Output file.  outputs... - path to output file (absolute or relative).
### If the path is relative, then the OUT keyword modifies the args... replacing relative path absolute.
### (The scope OUT to the following keywords)
### The files OUT are added to the build process.
### To avoid this, you must use OUT_NOAUTO .
### 7. STDOUT output Redirection the standard output stream.
### Is replaced with "> output_abs_path" where output_abs_path the absolute path to the output y.
### (Scope STDOUT - the following argument)
### 8. CWD working_directory - Change the working directory. working_directory is the absolute path of the working directory
### (Scope CWD - next argument)
### 9. TOOL tools... - tool-s.  tools... - absolute or relative path to the tool directories-s.
### Modify args... substituting the appropriate path on the way to the assembled binary.
### (The scope TOOL to the following keywords)
macro BUILTIN_PYTHON(ScriptPath, IN{input}[], OUT{output}[], OUT_NOAUTO{output}[], TOOL{tool}[], OUTPUT_INCLUDES[], IN_DEPS[], STDOUT="", CWD="", Args...) {
    .CMD=${cwd:CWD} $YMAKE_PYTHON ${input:ScriptPath} $Args ${input;hide:IN} ${input;hide:IN_DEPS} ${output_include;hide:OUTPUT_INCLUDES} ${tool;hide:TOOL} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${output;stdout:STDOUT} ${kv;hide:"p PY"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"}
}

### @usage: FROM_SANDBOX([FILE] resource_id is OUT_[NOAUTO] <files from resource>)
### Downloads the file from the sandbox to the resource number, unpacks (if not explicitly specified word FILE) and adds the files with the specified names in the build.
### If the files do not compile, then you need to use the parameter OUT_NOAUTO.
### Specify the directory, as it build models - input and output data for the node assemblies must be determined.
macro SETUP_FROM_SANDBOX(Id, OUT{output}[], OUT_NOAUTO{output}[], OUTPUT_INCLUDES[], FILE?"--copy-to-dir":"--untar-to", Args...) {
    .CMD=${cwd:BINDIR} $YMAKE_PYTHON ${input:"build/scripts/fetch_from_sandbox.py"} --resource-id $Id $FILE . $OUT $OUT_NOAUTO $OUTPUT_INCLUDES ${input;hide:"build/scripts/fetch_from.py"} ${output_include;hide:OUTPUT_INCLUDES} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${requirements;hide:"network:full"} ${kv;hide:"p SB"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"}
}

macro SETUP_FROM_MDS(Key, OUT{output}[], OUT_NOAUTO{output}[], OUTPUT_INCLUDES[], FILE?"--copy-to-dir":"--untar-to", Args...) {
    .CMD=${cwd:BINDIR} $YMAKE_PYTHON ${input:"build/scripts/fetch_from_mds.py"} --key $Key $FILE . $OUT $OUT_NOAUTO $OUTPUT_INCLUDES ${input;hide:"build/scripts/fetch_from.py"} ${output_include;hide:OUTPUT_INCLUDES} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${requirements;hide:"network:full"} ${kv;hide:"p MD"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"}
}

macro _RUN_JAVA(IN{input}[], OUT{output}[], OUT_NOAUTO{output}[], OUTPUT_INCLUDES[], TOOL[], STDOUT="", CWD="", HIDE_OUTPUT?"stderr2stdout":"stdout2stderr", Args...) {
    PEERDIR(contrib/libs/platform/java/jdk)
    .CMD=${cwd:CWD} $YMAKE_PYTHON ${input;pre=build/scripts/:HIDE_OUTPUT.py} $JDK_RESOURCE/bin/java $Args ${tool;hide:TOOL} ${input;hide:IN} ${output_include;hide:OUTPUT_INCLUDES} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${output;stdout:STDOUT} ${kv;hide:"p JV"} ${kv;hide:"pc light-blue"} ${kv;hide:"show_out"}
}

### @usage: RUN_PROGRAM(tool_path args...
### [CWD working_directory] [TOOL tools...]
### [IN inputs...]
### [OUTPUT_INCLUDES output_includes...]
### ( (OUT[_NOAUTO] outputs...) | (Output STDOUT) ) )
###
### To build and run Tulsa (program). tool_path - the path to the directory tools.
### Similar parameters in macros, PYTHON, LUA, BUILTIN_PYTHON, RUN_PROGRAM
###
### Characteristic:
### 1. script_path is the path to the script (absolute or relative)
### 2. args... - Script arguments, some of them will be modified under the action keyword - TOOL / IN / OUT / STDOUT
### 3. IN inputs... Input file.
### 4. inputs... path to your input files (absolute or relative). If the path is relative, then IN keyword modifies the args... replacing relative path absolute.
### (The scope of IN - to following keywords)
### 5. OUTPUT_INCLUDES output_includes... - Include for the output files. Used to specify the build system what include will have a generated file.
### (Scope OUTPUT_INCLUDES - up to the following keywords)
### 6. OUT outputs... - Output file.  outputs... - path to output file (absolute or relative).
### If the path is relative, then the OUT keyword modifies the args... replacing relative path absolute.
### (The scope OUT to the following keywords)
### The files OUT are added to the build process.
### To avoid this, you must use OUT_NOAUTO .
### 7. STDOUT output Redirection the standard output stream.
### Is replaced with "> output_abs_path" where output_abs_path the absolute path to the output y.
### (Scope STDOUT - the following argument)
### 8. CWD working_directory - Change the working directory. working_directory is the absolute path of the working directory
### (Scope CWD - next argument)
### 9. TOOL tools... - tool-s.  tools... - absolute or relative path to the tool directories-s.
### Modify args... substituting the appropriate path on the way to the assembled binary.
### (The scope TOOL to the following keywords)
macro RUN_PROGRAM(Tool, IN{input}[], OUT{output}[], OUT_NOAUTO{output}[], TOOL{tool}[], OUTPUT_INCLUDES[], IN_DEPS[], STDOUT="", CWD="", Args...) {
    .CMD=${cwd:CWD} ${tool:Tool} $Args ${input;hide:IN} ${input;hide:IN_DEPS} ${output_include;hide:OUTPUT_INCLUDES} ${tool;hide:TOOL} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${output;stdout:STDOUT} ${kv;hide:"p PR"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"}
}

C_AS_CXX_FLAGS=-x c++ -std=c++14

macro COMPILE_C_AS_CXX() {
    SET(EXTRA_C_FLAGS $C_AS_CXX_FLAGS)
}

macro NO_DEBUG_INFO() {
    SET(NO_DEBUGINFO yes)
}

macro IMPORT_YMAPS_PROTO() {
     YMAPS_PROTO_ROOT=maps/doc/proto
     YMAPS_PROTOC_INCLUDE=-I=$ARCADIA_ROOT/$YMAPS_PROTO_ROOT
     SET_APPEND(PROTO_PATH $YMAPS_PROTOC_INCLUDE)
     ADDINCL($YMAPS_PROTO_ROOT)
     ADDINCL(GLOBAL ${ARCADIA_BUILD_ROOT}/$YMAPS_PROTO_ROOT)
}

macro EXPORT_YMAPS_PROTO() {
    SET(PROTO_NAMESPACE maps/doc/proto)
    IMPORT_YMAPS_PROTO()
}

macro YMAPS_GENERATE_SPROTO_HEADER(File) {
    .CMD=${cwd;rootdir;input:File} ${tool:"maps/libs/sproto/sprotoc"} -I=./$PROTO_NAMESPACE -I=$ARCADIA_ROOT/$PROTO_NAMESPACE -I=$ARCADIA_BUILD_ROOT -I=$PROTO_PATH --sproto_out=$ARCADIA_BUILD_ROOT/$PROTO_NAMESPACE ${input;rootrel:File} ${output;hide;norel;noext:File.sproto.h} ${kv;hide:"p PB"} ${kv;hide:"pc yellow"}
    .PEERDIR=maps/libs/sproto
}

macro YMAPS_SPROTO(FILES...) {
    SET(PROTO_HEADER_EXTS .pb.h .sproto.h)
    foreach (FILE : $FILES) {
        [.proto]=$YMAPS_GENERATE_SPROTO_HEADER($FILE)
    }
}

macro CTEMPLATE_VARNAMES(File) {
    .CMD=${tool:"contrib/libs/ctemplate/make_tpl_varnames_h"} -f ${output;addincl;noallext:File.varnames.h} ${input:File}
}

LLVM_OPTS=
CLANG_ROOT=$CLANG5_RESOURCE_GLOBAL

macro CLANG_EMIT_AST_CXX(Input, Output, Opts...) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/clang_wrapper.py"} $WINDOWS $GCCFILTER $CLANG_ROOT/bin/clang++ ${pre=-I:INCLUDE} $CXXFLAGS -Wno-unknown-warning-option $LLVM_OPTS -emit-ast -c ${input:Input} -o ${output;noauto:Output} $Opts ${kv;hide:"p ST"} ${kv;hide:"pc light-green"}
    PEERDIR(contrib/libs/clang)
}

### @usage: GENERATED_SRCS(srcs... PARSE_META_FROM cpp_srcs... [OUTPUT_INCLUDES output_includes...])
###
### srcs... - list of text files which will be generated during build time by templates. Each template must be
###     placed to the place in source tree where corresponding source file should be generated. Name of
###     template must be "<name_of_src_file>.template". For example if you want to generate file "example.cpp"
###     then template should be named "example.cpp.template".
### PARSE_META_FROM cpp_srcs... - list of C++ source files (.cpp, .h) which will be parsed using clang library
###     and metainformation extracted from the files will be made available for templates. Example of
###     template code fragment using metainformation: {{ meta.objects["@N@std@S@string"].name }}
### OUTPUT_INCLUDES output_includes... - in cases when build system parser fails to determine all headers
###     which generated files include, you can specify additional headers here. In a normal situation this should
###     not be needed and this feature could be removed in the future.
###
### Jinja 2 template engine is used for template generation.
### Examples of templates can be found in directory market/tools/code_generator/templates.
### Metainformation does not contain entries for every object declared in C++ files specified in PARSE_META_FROM
### parameter. To include some object into consideration you need to mark it by attribute. Attributes can
### automatically add more attributes to dependent objects. This behavior depends on attribute definition.
###
### More information will be available (eventually:) here: https://wiki.yandex-team.ru/Users/denisk/codegenerator/
macro GENERATED_SRCS(PARSE_META_FROM{input}[], OUTPUT_INCLUDES[], TEMPLATES...) {
    .CMD=${tool:"market/tools/code_generator"} --cpp-file ${input:PARSE_META_FROM} --templates-dir / ${ARCADIA_ROOT} --templates ${input:TEMPLATES.template} --generated-files ${output:TEMPLATES} ${output_include;hide:OUTPUT_INCLUDES} ${output_include;hide:PARSE_META_FROM} --arcadia-root ${ARCADIA_ROOT} --arcadia-build-root ${ARCADIA_BUILD_ROOT} --clang-root $CLANG_ROOT -- $C_FLAGS_PLATFORM $CXXFLAGS ${pre=-I:INCLUDE} -std=c++17 -Wno-unknown-warning-option -Wno-unused-parameter -Wno-undefined-inline -Wno-undefined-internal -Wno-unused-function $LLVM_OPTS
    PEERDIR(contrib/libs/clang)
}

macro LLVM_COMPILE_CXX(Input, Output, Opts...) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/clang_wrapper.py"} $WINDOWS $GCCFILTER $CLANG_ROOT/bin/clang++ ${pre=-I:INCLUDE} $CXXFLAGS $C_FLAGS_PLATFORM -Wno-unknown-warning-option $LLVM_OPTS -emit-llvm -c ${input:Input} -o ${output;noauto:Output} $Opts ${kv;hide:"p BC"} ${kv;hide:"pc light-green"}
    PEERDIR(contrib/libs/clang)
}

macro LLVM_COMPILE_C(Input, Output, Opts...) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/clang_wrapper.py"} $WINDOWS $GCCFILTER $CLANG_ROOT/bin/clang ${pre=-I:INCLUDE} $CFLAGS $C_FLAGS_PLATFORM $LLVM_OPTS -emit-llvm -c ${input:Input} -o ${output;noauto:Output} $Opts ${kv;hide:"p BC"} ${kv;hide:"pc light-green"}
    PEERDIR(contrib/libs/clang)
}

macro LLVM_COMPILE_LL(Input, Output, Opts...) {
    .CMD=$CLANG_ROOT/bin/llvm-as ${input:Input} -o ${output;noauto:Output} ${kv;hide:"p BC"} ${kv;hide:"pc light-green"}
    PEERDIR(contrib/libs/clang)
}

macro LLVM_LINK(Output, Inputs...) {
    .CMD=$CLANG_ROOT/bin/llvm-link ${input:Inputs} -o ${output;noauto:Output} ${kv;hide:"p LD"} ${kv;hide:"pc light-red"}
    PEERDIR(contrib/libs/clang)
}

macro LLVM_OPT(Input, Output, Opts...) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/llvm_opt_wrapper.py"} $CLANG_ROOT/bin/opt ${input:Input} -o ${output;noauto:Output} $Opts ${kv;hide:"p OP"} ${kv;hide:"pc yellow"}
    PEERDIR(contrib/libs/clang)
}

when ($NO_DEBUGINFO == "yes") {
    DEBUG_INFO_FLAGS=
}

when ($CLANG && $DEBUGINFO_LINES_ONLY == "yes" && $NO_DEBUGINFO != "yes") {
    DEBUG_INFO_FLAGS=-gline-tables-only
}

# TODO: configurable tar and touch
PACK_TGZ=${cwd:ARCADIA_BUILD_ROOT} tar -czf ${rootrel:OUTPUT} ${rootrel:INPUT} ${kv;hide:"p AR"} ${kv;hide:"pc light-red"}
#TODO: Use ${input:"build/scripts/touch.py"} instead ${ARCADIA_ROOT}/build/scripts/touch.py
macro TOUCH(Outputs...) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/touch.py"} ${output:Outputs}
}
TOUCH_UNIT=$YMAKE_PYTHON ${input:"build/scripts/touch.py"} ${kv;hide:"p UN"} ${kv;hide:"pc light-cyan"} $TARGET
TOUCH_PACKAGE=$YMAKE_PYTHON ${input:"build/scripts/touch.py"} ${kv;hide:"p PK"} ${kv;hide:"pc light-red"} $TARGET && $YMAKE_PYTHON ${input:"build/scripts/copy_to_dir.py"} --dest-dir $BINDIR --build-root $ARCADIA_BUILD_ROOT $PACKED_PACKAGE_ARGS $SRCS_GLOBAL $PEERS
TOUCH_PACKAGE_MF=$GENERATE_MF && $TOUCH_PACKAGE
TOUCH_JAVA_UNIT=$YMAKE_PYTHON ${input:"build/scripts/touch.py"} ${kv;hide:"java $CURDIR"} $TARGET

NO_CHECK_IMPORTS_FOR_VALUE=None
when ($SANITIZER_TYPE && $SANITIZER_TYPE == "pg") {
    NO_CHECK_IMPORTS_FOR_VALUE=""
}

### @usage: NO_CHECK_IMPORTS([patterns])
###
### Do not run checks on imports of Python modules.
### Optional parameter mask patterns describes the names of the modules that do not need to check.
macro NO_CHECK_IMPORTS(Masks...) {
    SET(NO_CHECK_IMPORTS_FOR_VALUE $Masks)
}

macro PY_CODENAV(For) {
    .CMD=${cwd:BINDIR} $YMAKE_PYTHON ${input:"build/scripts/py_codenav.py"} --tool ${tool:"devtools/codenav/python/pyxref"} --out ${output:For.xref} --binary ${tool:For} ${kv;hide:"p CN"} ${kv;hide:"pc yellow"}
}

YASM_FLAGS=
when ($ASM_PREFIX) {
    ASM_PREFIX_VALUE=--prefix=$ASM_PREFIX
}
otherwise {
    ASM_PREFIX_VALUE=
}
YASM_PREINCLUDES_VALUE=
PREINCLUDES_KEY=
when ($YASM_PREINCLUDES_VALUE) {
    PREINCLUDES_KEY=PREINCLUDES
}
macro _SRC_yasm(SRC, SRCFLAGS...) {
    .CMD=$_SRC_yasm_impl($SRC $SRCFLAGS $PREINCLUDES_KEY $YASM_PREINCLUDES_VALUE)
}
macro ASM_PREINCLUDE(PREINCLUDES...) {
    SET_APPEND(YASM_PREINCLUDES_VALUE $PREINCLUDES)
}

macro RUN_PYTHON(Args...) {
    SETUP_RUN_PYTHON()
    RUN(${PYTHON_BIN} $Args)
}

MAPKIT_IDL_INCLUDES=
macro MAPKIT_ADDINCL(Dirs...) {
    ADDINCL($Dirs)
    SET_APPEND(MAPKIT_IDL_INCLUDES $Dirs)
}

### @usage: EXPORT_MAPKIT_PROTO()
### This macro is a temporary one and should be changed to EXPORT_YMAPS_PROTO
### when transition of mapsmobi to arcadia is finished
macro EXPORT_MAPKIT_PROTO() {
    __proto_root=maps/mapsmobi/external/proto
    SET(PROTO_NAMESPACE $__proto_root)
    ADDINCL(${__proto_root} GLOBAL ${ARCADIA_BUILD_ROOT}/${__proto_root})
}

START_WHOLE_ARCHIVE=
END_WHOLE_ARCHIVE=
when ($MAPKIT_WHOLE_ARCHIVE == "yes") {
    START_WHOLE_ARCHIVE=$START_WHOLE_ARCHIVE_VALUE
    END_WHOLE_ARCHIVE=$END_WHOLE_ARCHIVE_VALUE
}

### @usage: MAPKIT_ENABLE_WHOLE_ARCHIVE()
### This macro is a temporary one. Its use is allowed in maps/mapsmobi dir only.
macro MAPKIT_ENABLE_WHOLE_ARCHIVE() {
    ENABLE(MAPKIT_WHOLE_ARCHIVE)
}

ANDROID_SDK_ROOT=${ANDROID_SDK_RESOURCE_GLOBAL}/android_sdk

GLYCINE_FLAG=no
module GLYCINE: PY_LIBRARY {
    .ALIASES=SRCS=PY_SRCS
    NO_LINT()
    GLYCINE_FLAG=yes
}

macro PY_GLY_REG(Iface, Entry) {
    .CMD=${tool:"glycine/gen"} --register $Iface --entry $Entry --output ${noext;noauto;output:Iface.reg.cpp} ${kv;hide:"pc yellow"}
    PEERDIR(glycine/gen/runtime)
    SRCS(GLOBAL $Iface.reg.cpp)
}

### Definition of the project - proto library. More detailed documentation here.
### https://wiki.yandex-team.ru/yatool/proto_library/
multimodule PROTO_LIBRARY {
    module CPP_PROTO : LIBRARY {
        SET(PEERDIR_TAGS CPP_PROTO)
    }

    module JAVA_PROTO: _JAVA_LIBRARY {
        .EXTS=.jsrc
        .ALLOWED=GRPC
        SET(PEERDIR_TAGS JAVA_PROTO)
        PEERDIR($JAVA_PROTOBUF)
        PEERDIR(contrib/java/javax/annotation/javax.annotation-api/1.3.1)
        when ($GRPC_FLAG == "yes") {
            PEERDIR+=$JAVA_GRPC_STUB $JAVA_GRPC_PROTOBUF
        }
        .IGNORED=GENERATE_ENUM_SERIALIZATION GENERATE_ENUM_SERIALIZATION_WITH_HEADER
    }

    module PY_PROTO: PY_LIBRARY {
        .ALIASES=SRCS=PY_SRCS
        SET(PEERDIR_TAGS PY2 PY_PROTO)
        NO_LINT()
    }

    module PY3_PROTO: PY3_LIBRARY {
        .ALIASES=SRCS=PY3_SRCS
        SET(PEERDIR_TAGS PY3 PY3_PROTO)
        when ($MSVC == "yes" || $CYGWIN == "yes") {
            MODULE_PREFIX=py3
        }
        otherwise {
             MODULE_PREFIX=libpy3
        }
        NO_LINT()
    }
}

GO_HOST_OS=unknown
when ($HOST_OS_LINUX && $HOST_ARCH_X86_64) {
    GO_HOST_OS=linux
}
elsewhen ($HOST_OS_DARWIN && $HOST_ARCH_X86_64) {
    GO_HOST_OS=darwin
}
elsewhen($HOST_OS_WINDOWS && $HOST_ARCH_X86_64) {
    GO_HOST_OS=windows
}

GO_HOST_ARCH=unknown
when ($HOST_ARCH_X86_64) {
    GO_HOST_ARCH=amd64
}

GO_TOOLS_ROOT_UNQUOTED=${GO_TOOLS_RESOURCE_GLOBAL}
GO_TOOLS_ROOT=${quo:GO_TOOLS_ROOT_UNQUOTED}
GO_TEST_MINER=${ARCADIA_BUILD_ROOT}/tools/go_test_miner/go_test_miner ${tool;hide:"tools/go_test_miner"}

macro GO_COMPILE_CGO1(NAME, FLAGS[], FILES...) {
    .CMD=${GO_TOOLS_ROOT}/pkg/tool/${GO_HOST_OS}_${GO_HOST_ARCH}/cgo -objdir $BINDIR -importpath $NAME $FLAGS -- ${CGO_CFLAGS_VALUE} ${input:FILES} ${output;hide:"_cgo_export.h"} ${output;hide:"_cgo_export.c"} ${output;hide:"_cgo_gotypes.go"} ${output;noauto;hide:"_cgo_main.c"} ${output;hide;rootrel;noext:FILES.cgo1.go} ${output;hide;rootrel;noext:FILES.cgo2.c} ${output;noauto;hide:"_cgo_flags"} $GO_TOOLCHAIN_ENV ${kv;hide:"p go"} ${kv;hide:"pc light-blue"} ${kv;hide:"show_out"}
}

macro GO_COMPILE_CGO2(NAME, C_FILES[], S_FILES[], FILES...) {
    .CMD=$GCCFILTER $C_COMPILER $C_FLAGS_PLATFORM ${input;tobindir:"_cgo_main.c"} -c -o ${tmp;noauto;suf=${OBJECT_SUF}:"_cgo_main.c"} && $GCCFILTER $C_COMPILER $C_FLAGS_PLATFORM -o ${tmp;noauto;suf=${OBJECT_SUF}:"_cgo_"} ${input;hide:"_cgo_export.h"} ${tmp;noauto;suf=${OBJECT_SUF}:"_cgo_main.c"} ${input;suf=${OBJECT_SUF}:"_cgo_export.c"} ${input;noext;suf=${OBJECT_SUF}:FILES.cgo2.c} ${input;suf=${OBJECT_SUF}:C_FILES} ${input;suf=.o:S_FILES} $CGO_LDFLAGS_VALUE && ${GO_TOOLS_ROOT}/pkg/tool/${GO_HOST_OS}_${GO_HOST_ARCH}/cgo -dynpackage $NAME -dynimport ${tmp;noauto;suf=${OBJECT_SUF}:"_cgo_"} -dynout ${output:"_cgo_import.go"} -dynlinker $GO_TOOLCHAIN_ENV ${kv;hide:"p go"} ${kv;hide:"pc light-blue"} ${kv;hide:"show_out"}
}

macro GO_LINK_LIB_IMPL(GO_FILES...) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/go_tool.py"} ++mode lib ++build-root $ARCADIA_BUILD_ROOT ++output-root $BINDIR ++tools-root ${GO_TOOLS_ROOT} ++host-os ${GO_HOST_OS} ++host-arch ${GO_HOST_ARCH} ++output $TARGET ++peers ${rootrel:PEERS_LOCAL} ++srcs $AUTO_INPUT ${input:GO_FILES} $GO_TOOLCHAIN_ENV ${kv;hide:"p GO"} ${kv;hide:"pc light-red"} ${kv;hide:"show_out"}
}

macro GO_LINK_EXE_IMPL(GO_FILES...) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/go_tool.py"} ++mode exe ++build-root $ARCADIA_BUILD_ROOT ++output-root $BINDIR ++tools-root ${GO_TOOLS_ROOT} ++host-os ${GO_HOST_OS} ++host-arch ${GO_HOST_ARCH} ++output $TARGET ++peers ${rootrel:PEERS} ++srcs $AUTO_INPUT $GO_TOOLCHAIN_ENV ${input:GO_FILES} ${kv;hide:"p GO"} ${kv;hide:"pc light-red"} ${kv;hide:"show_out"}
}

macro GO_LINK_TEST_IMPL(GO_FILES...) {
    .CMD=$YMAKE_PYTHON ${input:"build/scripts/go_tool.py"} ++mode test ++test-miner $GO_TEST_MINER ++test-import-path $GO_TEST_PACKAGE_VALUE ++build-root $ARCADIA_BUILD_ROOT ++output-root $BINDIR ++tools-root ${GO_TOOLS_ROOT} ++host-os ${GO_HOST_OS} ++host-arch ${GO_HOST_ARCH} ++output $TARGET ++peers ${rootrel:PEERS} ++srcs $AUTO_INPUT $GO_TOOLCHAIN_ENV ${input:GO_FILES} ++xtest_srcs ${input:GO_XTEST_SRCS_VALUE} ${kv;hide:"p GO"} ${kv;hide:"pc light-red"} ${kv;hide:"show_out"}
}

GO_LINK_LIB=$GO_LINK_LIB_IMPL($GO_FILES_VALUE)
GO_LINK_EXE=$GO_LINK_EXE_IMPL($GO_FILES_VALUE)
GO_LINK_TEST=$GO_LINK_TEST_IMPL($GO_FILES_VALUE)

GO_FILES_VALUE=
macro GO_SRCS(FILES...) {
    SET_APPEND(GO_FILES_VALUE $FILES)
}

CGO_FILES_VALUE=
macro CGO_SRCS(FILES...) {
    SET_APPEND(CGO_FILES_VALUE $FILES)
}

GO_LDFLAGS_GLOBAL=
macro GO_LDFLAGS(FLAGS...) {
    SET_APPEND(GO_LDFLAGS_GLOBAL $FLAGS)
}

CGO_CFLAGS_VALUE=
macro CGO_CFLAGS(FLAGS...) {
    SET_APPEND(CGO_CFLAGS_VALUE $FLAGS)
}

CGO_LDFLAGS_VALUE=
macro CGO_LDFLAGS(FLAGS...) {
    SET_APPEND(CGO_LDFLAGS_VALUE $FLAGS)
}


GO_TOOLCHAIN_ENV=$TOOLCHAIN_ENV

module GO_BASE_UNIT {
    .EXTS=.*
    .CMD=TOUCH_UNIT
    .NODE_TYPE=Bundle
    .PEERDIR_POLICY=as_build_from
    .ALIASES=SRCS=GO_SRCS

    DEFAULT(ALLOCATOR $DEFAULT_ALLOCATOR)

    PEERDIR(build/external_resources/go_tools)

    when ($COMPILER_PLATFORM && $NEED_PLATFORM_PEERDIRS == "yes") {
        PEERDIR+=$COMPILER_PLATFORM
    }

    GO_TOOLCHAIN_ENV += ${env:"GOARCH=amd64"}

    when ($OS_DARWIN) {
        GO_TOOLCHAIN_ENV += ${env:"GOOS=darwin"}
    }
    elsewhen ($OS_LINUX) {
        GO_TOOLCHAIN_ENV += ${env:"GOOS=linux"}
    }
    elsewhen ($OS_WINDOWS) {
        GO_TOOLCHAIN_ENV += ${env:"GOOS=windows"}
    }

    _GO_PROCESS_SRCS()
}

module GO_LIBRARY: GO_BASE_UNIT {
    .CMD=GO_LINK_LIB
    .NODE_TYPE=Bundle
    .EXTS=.go .o .obj .a .mf
    .GLOBAL=GO_LDFLAGS
    SET(MODULE_TYPE LIBRARY)

    MODULE_SUFFIX=.a

    when ($HOST_OS_DARWIN) {
        GO_TOOLCHAIN_ENV += ${env:"CC=clang"} ${env:"PATH=$(DEFAULT_DARWIN_X86_64)/bin:$OS_SDK_ROOT_RESOURCE_GLOBAL/usr/bin"}
    }
    elsewhen ($HOST_OS_LINUX) {
        GO_TOOLCHAIN_ENV += ${env:"CC=clang"} ${env:"PATH=$(DEFAULT_LINUX_X86_64)/bin:$OS_SDK_ROOT_RESOURCE_GLOBAL/usr/bin"}
    }
}

module GO_PROGRAM: GO_BASE_UNIT {
    .CMD=GO_LINK_EXE
    .NODE_TYPE=Bundle
    .SYMLINK_POLICY=EXE
    SET(MODULE_TYPE PROGRAM)

    when ($MSVC == "yes" || $CYGWIN == "yes") {
        MODULE_SUFFIX=.exe
    }

    PEERDIR(contrib/go/_std/src/runtime)
}

module GO_TEST: GO_PROGRAM {
    .CMD=GO_LINK_TEST
    SET(MODULE_TYPE GOTEST)

    PEERDIR(contrib/go/_std/src/testing/internal/testdeps)
    PEERDIR(contrib/go/_std/src/testing)
}

JAVA_IGNORE_CLASSPATH_CLASH_VALUE=
### @usage: JAVA_IGNORE_CLASSPATH_CLASH_FOR([classes])
### Ignore classpath clash test fails for classes
macro JAVA_IGNORE_CLASSPATH_CLASH_FOR(Args...) {
    SET_APPEND(JAVA_IGNORE_CLASSPATH_CLASH_VALUE $Args)
}

macro PY_SRCS() {
    DEFAULT(MODULE_TAG PY2)
    DEFAULT(PYTHON2 yes)
    DEFAULT(PYTHON3 no)
}

macro PY3_SRCS() {
    DEFAULT(MODULE_TAG PY3)
    DEFAULT(PYTHON2 no)
    DEFAULT(PYTHON3 yes)
}

### @usage PY23_LIBRARY([name])
### Build PY_LIBRARY or PY3_LIBRARY depending on incoming PEERDIR
### Direct build or build by RECURSE creates both variants
### For more information read https://wiki.yandex-team.ru/arcadia/python/pysrcs
multimodule PY23_LIBRARY {
    module PY2: PY_LIBRARY {
        OBJ_SUF=.py2
    }
    module PY3: PY3_LIBRARY {
        when ($MSVC == "yes" || $CYGWIN == "yes") {
            MODULE_PREFIX=py3
        }
        otherwise {
             MODULE_PREFIX=libpy3
        }
        OBJ_SUF=.py3
    }
}

multimodule PY23_CPP_LIBRARY {
    module PY2: LIBRARY {
        .RESTRICTED=PY_SRCS PY3_SRCS USE_PYTHON USE_PYTHON3
        OBJ_SUF=.py2
#        PYTHON_ADDINCL()
    }
    module PY3: LIBRARY {
        .ALIASES=PY_REGISTER=PY3_REGISTER PYTHON_ADDINCL=PYTHON3_ADDINCL
        .RESTRICTED=PY_SRCS PY3_SRCS USE_PYTHON USE_PYTHON3
#        PYTHON3_ADDINCL()
        when ($MSVC == "yes" || $CYGWIN == "yes") {
            MODULE_PREFIX=py3c
        }
        otherwise {
            MODULE_PREFIX=libpy3c
        }
        OBJ_SUF=.py3
    }
}

STORYBOARD_FLAGS=--errors --warnings --notices --auto-activate-custom-fonts --output-format human-readable-text
macro _SRC("storyboard", SRC, SRCFLAGS...) {
    .CMD=/usr/bin/xcrun ibtool $STORYBOARD_FLAGS --module $REALPRJNAME --output-partial-info-plist ${output;suf=.partial_plist:SRC} --compilation-directory $BINDIR ${input:SRC} && $YMAKE_PYTHON ${input:"build/scripts/tar_directory.py"}  ${output;tobindir;suf=.compiled_storyboard_tar:SRC} . $BINDIR/${nopath;suf=c:SRC}
}

macro _SRC("xib", SRC, SRCFLAGS...) {
    .CMD=/usr/bin/xcrun ibtool $STORYBOARD_FLAGS --module $REALPRJNAME --output-partial-info-plist ${output;suf=.partial_plist:SRC} --compile ${output;tobindir;noext;suf=.nib:SRC} ${input:SRC}
}

ASSETS_FLAGS=--output-format human-readable-text --notices --warnings
macro _IOS_ASSETS(AssetsDir, Content...) {
    .CMD=$FS_TOOLS md $BINDIR/$REALPRJNAME && /usr/bin/xcrun actool $ASSETS_FLAGS --export-dependency-info $BINDIR/assetcatalog_dependencies --output-partial-info-plist ${output:"assetcatalog_generated_info.partial_plist"} --product-type com.apple.product-type.application --compile $BINDIR/$REALPRJNAME $AssetsDir ${input;hide:Content}
}

macro IOS_APP_COMMON_FLAGS(Flags...) {
    SET_APPEND(STORYBOARD_FLAGS $Flags)
    SET_APPEND(ASSETS_FLAGS $Flags)
}

macro IOS_APP_ASSETS_FLAGS(Flags...) {
    SET_APPEND(ASSETS_FLAGS $Flags)
}

DELIM=__DELIM__
PACK_IOS_ARCHIVE=$YMAKE_PYTHON ${input:"build/scripts/ios_wrapper.py"} $TARGET $REALPRJNAME $BINDIR $DELIM $AUTO_INPUT $DELIM $PEERS $DELIM $STORYBOARD_FLAGS
module IOS_APP: BASE_UNIT {
    .CMD=PACK_IOS_ARCHIVE
    .EXTS=.compiled_storyboard_tar .partial_plist .plist .xcent .nib
    .PEERDIR_POLICY=as_build_from
    NO_PLATFORM()
    SET(NEED_PLATFORM_PEERDIRS no)
    SET(MODULE_SUFFIX .tar)
}

JDK_VERSION=8
when ($JDK_VERSION == "10") {
    JDK10=yes # remove this later
}

# local jdk and tools
USE_SYSTEM_JDK=
USE_SYSTEM_UBERJAR=
