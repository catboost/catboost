#line 1 "numpy/core/src/_simd/_simd_data.inc.src"

/*
 *****************************************************************************
 **       This file was autogenerated from a template  DO NOT EDIT!!!!      **
 **       Changes should be made to the original source (.src) file         **
 *****************************************************************************
 */

#line 1
/**
 * This file is included by `_simd.dispatch.c.src`. Its contents are affected by the simd configuration, and
 * therefore must be built multiple times. Making it a standalone `.c` file with `NPY_VISIBILITY_HIDDEN`
 * symbols would require judicious use of `NPY_CPU_DISPATCH_DECLARE` and `NPY_CPU_DISPATCH_CURFX`, which was
 * deemed too harmful to readability.
 */
/************************************
 ** Private Definitions
 ************************************/
static simd_data_info simd__data_registry[simd_data_end] =
{
    [simd_data_none] = {.pyname="none"},
    #line 19
    [simd_data_u8] = {
        .pyname="int", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_scalar=1, .to_scalar = simd_data_u8, .to_vector = simd_data_vu8,
        .lane_size = sizeof(npyv_lanetype_u8)
    },
    
#line 19
    [simd_data_u16] = {
        .pyname="int", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_scalar=1, .to_scalar = simd_data_u16, .to_vector = simd_data_vu16,
        .lane_size = sizeof(npyv_lanetype_u16)
    },
    
#line 19
    [simd_data_u32] = {
        .pyname="int", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_scalar=1, .to_scalar = simd_data_u32, .to_vector = simd_data_vu32,
        .lane_size = sizeof(npyv_lanetype_u32)
    },
    
#line 19
    [simd_data_u64] = {
        .pyname="int", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_scalar=1, .to_scalar = simd_data_u64, .to_vector = simd_data_vu64,
        .lane_size = sizeof(npyv_lanetype_u64)
    },
    
#line 19
    [simd_data_s8] = {
        .pyname="int", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_scalar=1, .to_scalar = simd_data_s8, .to_vector = simd_data_vs8,
        .lane_size = sizeof(npyv_lanetype_s8)
    },
    
#line 19
    [simd_data_s16] = {
        .pyname="int", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_scalar=1, .to_scalar = simd_data_s16, .to_vector = simd_data_vs16,
        .lane_size = sizeof(npyv_lanetype_s16)
    },
    
#line 19
    [simd_data_s32] = {
        .pyname="int", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_scalar=1, .to_scalar = simd_data_s32, .to_vector = simd_data_vs32,
        .lane_size = sizeof(npyv_lanetype_s32)
    },
    
#line 19
    [simd_data_s64] = {
        .pyname="int", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_scalar=1, .to_scalar = simd_data_s64, .to_vector = simd_data_vs64,
        .lane_size = sizeof(npyv_lanetype_s64)
    },
    
#line 19
    [simd_data_f32] = {
        .pyname="float", .is_unsigned=!0&&!1, .is_signed=0, .is_float=1,
        .is_scalar=1, .to_scalar = simd_data_f32, .to_vector = simd_data_vf32,
        .lane_size = sizeof(npyv_lanetype_f32)
    },
    
#line 19
    [simd_data_f64] = {
        .pyname="float", .is_unsigned=!0&&!1, .is_signed=0, .is_float=1,
        .is_scalar=1, .to_scalar = simd_data_f64, .to_vector = simd_data_vf64,
        .lane_size = sizeof(npyv_lanetype_f64)
    },
    
    // sequences
    #line 32
    [simd_data_qu8] = {
        .pyname="[int]", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_sequence=1, .to_scalar = simd_data_u8, .to_vector = simd_data_vu8,
        .nlanes=npyv_nlanes_u8, .lane_size = sizeof(npyv_lanetype_u8)
    },
    
#line 32
    [simd_data_qu16] = {
        .pyname="[int]", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_sequence=1, .to_scalar = simd_data_u16, .to_vector = simd_data_vu16,
        .nlanes=npyv_nlanes_u16, .lane_size = sizeof(npyv_lanetype_u16)
    },
    
#line 32
    [simd_data_qu32] = {
        .pyname="[int]", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_sequence=1, .to_scalar = simd_data_u32, .to_vector = simd_data_vu32,
        .nlanes=npyv_nlanes_u32, .lane_size = sizeof(npyv_lanetype_u32)
    },
    
#line 32
    [simd_data_qu64] = {
        .pyname="[int]", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_sequence=1, .to_scalar = simd_data_u64, .to_vector = simd_data_vu64,
        .nlanes=npyv_nlanes_u64, .lane_size = sizeof(npyv_lanetype_u64)
    },
    
#line 32
    [simd_data_qs8] = {
        .pyname="[int]", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_sequence=1, .to_scalar = simd_data_s8, .to_vector = simd_data_vs8,
        .nlanes=npyv_nlanes_s8, .lane_size = sizeof(npyv_lanetype_s8)
    },
    
#line 32
    [simd_data_qs16] = {
        .pyname="[int]", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_sequence=1, .to_scalar = simd_data_s16, .to_vector = simd_data_vs16,
        .nlanes=npyv_nlanes_s16, .lane_size = sizeof(npyv_lanetype_s16)
    },
    
#line 32
    [simd_data_qs32] = {
        .pyname="[int]", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_sequence=1, .to_scalar = simd_data_s32, .to_vector = simd_data_vs32,
        .nlanes=npyv_nlanes_s32, .lane_size = sizeof(npyv_lanetype_s32)
    },
    
#line 32
    [simd_data_qs64] = {
        .pyname="[int]", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_sequence=1, .to_scalar = simd_data_s64, .to_vector = simd_data_vs64,
        .nlanes=npyv_nlanes_s64, .lane_size = sizeof(npyv_lanetype_s64)
    },
    
#line 32
    [simd_data_qf32] = {
        .pyname="[float]", .is_unsigned=!0&&!1, .is_signed=0, .is_float=1,
        .is_sequence=1, .to_scalar = simd_data_f32, .to_vector = simd_data_vf32,
        .nlanes=npyv_nlanes_f32, .lane_size = sizeof(npyv_lanetype_f32)
    },
    
#line 32
    [simd_data_qf64] = {
        .pyname="[float]", .is_unsigned=!0&&!1, .is_signed=0, .is_float=1,
        .is_sequence=1, .to_scalar = simd_data_f64, .to_vector = simd_data_vf64,
        .nlanes=npyv_nlanes_f64, .lane_size = sizeof(npyv_lanetype_f64)
    },
    
    // vectors
    #line 44
    [simd_data_vu8] = {
        .pyname="npyv_u8", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_vector=1, .to_scalar = simd_data_u8, .to_vector = simd_data_vu8,
        .nlanes=npyv_nlanes_u8, .lane_size = sizeof(npyv_lanetype_u8)
    },
    
#line 44
    [simd_data_vu16] = {
        .pyname="npyv_u16", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_vector=1, .to_scalar = simd_data_u16, .to_vector = simd_data_vu16,
        .nlanes=npyv_nlanes_u16, .lane_size = sizeof(npyv_lanetype_u16)
    },
    
#line 44
    [simd_data_vu32] = {
        .pyname="npyv_u32", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_vector=1, .to_scalar = simd_data_u32, .to_vector = simd_data_vu32,
        .nlanes=npyv_nlanes_u32, .lane_size = sizeof(npyv_lanetype_u32)
    },
    
#line 44
    [simd_data_vu64] = {
        .pyname="npyv_u64", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_vector=1, .to_scalar = simd_data_u64, .to_vector = simd_data_vu64,
        .nlanes=npyv_nlanes_u64, .lane_size = sizeof(npyv_lanetype_u64)
    },
    
#line 44
    [simd_data_vs8] = {
        .pyname="npyv_s8", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_vector=1, .to_scalar = simd_data_s8, .to_vector = simd_data_vs8,
        .nlanes=npyv_nlanes_s8, .lane_size = sizeof(npyv_lanetype_s8)
    },
    
#line 44
    [simd_data_vs16] = {
        .pyname="npyv_s16", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_vector=1, .to_scalar = simd_data_s16, .to_vector = simd_data_vs16,
        .nlanes=npyv_nlanes_s16, .lane_size = sizeof(npyv_lanetype_s16)
    },
    
#line 44
    [simd_data_vs32] = {
        .pyname="npyv_s32", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_vector=1, .to_scalar = simd_data_s32, .to_vector = simd_data_vs32,
        .nlanes=npyv_nlanes_s32, .lane_size = sizeof(npyv_lanetype_s32)
    },
    
#line 44
    [simd_data_vs64] = {
        .pyname="npyv_s64", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_vector=1, .to_scalar = simd_data_s64, .to_vector = simd_data_vs64,
        .nlanes=npyv_nlanes_s64, .lane_size = sizeof(npyv_lanetype_s64)
    },
    
#line 44
    [simd_data_vf32] = {
        .pyname="npyv_f32", .is_unsigned=!0&&!1, .is_signed=0, .is_float=1,
        .is_vector=1, .to_scalar = simd_data_f32, .to_vector = simd_data_vf32,
        .nlanes=npyv_nlanes_f32, .lane_size = sizeof(npyv_lanetype_f32)
    },
    
#line 44
    [simd_data_vf64] = {
        .pyname="npyv_f64", .is_unsigned=!0&&!1, .is_signed=0, .is_float=1,
        .is_vector=1, .to_scalar = simd_data_f64, .to_vector = simd_data_vf64,
        .nlanes=npyv_nlanes_f64, .lane_size = sizeof(npyv_lanetype_f64)
    },
    
    // boolean vectors, treated as unsigned and converted internally
    // to add compatibility among all SIMD extensions
    #line 56
    [simd_data_vb8] = {
        .pyname="npyv_b8", .is_bool=1, .is_vector=1,
        .to_scalar = simd_data_u8, .to_vector = simd_data_vu8,
        .nlanes=npyv_nlanes_u8, .lane_size = sizeof(npyv_lanetype_u8)
    },
    
#line 56
    [simd_data_vb16] = {
        .pyname="npyv_b16", .is_bool=1, .is_vector=1,
        .to_scalar = simd_data_u16, .to_vector = simd_data_vu16,
        .nlanes=npyv_nlanes_u16, .lane_size = sizeof(npyv_lanetype_u16)
    },
    
#line 56
    [simd_data_vb32] = {
        .pyname="npyv_b32", .is_bool=1, .is_vector=1,
        .to_scalar = simd_data_u32, .to_vector = simd_data_vu32,
        .nlanes=npyv_nlanes_u32, .lane_size = sizeof(npyv_lanetype_u32)
    },
    
#line 56
    [simd_data_vb64] = {
        .pyname="npyv_b64", .is_bool=1, .is_vector=1,
        .to_scalar = simd_data_u64, .to_vector = simd_data_vu64,
        .nlanes=npyv_nlanes_u64, .lane_size = sizeof(npyv_lanetype_u64)
    },
    
    // multi-vectors x2
    #line 68
    [simd_data_vu8x2] = {
        .pyname="npyv_u8x2", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_vectorx=2, .to_scalar = simd_data_u8, .to_vector = simd_data_vu8,
        .nlanes=2, .lane_size = sizeof(npyv_lanetype_u8)
    },
    
#line 68
    [simd_data_vu16x2] = {
        .pyname="npyv_u16x2", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_vectorx=2, .to_scalar = simd_data_u16, .to_vector = simd_data_vu16,
        .nlanes=2, .lane_size = sizeof(npyv_lanetype_u16)
    },
    
#line 68
    [simd_data_vu32x2] = {
        .pyname="npyv_u32x2", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_vectorx=2, .to_scalar = simd_data_u32, .to_vector = simd_data_vu32,
        .nlanes=2, .lane_size = sizeof(npyv_lanetype_u32)
    },
    
#line 68
    [simd_data_vu64x2] = {
        .pyname="npyv_u64x2", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_vectorx=2, .to_scalar = simd_data_u64, .to_vector = simd_data_vu64,
        .nlanes=2, .lane_size = sizeof(npyv_lanetype_u64)
    },
    
#line 68
    [simd_data_vs8x2] = {
        .pyname="npyv_s8x2", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_vectorx=2, .to_scalar = simd_data_s8, .to_vector = simd_data_vs8,
        .nlanes=2, .lane_size = sizeof(npyv_lanetype_s8)
    },
    
#line 68
    [simd_data_vs16x2] = {
        .pyname="npyv_s16x2", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_vectorx=2, .to_scalar = simd_data_s16, .to_vector = simd_data_vs16,
        .nlanes=2, .lane_size = sizeof(npyv_lanetype_s16)
    },
    
#line 68
    [simd_data_vs32x2] = {
        .pyname="npyv_s32x2", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_vectorx=2, .to_scalar = simd_data_s32, .to_vector = simd_data_vs32,
        .nlanes=2, .lane_size = sizeof(npyv_lanetype_s32)
    },
    
#line 68
    [simd_data_vs64x2] = {
        .pyname="npyv_s64x2", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_vectorx=2, .to_scalar = simd_data_s64, .to_vector = simd_data_vs64,
        .nlanes=2, .lane_size = sizeof(npyv_lanetype_s64)
    },
    
#line 68
    [simd_data_vf32x2] = {
        .pyname="npyv_f32x2", .is_unsigned=!0&&!1, .is_signed=0, .is_float=1,
        .is_vectorx=2, .to_scalar = simd_data_f32, .to_vector = simd_data_vf32,
        .nlanes=2, .lane_size = sizeof(npyv_lanetype_f32)
    },
    
#line 68
    [simd_data_vf64x2] = {
        .pyname="npyv_f64x2", .is_unsigned=!0&&!1, .is_signed=0, .is_float=1,
        .is_vectorx=2, .to_scalar = simd_data_f64, .to_vector = simd_data_vf64,
        .nlanes=2, .lane_size = sizeof(npyv_lanetype_f64)
    },
    
    // multi-vectors x3
    #line 80
    [simd_data_vu8x3] = {
        .pyname="npyv_u8x3", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_vectorx=3, .to_scalar = simd_data_u8, .to_vector = simd_data_vu8,
        .nlanes=3, .lane_size = sizeof(npyv_lanetype_u8)
    },
    
#line 80
    [simd_data_vu16x3] = {
        .pyname="npyv_u16x3", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_vectorx=3, .to_scalar = simd_data_u16, .to_vector = simd_data_vu16,
        .nlanes=3, .lane_size = sizeof(npyv_lanetype_u16)
    },
    
#line 80
    [simd_data_vu32x3] = {
        .pyname="npyv_u32x3", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_vectorx=3, .to_scalar = simd_data_u32, .to_vector = simd_data_vu32,
        .nlanes=3, .lane_size = sizeof(npyv_lanetype_u32)
    },
    
#line 80
    [simd_data_vu64x3] = {
        .pyname="npyv_u64x3", .is_unsigned=!0&&!0, .is_signed=0, .is_float=0,
        .is_vectorx=3, .to_scalar = simd_data_u64, .to_vector = simd_data_vu64,
        .nlanes=3, .lane_size = sizeof(npyv_lanetype_u64)
    },
    
#line 80
    [simd_data_vs8x3] = {
        .pyname="npyv_s8x3", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_vectorx=3, .to_scalar = simd_data_s8, .to_vector = simd_data_vs8,
        .nlanes=3, .lane_size = sizeof(npyv_lanetype_s8)
    },
    
#line 80
    [simd_data_vs16x3] = {
        .pyname="npyv_s16x3", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_vectorx=3, .to_scalar = simd_data_s16, .to_vector = simd_data_vs16,
        .nlanes=3, .lane_size = sizeof(npyv_lanetype_s16)
    },
    
#line 80
    [simd_data_vs32x3] = {
        .pyname="npyv_s32x3", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_vectorx=3, .to_scalar = simd_data_s32, .to_vector = simd_data_vs32,
        .nlanes=3, .lane_size = sizeof(npyv_lanetype_s32)
    },
    
#line 80
    [simd_data_vs64x3] = {
        .pyname="npyv_s64x3", .is_unsigned=!1&&!0, .is_signed=1, .is_float=0,
        .is_vectorx=3, .to_scalar = simd_data_s64, .to_vector = simd_data_vs64,
        .nlanes=3, .lane_size = sizeof(npyv_lanetype_s64)
    },
    
#line 80
    [simd_data_vf32x3] = {
        .pyname="npyv_f32x3", .is_unsigned=!0&&!1, .is_signed=0, .is_float=1,
        .is_vectorx=3, .to_scalar = simd_data_f32, .to_vector = simd_data_vf32,
        .nlanes=3, .lane_size = sizeof(npyv_lanetype_f32)
    },
    
#line 80
    [simd_data_vf64x3] = {
        .pyname="npyv_f64x3", .is_unsigned=!0&&!1, .is_signed=0, .is_float=1,
        .is_vectorx=3, .to_scalar = simd_data_f64, .to_vector = simd_data_vf64,
        .nlanes=3, .lane_size = sizeof(npyv_lanetype_f64)
    },
    
};

/************************************
 ** Protected Definitions
 ************************************/
static const simd_data_info *
simd_data_getinfo(simd_data_type dtype)
{ return &simd__data_registry[dtype]; }

