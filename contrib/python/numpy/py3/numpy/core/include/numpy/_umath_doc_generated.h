#ifndef NUMPY_CORE_INCLUDE__UMATH_DOC_GENERATED_H_
#define NUMPY_CORE_INCLUDE__UMATH_DOC_GENERATED_H_
#define DOC_NUMPY_CORE_UMATH_ABSOLUTE "Calculate the absolute value element-wise.\n""\n""``np.abs`` is a shorthand for this function.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input array.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""absolute : ndarray\n""    An ndarray containing the absolute value of\n""    each element in `x`.  For complex input, ``a + ib``, the\n""    absolute value is :math:`\\sqrt{ a^2 + b^2 }`.\n""    This is a scalar if `x` is a scalar.\n""\n""Examples\n""--------\n"">>> x = np.array([-1.2, 1.2])\n"">>> np.absolute(x)\n""array([ 1.2,  1.2])\n"">>> np.absolute(1.2 + 1j)\n""1.5620499351813308\n""\n""Plot the function over ``[-10, 10]``:\n""\n"">>> import matplotlib.pyplot as plt\n""\n"">>> x = np.linspace(start=-10, stop=10, num=101)\n"">>> plt.plot(x, np.absolute(x))\n"">>> plt.show()\n""\n""Plot the function over the complex plane:\n""\n"">>> xx = x + 1j * x[:, np.newaxis]\n"">>> plt.imshow(np.abs(xx), extent=[-10, 10, -10, 10], cmap=\'gray\')\n"">>> plt.show()\n""\n""The `abs` function can be used as a shorthand for ``np.absolute`` on\n""ndarrays.\n""\n"">>> x = np.array([-1.2, 1.2])\n"">>> abs(x)\n""array([1.2, 1.2])"
#define DOC_NUMPY_CORE_UMATH_ADD "Add arguments element-wise.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    The arrays to be added.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""add : ndarray or scalar\n""    The sum of `x1` and `x2`, element-wise.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""Notes\n""-----\n""Equivalent to `x1` + `x2` in terms of array broadcasting.\n""\n""Examples\n""--------\n"">>> np.add(1.0, 4.0)\n""5.0\n"">>> x1 = np.arange(9.0).reshape((3, 3))\n"">>> x2 = np.arange(3.0)\n"">>> np.add(x1, x2)\n""array([[  0.,   2.,   4.],\n""       [  3.,   5.,   7.],\n""       [  6.,   8.,  10.]])\n""\n""The ``+`` operator can be used as a shorthand for ``np.add`` on ndarrays.\n""\n"">>> x1 = np.arange(9.0).reshape((3, 3))\n"">>> x2 = np.arange(3.0)\n"">>> x1 + x2\n""array([[ 0.,  2.,  4.],\n""       [ 3.,  5.,  7.],\n""       [ 6.,  8., 10.]])"
#define DOC_NUMPY_CORE_UMATH_ARCCOS "Trigonometric inverse cosine, element-wise.\n""\n""The inverse of `cos` so that, if ``y = cos(x)``, then ``x = arccos(y)``.\n""\n""Parameters\n""----------\n""x : array_like\n""    `x`-coordinate on the unit circle.\n""    For real arguments, the domain is [-1, 1].\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""angle : ndarray\n""    The angle of the ray intersecting the unit circle at the given\n""    `x`-coordinate in radians [0, pi].\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""cos, arctan, arcsin, emath.arccos\n""\n""Notes\n""-----\n""`arccos` is a multivalued function: for each `x` there are infinitely\n""many numbers `z` such that ``cos(z) = x``. The convention is to return\n""the angle `z` whose real part lies in `[0, pi]`.\n""\n""For real-valued input data types, `arccos` always returns real output.\n""For each value that cannot be expressed as a real number or infinity,\n""it yields ``nan`` and sets the `invalid` floating point error flag.\n""\n""For complex-valued input, `arccos` is a complex analytic function that\n""has branch cuts ``[-inf, -1]`` and `[1, inf]` and is continuous from\n""above on the former and from below on the latter.\n""\n""The inverse `cos` is also known as `acos` or cos^-1.\n""\n""References\n""----------\n""M. Abramowitz and I.A. Stegun, \"Handbook of Mathematical Functions\",\n""10th printing, 1964, pp. 79.\n""https://personal.math.ubc.ca/~cbm/aands/page_79.htm\n""\n""Examples\n""--------\n""We expect the arccos of 1 to be 0, and of -1 to be pi:\n""\n"">>> np.arccos([1, -1])\n""array([ 0.        ,  3.14159265])\n""\n""Plot arccos:\n""\n"">>> import matplotlib.pyplot as plt\n"">>> x = np.linspace(-1, 1, num=100)\n"">>> plt.plot(x, np.arccos(x))\n"">>> plt.axis(\'tight\')\n"">>> plt.show()"
#define DOC_NUMPY_CORE_UMATH_ARCCOSH "Inverse hyperbolic cosine, element-wise.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input array.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""arccosh : ndarray\n""    Array of the same shape as `x`.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""\n""cosh, arcsinh, sinh, arctanh, tanh\n""\n""Notes\n""-----\n""`arccosh` is a multivalued function: for each `x` there are infinitely\n""many numbers `z` such that `cosh(z) = x`. The convention is to return the\n""`z` whose imaginary part lies in ``[-pi, pi]`` and the real part in\n""``[0, inf]``.\n""\n""For real-valued input data types, `arccosh` always returns real output.\n""For each value that cannot be expressed as a real number or infinity, it\n""yields ``nan`` and sets the `invalid` floating point error flag.\n""\n""For complex-valued input, `arccosh` is a complex analytical function that\n""has a branch cut `[-inf, 1]` and is continuous from above on it.\n""\n""References\n""----------\n"".. [1] M. Abramowitz and I.A. Stegun, \"Handbook of Mathematical Functions\",\n""       10th printing, 1964, pp. 86.\n""       https://personal.math.ubc.ca/~cbm/aands/page_86.htm\n"".. [2] Wikipedia, \"Inverse hyperbolic function\",\n""       https://en.wikipedia.org/wiki/Arccosh\n""\n""Examples\n""--------\n"">>> np.arccosh([np.e, 10.0])\n""array([ 1.65745445,  2.99322285])\n"">>> np.arccosh(1)\n""0.0"
#define DOC_NUMPY_CORE_UMATH_ARCSIN "Inverse sine, element-wise.\n""\n""Parameters\n""----------\n""x : array_like\n""    `y`-coordinate on the unit circle.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""angle : ndarray\n""    The inverse sine of each element in `x`, in radians and in the\n""    closed interval ``[-pi/2, pi/2]``.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""sin, cos, arccos, tan, arctan, arctan2, emath.arcsin\n""\n""Notes\n""-----\n""`arcsin` is a multivalued function: for each `x` there are infinitely\n""many numbers `z` such that :math:`sin(z) = x`.  The convention is to\n""return the angle `z` whose real part lies in [-pi/2, pi/2].\n""\n""For real-valued input data types, *arcsin* always returns real output.\n""For each value that cannot be expressed as a real number or infinity,\n""it yields ``nan`` and sets the `invalid` floating point error flag.\n""\n""For complex-valued input, `arcsin` is a complex analytic function that\n""has, by convention, the branch cuts [-inf, -1] and [1, inf]  and is\n""continuous from above on the former and from below on the latter.\n""\n""The inverse sine is also known as `asin` or sin^{-1}.\n""\n""References\n""----------\n""Abramowitz, M. and Stegun, I. A., *Handbook of Mathematical Functions*,\n""10th printing, New York: Dover, 1964, pp. 79ff.\n""https://personal.math.ubc.ca/~cbm/aands/page_79.htm\n""\n""Examples\n""--------\n"">>> np.arcsin(1)     # pi/2\n""1.5707963267948966\n"">>> np.arcsin(-1)    # -pi/2\n""-1.5707963267948966\n"">>> np.arcsin(0)\n""0.0"
#define DOC_NUMPY_CORE_UMATH_ARCSINH "Inverse hyperbolic sine element-wise.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input array.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    Array of the same shape as `x`.\n""    This is a scalar if `x` is a scalar.\n""\n""Notes\n""-----\n""`arcsinh` is a multivalued function: for each `x` there are infinitely\n""many numbers `z` such that `sinh(z) = x`. The convention is to return the\n""`z` whose imaginary part lies in `[-pi/2, pi/2]`.\n""\n""For real-valued input data types, `arcsinh` always returns real output.\n""For each value that cannot be expressed as a real number or infinity, it\n""returns ``nan`` and sets the `invalid` floating point error flag.\n""\n""For complex-valued input, `arccos` is a complex analytical function that\n""has branch cuts `[1j, infj]` and `[-1j, -infj]` and is continuous from\n""the right on the former and from the left on the latter.\n""\n""The inverse hyperbolic sine is also known as `asinh` or ``sinh^-1``.\n""\n""References\n""----------\n"".. [1] M. Abramowitz and I.A. Stegun, \"Handbook of Mathematical Functions\",\n""       10th printing, 1964, pp. 86.\n""       https://personal.math.ubc.ca/~cbm/aands/page_86.htm\n"".. [2] Wikipedia, \"Inverse hyperbolic function\",\n""       https://en.wikipedia.org/wiki/Arcsinh\n""\n""Examples\n""--------\n"">>> np.arcsinh(np.array([np.e, 10.0]))\n""array([ 1.72538256,  2.99822295])"
#define DOC_NUMPY_CORE_UMATH_ARCTAN "Trigonometric inverse tangent, element-wise.\n""\n""The inverse of tan, so that if ``y = tan(x)`` then ``x = arctan(y)``.\n""\n""Parameters\n""----------\n""x : array_like\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    Out has the same shape as `x`.  Its real part is in\n""    ``[-pi/2, pi/2]`` (``arctan(+/-inf)`` returns ``+/-pi/2``).\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""arctan2 : The \"four quadrant\" arctan of the angle formed by (`x`, `y`)\n""    and the positive `x`-axis.\n""angle : Argument of complex values.\n""\n""Notes\n""-----\n""`arctan` is a multi-valued function: for each `x` there are infinitely\n""many numbers `z` such that tan(`z`) = `x`.  The convention is to return\n""the angle `z` whose real part lies in [-pi/2, pi/2].\n""\n""For real-valued input data types, `arctan` always returns real output.\n""For each value that cannot be expressed as a real number or infinity,\n""it yields ``nan`` and sets the `invalid` floating point error flag.\n""\n""For complex-valued input, `arctan` is a complex analytic function that\n""has [``1j, infj``] and [``-1j, -infj``] as branch cuts, and is continuous\n""from the left on the former and from the right on the latter.\n""\n""The inverse tangent is also known as `atan` or tan^{-1}.\n""\n""References\n""----------\n""Abramowitz, M. and Stegun, I. A., *Handbook of Mathematical Functions*,\n""10th printing, New York: Dover, 1964, pp. 79.\n""https://personal.math.ubc.ca/~cbm/aands/page_79.htm\n""\n""Examples\n""--------\n""We expect the arctan of 0 to be 0, and of 1 to be pi/4:\n""\n"">>> np.arctan([0, 1])\n""array([ 0.        ,  0.78539816])\n""\n"">>> np.pi/4\n""0.78539816339744828\n""\n""Plot arctan:\n""\n"">>> import matplotlib.pyplot as plt\n"">>> x = np.linspace(-10, 10)\n"">>> plt.plot(x, np.arctan(x))\n"">>> plt.axis(\'tight\')\n"">>> plt.show()"
#define DOC_NUMPY_CORE_UMATH_ARCTAN2 "Element-wise arc tangent of ``x1/x2`` choosing the quadrant correctly.\n""\n""The quadrant (i.e., branch) is chosen so that ``arctan2(x1, x2)`` is\n""the signed angle in radians between the ray ending at the origin and\n""passing through the point (1,0), and the ray ending at the origin and\n""passing through the point (`x2`, `x1`).  (Note the role reversal: the\n""\"`y`-coordinate\" is the first function parameter, the \"`x`-coordinate\"\n""is the second.)  By IEEE convention, this function is defined for\n""`x2` = +/-0 and for either or both of `x1` and `x2` = +/-inf (see\n""Notes for specific values).\n""\n""This function is not defined for complex-valued arguments; for the\n""so-called argument of complex values, use `angle`.\n""\n""Parameters\n""----------\n""x1 : array_like, real-valued\n""    `y`-coordinates.\n""x2 : array_like, real-valued\n""    `x`-coordinates.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""angle : ndarray\n""    Array of angles in radians, in the range ``[-pi, pi]``.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""arctan, tan, angle\n""\n""Notes\n""-----\n""*arctan2* is identical to the `atan2` function of the underlying\n""C library.  The following special values are defined in the C\n""standard: [1]_\n""\n""====== ====== ================\n""`x1`   `x2`   `arctan2(x1,x2)`\n""====== ====== ================\n""+/- 0  +0     +/- 0\n""+/- 0  -0     +/- pi\n"" > 0   +/-inf +0 / +pi\n"" < 0   +/-inf -0 / -pi\n""+/-inf +inf   +/- (pi/4)\n""+/-inf -inf   +/- (3*pi/4)\n""====== ====== ================\n""\n""Note that +0 and -0 are distinct floating point numbers, as are +inf\n""and -inf.\n""\n""References\n""----------\n"".. [1] ISO/IEC standard 9899:1999, \"Programming language C.\"\n""\n""Examples\n""--------\n""Consider four points in different quadrants:\n""\n"">>> x = np.array([-1, +1, +1, -1])\n"">>> y = np.array([-1, -1, +1, +1])\n"">>> np.arctan2(y, x) * 180 / np.pi\n""array([-135.,  -45.,   45.,  135.])\n""\n""Note the order of the parameters. `arctan2` is defined also when `x2` = 0\n""and at several other special points, obtaining values in\n""the range ``[-pi, pi]``:\n""\n"">>> np.arctan2([1., -1.], [0., 0.])\n""array([ 1.57079633, -1.57079633])\n"">>> np.arctan2([0., 0., np.inf], [+0., -0., np.inf])\n""array([0.        , 3.14159265, 0.78539816])"
#define DOC_NUMPY_CORE_UMATH__ARG "DO NOT USE, ONLY FOR TESTING"
#define DOC_NUMPY_CORE_UMATH_ARCTANH "Inverse hyperbolic tangent element-wise.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input array.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    Array of the same shape as `x`.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""emath.arctanh\n""\n""Notes\n""-----\n""`arctanh` is a multivalued function: for each `x` there are infinitely\n""many numbers `z` such that ``tanh(z) = x``. The convention is to return\n""the `z` whose imaginary part lies in `[-pi/2, pi/2]`.\n""\n""For real-valued input data types, `arctanh` always returns real output.\n""For each value that cannot be expressed as a real number or infinity,\n""it yields ``nan`` and sets the `invalid` floating point error flag.\n""\n""For complex-valued input, `arctanh` is a complex analytical function\n""that has branch cuts `[-1, -inf]` and `[1, inf]` and is continuous from\n""above on the former and from below on the latter.\n""\n""The inverse hyperbolic tangent is also known as `atanh` or ``tanh^-1``.\n""\n""References\n""----------\n"".. [1] M. Abramowitz and I.A. Stegun, \"Handbook of Mathematical Functions\",\n""       10th printing, 1964, pp. 86.\n""       https://personal.math.ubc.ca/~cbm/aands/page_86.htm\n"".. [2] Wikipedia, \"Inverse hyperbolic function\",\n""       https://en.wikipedia.org/wiki/Arctanh\n""\n""Examples\n""--------\n"">>> np.arctanh([0, -0.5])\n""array([ 0.        , -0.54930614])"
#define DOC_NUMPY_CORE_UMATH_BITWISE_AND "Compute the bit-wise AND of two arrays element-wise.\n""\n""Computes the bit-wise AND of the underlying binary representation of\n""the integers in the input arrays. This ufunc implements the C/Python\n""operator ``&``.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    Only integer and boolean types are handled.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    Result.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""logical_and\n""bitwise_or\n""bitwise_xor\n""binary_repr :\n""    Return the binary representation of the input number as a string.\n""\n""Examples\n""--------\n""The number 13 is represented by ``00001101``.  Likewise, 17 is\n""represented by ``00010001``.  The bit-wise AND of 13 and 17 is\n""therefore ``000000001``, or 1:\n""\n"">>> np.bitwise_and(13, 17)\n""1\n""\n"">>> np.bitwise_and(14, 13)\n""12\n"">>> np.binary_repr(12)\n""\'1100\'\n"">>> np.bitwise_and([14,3], 13)\n""array([12,  1])\n""\n"">>> np.bitwise_and([11,7], [4,25])\n""array([0, 1])\n"">>> np.bitwise_and(np.array([2,5,255]), np.array([3,14,16]))\n""array([ 2,  4, 16])\n"">>> np.bitwise_and([True, True], [False, True])\n""array([False,  True])\n""\n""The ``&`` operator can be used as a shorthand for ``np.bitwise_and`` on\n""ndarrays.\n""\n"">>> x1 = np.array([2, 5, 255])\n"">>> x2 = np.array([3, 14, 16])\n"">>> x1 & x2\n""array([ 2,  4, 16])"
#define DOC_NUMPY_CORE_UMATH_BITWISE_OR "Compute the bit-wise OR of two arrays element-wise.\n""\n""Computes the bit-wise OR of the underlying binary representation of\n""the integers in the input arrays. This ufunc implements the C/Python\n""operator ``|``.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    Only integer and boolean types are handled.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    Result.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""logical_or\n""bitwise_and\n""bitwise_xor\n""binary_repr :\n""    Return the binary representation of the input number as a string.\n""\n""Examples\n""--------\n""The number 13 has the binary representation ``00001101``. Likewise,\n""16 is represented by ``00010000``.  The bit-wise OR of 13 and 16 is\n""then ``000111011``, or 29:\n""\n"">>> np.bitwise_or(13, 16)\n""29\n"">>> np.binary_repr(29)\n""\'11101\'\n""\n"">>> np.bitwise_or(32, 2)\n""34\n"">>> np.bitwise_or([33, 4], 1)\n""array([33,  5])\n"">>> np.bitwise_or([33, 4], [1, 2])\n""array([33,  6])\n""\n"">>> np.bitwise_or(np.array([2, 5, 255]), np.array([4, 4, 4]))\n""array([  6,   5, 255])\n"">>> np.array([2, 5, 255]) | np.array([4, 4, 4])\n""array([  6,   5, 255])\n"">>> np.bitwise_or(np.array([2, 5, 255, 2147483647], dtype=np.int32),\n""...               np.array([4, 4, 4, 2147483647], dtype=np.int32))\n""array([         6,          5,        255, 2147483647])\n"">>> np.bitwise_or([True, True], [False, True])\n""array([ True,  True])\n""\n""The ``|`` operator can be used as a shorthand for ``np.bitwise_or`` on\n""ndarrays.\n""\n"">>> x1 = np.array([2, 5, 255])\n"">>> x2 = np.array([4, 4, 4])\n"">>> x1 | x2\n""array([  6,   5, 255])"
#define DOC_NUMPY_CORE_UMATH_BITWISE_XOR "Compute the bit-wise XOR of two arrays element-wise.\n""\n""Computes the bit-wise XOR of the underlying binary representation of\n""the integers in the input arrays. This ufunc implements the C/Python\n""operator ``^``.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    Only integer and boolean types are handled.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    Result.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""logical_xor\n""bitwise_and\n""bitwise_or\n""binary_repr :\n""    Return the binary representation of the input number as a string.\n""\n""Examples\n""--------\n""The number 13 is represented by ``00001101``. Likewise, 17 is\n""represented by ``00010001``.  The bit-wise XOR of 13 and 17 is\n""therefore ``00011100``, or 28:\n""\n"">>> np.bitwise_xor(13, 17)\n""28\n"">>> np.binary_repr(28)\n""\'11100\'\n""\n"">>> np.bitwise_xor(31, 5)\n""26\n"">>> np.bitwise_xor([31,3], 5)\n""array([26,  6])\n""\n"">>> np.bitwise_xor([31,3], [5,6])\n""array([26,  5])\n"">>> np.bitwise_xor([True, True], [False, True])\n""array([ True, False])\n""\n""The ``^`` operator can be used as a shorthand for ``np.bitwise_xor`` on\n""ndarrays.\n""\n"">>> x1 = np.array([True, True])\n"">>> x2 = np.array([False, True])\n"">>> x1 ^ x2\n""array([ True, False])"
#define DOC_NUMPY_CORE_UMATH_CEIL "Return the ceiling of the input, element-wise.\n""\n""The ceil of the scalar `x` is the smallest integer `i`, such that\n""``i >= x``.  It is often denoted as :math:`\\lceil x \\rceil`.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input data.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray or scalar\n""    The ceiling of each element in `x`, with `float` dtype.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""floor, trunc, rint, fix\n""\n""Examples\n""--------\n"">>> a = np.array([-1.7, -1.5, -0.2, 0.2, 1.5, 1.7, 2.0])\n"">>> np.ceil(a)\n""array([-1., -1., -0.,  1.,  2.,  2.,  2.])"
#define DOC_NUMPY_CORE_UMATH_TRUNC "Return the truncated value of the input, element-wise.\n""\n""The truncated value of the scalar `x` is the nearest integer `i` which\n""is closer to zero than `x` is. In short, the fractional part of the\n""signed number `x` is discarded.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input data.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray or scalar\n""    The truncated value of each element in `x`.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""ceil, floor, rint, fix\n""\n""Notes\n""-----\n"".. versionadded:: 1.3.0\n""\n""Examples\n""--------\n"">>> a = np.array([-1.7, -1.5, -0.2, 0.2, 1.5, 1.7, 2.0])\n"">>> np.trunc(a)\n""array([-1., -1., -0.,  0.,  1.,  1.,  2.])"
#define DOC_NUMPY_CORE_UMATH_CONJUGATE "Return the complex conjugate, element-wise.\n""\n""The complex conjugate of a complex number is obtained by changing the\n""sign of its imaginary part.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input value.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    The complex conjugate of `x`, with same dtype as `y`.\n""    This is a scalar if `x` is a scalar.\n""\n""Notes\n""-----\n""`conj` is an alias for `conjugate`:\n""\n"">>> np.conj is np.conjugate\n""True\n""\n""Examples\n""--------\n"">>> np.conjugate(1+2j)\n""(1-2j)\n""\n"">>> x = np.eye(2) + 1j * np.eye(2)\n"">>> np.conjugate(x)\n""array([[ 1.-1.j,  0.-0.j],\n""       [ 0.-0.j,  1.-1.j]])"
#define DOC_NUMPY_CORE_UMATH_COS "Cosine element-wise.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input array in radians.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    The corresponding cosine values.\n""    This is a scalar if `x` is a scalar.\n""\n""Notes\n""-----\n""If `out` is provided, the function writes the result into it,\n""and returns a reference to `out`.  (See Examples)\n""\n""References\n""----------\n""M. Abramowitz and I. A. Stegun, Handbook of Mathematical Functions.\n""New York, NY: Dover, 1972.\n""\n""Examples\n""--------\n"">>> np.cos(np.array([0, np.pi/2, np.pi]))\n""array([  1.00000000e+00,   6.12303177e-17,  -1.00000000e+00])\n"">>>\n"">>> # Example of providing the optional output parameter\n"">>> out1 = np.array([0], dtype=\'d\')\n"">>> out2 = np.cos([0.1], out1)\n"">>> out2 is out1\n""True\n"">>>\n"">>> # Example of ValueError due to provision of shape mis-matched `out`\n"">>> np.cos(np.zeros((3,3)),np.zeros((2,2)))\n""Traceback (most recent call last):\n""  File \"<stdin>\", line 1, in <module>\n""ValueError: operands could not be broadcast together with shapes (3,3) (2,2)"
#define DOC_NUMPY_CORE_UMATH_COSH "Hyperbolic cosine, element-wise.\n""\n""Equivalent to ``1/2 * (np.exp(x) + np.exp(-x))`` and ``np.cos(1j*x)``.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input array.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    Output array of same shape as `x`.\n""    This is a scalar if `x` is a scalar.\n""\n""Examples\n""--------\n"">>> np.cosh(0)\n""1.0\n""\n""The hyperbolic cosine describes the shape of a hanging cable:\n""\n"">>> import matplotlib.pyplot as plt\n"">>> x = np.linspace(-4, 4, 1000)\n"">>> plt.plot(x, np.cosh(x))\n"">>> plt.show()"
#define DOC_NUMPY_CORE_UMATH_DEGREES "Convert angles from radians to degrees.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input array in radians.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray of floats\n""    The corresponding degree values; if `out` was supplied this is a\n""    reference to it.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""rad2deg : equivalent function\n""\n""Examples\n""--------\n""Convert a radian array to degrees\n""\n"">>> rad = np.arange(12.)*np.pi/6\n"">>> np.degrees(rad)\n""array([   0.,   30.,   60.,   90.,  120.,  150.,  180.,  210.,  240.,\n""        270.,  300.,  330.])\n""\n"">>> out = np.zeros((rad.shape))\n"">>> r = np.degrees(rad, out)\n"">>> np.all(r == out)\n""True"
#define DOC_NUMPY_CORE_UMATH_RAD2DEG "Convert angles from radians to degrees.\n""\n""Parameters\n""----------\n""x : array_like\n""    Angle in radians.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    The corresponding angle in degrees.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""deg2rad : Convert angles from degrees to radians.\n""unwrap : Remove large jumps in angle by wrapping.\n""\n""Notes\n""-----\n"".. versionadded:: 1.3.0\n""\n""rad2deg(x) is ``180 * x / pi``.\n""\n""Examples\n""--------\n"">>> np.rad2deg(np.pi/2)\n""90.0"
#define DOC_NUMPY_CORE_UMATH_HEAVISIDE "Compute the Heaviside step function.\n""\n""The Heaviside step function is defined as::\n""\n""                          0   if x1 < 0\n""    heaviside(x1, x2) =  x2   if x1 == 0\n""                          1   if x1 > 0\n""\n""where `x2` is often taken to be 0.5, but 0 and 1 are also sometimes used.\n""\n""Parameters\n""----------\n""x1 : array_like\n""    Input values.\n""x2 : array_like\n""    The value of the function when x1 is 0.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    The output array, element-wise Heaviside step function of `x1`.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""Notes\n""-----\n"".. versionadded:: 1.13.0\n""\n""References\n""----------\n"".. Wikipedia, \"Heaviside step function\",\n""   https://en.wikipedia.org/wiki/Heaviside_step_function\n""\n""Examples\n""--------\n"">>> np.heaviside([-1.5, 0, 2.0], 0.5)\n""array([ 0. ,  0.5,  1. ])\n"">>> np.heaviside([-1.5, 0, 2.0], 1)\n""array([ 0.,  1.,  1.])"
#define DOC_NUMPY_CORE_UMATH_DIVIDE "Divide arguments element-wise.\n""\n""Parameters\n""----------\n""x1 : array_like\n""    Dividend array.\n""x2 : array_like\n""    Divisor array.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray or scalar\n""    The quotient ``x1/x2``, element-wise.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""seterr : Set whether to raise or warn on overflow, underflow and\n""         division by zero.\n""\n""Notes\n""-----\n""Equivalent to ``x1`` / ``x2`` in terms of array-broadcasting.\n""\n""The ``true_divide(x1, x2)`` function is an alias for\n""``divide(x1, x2)``.\n""\n""Examples\n""--------\n"">>> np.divide(2.0, 4.0)\n""0.5\n"">>> x1 = np.arange(9.0).reshape((3, 3))\n"">>> x2 = np.arange(3.0)\n"">>> np.divide(x1, x2)\n""array([[nan, 1. , 1. ],\n""       [inf, 4. , 2.5],\n""       [inf, 7. , 4. ]])\n""\n""The ``/`` operator can be used as a shorthand for ``np.divide`` on\n""ndarrays.\n""\n"">>> x1 = np.arange(9.0).reshape((3, 3))\n"">>> x2 = 2 * np.ones(3)\n"">>> x1 / x2\n""array([[0. , 0.5, 1. ],\n""       [1.5, 2. , 2.5],\n""       [3. , 3.5, 4. ]])"
#define DOC_NUMPY_CORE_UMATH_EQUAL "Return (x1 == x2) element-wise.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    Input arrays.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    Output array, element-wise comparison of `x1` and `x2`.\n""    Typically of type bool, unless ``dtype=object`` is passed.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""not_equal, greater_equal, less_equal, greater, less\n""\n""Examples\n""--------\n"">>> np.equal([0, 1, 3], np.arange(3))\n""array([ True,  True, False])\n""\n""What is compared are values, not types. So an int (1) and an array of\n""length one can evaluate as True:\n""\n"">>> np.equal(1, np.ones(1))\n""array([ True])\n""\n""The ``==`` operator can be used as a shorthand for ``np.equal`` on\n""ndarrays.\n""\n"">>> a = np.array([2, 4, 6])\n"">>> b = np.array([2, 4, 2])\n"">>> a == b\n""array([ True,  True, False])"
#define DOC_NUMPY_CORE_UMATH_EXP "Calculate the exponential of all elements in the input array.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input values.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    Output array, element-wise exponential of `x`.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""expm1 : Calculate ``exp(x) - 1`` for all elements in the array.\n""exp2  : Calculate ``2**x`` for all elements in the array.\n""\n""Notes\n""-----\n""The irrational number ``e`` is also known as Euler\'s number.  It is\n""approximately 2.718281, and is the base of the natural logarithm,\n""``ln`` (this means that, if :math:`x = \\ln y = \\log_e y`,\n""then :math:`e^x = y`. For real input, ``exp(x)`` is always positive.\n""\n""For complex arguments, ``x = a + ib``, we can write\n"":math:`e^x = e^a e^{ib}`.  The first term, :math:`e^a`, is already\n""known (it is the real argument, described above).  The second term,\n"":math:`e^{ib}`, is :math:`\\cos b + i \\sin b`, a function with\n""magnitude 1 and a periodic phase.\n""\n""References\n""----------\n"".. [1] Wikipedia, \"Exponential function\",\n""       https://en.wikipedia.org/wiki/Exponential_function\n"".. [2] M. Abramovitz and I. A. Stegun, \"Handbook of Mathematical Functions\n""       with Formulas, Graphs, and Mathematical Tables,\" Dover, 1964, p. 69,\n""       https://personal.math.ubc.ca/~cbm/aands/page_69.htm\n""\n""Examples\n""--------\n""Plot the magnitude and phase of ``exp(x)`` in the complex plane:\n""\n"">>> import matplotlib.pyplot as plt\n""\n"">>> x = np.linspace(-2*np.pi, 2*np.pi, 100)\n"">>> xx = x + 1j * x[:, np.newaxis] # a + ib over complex plane\n"">>> out = np.exp(xx)\n""\n"">>> plt.subplot(121)\n"">>> plt.imshow(np.abs(out),\n""...            extent=[-2*np.pi, 2*np.pi, -2*np.pi, 2*np.pi], cmap=\'gray\')\n"">>> plt.title(\'Magnitude of exp(x)\')\n""\n"">>> plt.subplot(122)\n"">>> plt.imshow(np.angle(out),\n""...            extent=[-2*np.pi, 2*np.pi, -2*np.pi, 2*np.pi], cmap=\'hsv\')\n"">>> plt.title(\'Phase (angle) of exp(x)\')\n"">>> plt.show()"
#define DOC_NUMPY_CORE_UMATH_EXP2 "Calculate `2**p` for all `p` in the input array.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input values.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    Element-wise 2 to the power `x`.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""power\n""\n""Notes\n""-----\n"".. versionadded:: 1.3.0\n""\n""\n""\n""Examples\n""--------\n"">>> np.exp2([2, 3])\n""array([ 4.,  8.])"
#define DOC_NUMPY_CORE_UMATH_EXPM1 "Calculate ``exp(x) - 1`` for all elements in the array.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input values.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    Element-wise exponential minus one: ``out = exp(x) - 1``.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""log1p : ``log(1 + x)``, the inverse of expm1.\n""\n""\n""Notes\n""-----\n""This function provides greater precision than ``exp(x) - 1``\n""for small values of ``x``.\n""\n""Examples\n""--------\n""The true value of ``exp(1e-10) - 1`` is ``1.00000000005e-10`` to\n""about 32 significant digits. This example shows the superiority of\n""expm1 in this case.\n""\n"">>> np.expm1(1e-10)\n""1.00000000005e-10\n"">>> np.exp(1e-10) - 1\n""1.000000082740371e-10"
#define DOC_NUMPY_CORE_UMATH_FABS "Compute the absolute values element-wise.\n""\n""This function returns the absolute values (positive magnitude) of the\n""data in `x`. Complex values are not handled, use `absolute` to find the\n""absolute values of complex data.\n""\n""Parameters\n""----------\n""x : array_like\n""    The array of numbers for which the absolute values are required. If\n""    `x` is a scalar, the result `y` will also be a scalar.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray or scalar\n""    The absolute values of `x`, the returned values are always floats.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""absolute : Absolute values including `complex` types.\n""\n""Examples\n""--------\n"">>> np.fabs(-1)\n""1.0\n"">>> np.fabs([-1.2, 1.2])\n""array([ 1.2,  1.2])"
#define DOC_NUMPY_CORE_UMATH_FLOOR "Return the floor of the input, element-wise.\n""\n""The floor of the scalar `x` is the largest integer `i`, such that\n""`i <= x`.  It is often denoted as :math:`\\lfloor x \\rfloor`.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input data.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray or scalar\n""    The floor of each element in `x`.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""ceil, trunc, rint, fix\n""\n""Notes\n""-----\n""Some spreadsheet programs calculate the \"floor-towards-zero\", where\n""``floor(-2.5) == -2``.  NumPy instead uses the definition of\n""`floor` where `floor(-2.5) == -3`. The \"floor-towards-zero\"\n""function is called ``fix`` in NumPy.\n""\n""Examples\n""--------\n"">>> a = np.array([-1.7, -1.5, -0.2, 0.2, 1.5, 1.7, 2.0])\n"">>> np.floor(a)\n""array([-2., -2., -1.,  0.,  1.,  1.,  2.])"
#define DOC_NUMPY_CORE_UMATH_FLOOR_DIVIDE "Return the largest integer smaller or equal to the division of the inputs.\n""It is equivalent to the Python ``//`` operator and pairs with the\n""Python ``%`` (`remainder`), function so that ``a = a % b + b * (a // b)``\n""up to roundoff.\n""\n""Parameters\n""----------\n""x1 : array_like\n""    Numerator.\n""x2 : array_like\n""    Denominator.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    y = floor(`x1`/`x2`)\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""remainder : Remainder complementary to floor_divide.\n""divmod : Simultaneous floor division and remainder.\n""divide : Standard division.\n""floor : Round a number to the nearest integer toward minus infinity.\n""ceil : Round a number to the nearest integer toward infinity.\n""\n""Examples\n""--------\n"">>> np.floor_divide(7,3)\n""2\n"">>> np.floor_divide([1., 2., 3., 4.], 2.5)\n""array([ 0.,  0.,  1.,  1.])\n""\n""The ``//`` operator can be used as a shorthand for ``np.floor_divide``\n""on ndarrays.\n""\n"">>> x1 = np.array([1., 2., 3., 4.])\n"">>> x1 // 2.5\n""array([0., 0., 1., 1.])"
#define DOC_NUMPY_CORE_UMATH_FMOD "Returns the element-wise remainder of division.\n""\n""This is the NumPy implementation of the C library function fmod, the\n""remainder has the same sign as the dividend `x1`. It is equivalent to\n""the Matlab(TM) ``rem`` function and should not be confused with the\n""Python modulus operator ``x1 % x2``.\n""\n""Parameters\n""----------\n""x1 : array_like\n""    Dividend.\n""x2 : array_like\n""    Divisor.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : array_like\n""    The remainder of the division of `x1` by `x2`.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""remainder : Equivalent to the Python ``%`` operator.\n""divide\n""\n""Notes\n""-----\n""The result of the modulo operation for negative dividend and divisors\n""is bound by conventions. For `fmod`, the sign of result is the sign of\n""the dividend, while for `remainder` the sign of the result is the sign\n""of the divisor. The `fmod` function is equivalent to the Matlab(TM)\n""``rem`` function.\n""\n""Examples\n""--------\n"">>> np.fmod([-3, -2, -1, 1, 2, 3], 2)\n""array([-1,  0, -1,  1,  0,  1])\n"">>> np.remainder([-3, -2, -1, 1, 2, 3], 2)\n""array([1, 0, 1, 1, 0, 1])\n""\n"">>> np.fmod([5, 3], [2, 2.])\n""array([ 1.,  1.])\n"">>> a = np.arange(-3, 3).reshape(3, 2)\n"">>> a\n""array([[-3, -2],\n""       [-1,  0],\n""       [ 1,  2]])\n"">>> np.fmod(a, [2,2])\n""array([[-1,  0],\n""       [-1,  0],\n""       [ 1,  0]])"
#define DOC_NUMPY_CORE_UMATH_GREATER "Return the truth value of (x1 > x2) element-wise.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    Input arrays.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    Output array, element-wise comparison of `x1` and `x2`.\n""    Typically of type bool, unless ``dtype=object`` is passed.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""\n""See Also\n""--------\n""greater_equal, less, less_equal, equal, not_equal\n""\n""Examples\n""--------\n"">>> np.greater([4,2],[2,2])\n""array([ True, False])\n""\n""The ``>`` operator can be used as a shorthand for ``np.greater`` on\n""ndarrays.\n""\n"">>> a = np.array([4, 2])\n"">>> b = np.array([2, 2])\n"">>> a > b\n""array([ True, False])"
#define DOC_NUMPY_CORE_UMATH_GREATER_EQUAL "Return the truth value of (x1 >= x2) element-wise.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    Input arrays.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : bool or ndarray of bool\n""    Output array, element-wise comparison of `x1` and `x2`.\n""    Typically of type bool, unless ``dtype=object`` is passed.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""greater, less, less_equal, equal, not_equal\n""\n""Examples\n""--------\n"">>> np.greater_equal([4, 2, 1], [2, 2, 2])\n""array([ True, True, False])\n""\n""The ``>=`` operator can be used as a shorthand for ``np.greater_equal``\n""on ndarrays.\n""\n"">>> a = np.array([4, 2, 1])\n"">>> b = np.array([2, 2, 2])\n"">>> a >= b\n""array([ True,  True, False])"
#define DOC_NUMPY_CORE_UMATH_HYPOT "Given the \"legs\" of a right triangle, return its hypotenuse.\n""\n""Equivalent to ``sqrt(x1**2 + x2**2)``, element-wise.  If `x1` or\n""`x2` is scalar_like (i.e., unambiguously cast-able to a scalar type),\n""it is broadcast for use with each element of the other argument.\n""(See Examples)\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    Leg of the triangle(s).\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""z : ndarray\n""    The hypotenuse of the triangle(s).\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""Examples\n""--------\n"">>> np.hypot(3*np.ones((3, 3)), 4*np.ones((3, 3)))\n""array([[ 5.,  5.,  5.],\n""       [ 5.,  5.,  5.],\n""       [ 5.,  5.,  5.]])\n""\n""Example showing broadcast of scalar_like argument:\n""\n"">>> np.hypot(3*np.ones((3, 3)), [4])\n""array([[ 5.,  5.,  5.],\n""       [ 5.,  5.,  5.],\n""       [ 5.,  5.,  5.]])"
#define DOC_NUMPY_CORE_UMATH_INVERT "Compute bit-wise inversion, or bit-wise NOT, element-wise.\n""\n""Computes the bit-wise NOT of the underlying binary representation of\n""the integers in the input arrays. This ufunc implements the C/Python\n""operator ``~``.\n""\n""For signed integer inputs, the two\'s complement is returned.  In a\n""two\'s-complement system negative numbers are represented by the two\'s\n""complement of the absolute value. This is the most common method of\n""representing signed integers on computers [1]_. A N-bit\n""two\'s-complement system can represent every integer in the range\n"":math:`-2^{N-1}` to :math:`+2^{N-1}-1`.\n""\n""Parameters\n""----------\n""x : array_like\n""    Only integer and boolean types are handled.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    Result.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""bitwise_and, bitwise_or, bitwise_xor\n""logical_not\n""binary_repr :\n""    Return the binary representation of the input number as a string.\n""\n""Notes\n""-----\n""`bitwise_not` is an alias for `invert`:\n""\n"">>> np.bitwise_not is np.invert\n""True\n""\n""References\n""----------\n"".. [1] Wikipedia, \"Two\'s complement\",\n""    https://en.wikipedia.org/wiki/Two\'s_complement\n""\n""Examples\n""--------\n""We\'ve seen that 13 is represented by ``00001101``.\n""The invert or bit-wise NOT of 13 is then:\n""\n"">>> x = np.invert(np.array(13, dtype=np.uint8))\n"">>> x\n""242\n"">>> np.binary_repr(x, width=8)\n""\'11110010\'\n""\n""The result depends on the bit-width:\n""\n"">>> x = np.invert(np.array(13, dtype=np.uint16))\n"">>> x\n""65522\n"">>> np.binary_repr(x, width=16)\n""\'1111111111110010\'\n""\n""When using signed integer types the result is the two\'s complement of\n""the result for the unsigned type:\n""\n"">>> np.invert(np.array([13], dtype=np.int8))\n""array([-14], dtype=int8)\n"">>> np.binary_repr(-14, width=8)\n""\'11110010\'\n""\n""Booleans are accepted as well:\n""\n"">>> np.invert(np.array([True, False]))\n""array([False,  True])\n""\n""The ``~`` operator can be used as a shorthand for ``np.invert`` on\n""ndarrays.\n""\n"">>> x1 = np.array([True, False])\n"">>> ~x1\n""array([False,  True])"
#define DOC_NUMPY_CORE_UMATH_ISFINITE "Test element-wise for finiteness (not infinity and not Not a Number).\n""\n""The result is returned as a boolean array.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input values.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray, bool\n""    True where ``x`` is not positive infinity, negative infinity,\n""    or NaN; false otherwise.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""isinf, isneginf, isposinf, isnan\n""\n""Notes\n""-----\n""Not a Number, positive infinity and negative infinity are considered\n""to be non-finite.\n""\n""NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic\n""(IEEE 754). This means that Not a Number is not equivalent to infinity.\n""Also that positive infinity is not equivalent to negative infinity. But\n""infinity is equivalent to positive infinity.  Errors result if the\n""second argument is also supplied when `x` is a scalar input, or if\n""first and second arguments have different shapes.\n""\n""Examples\n""--------\n"">>> np.isfinite(1)\n""True\n"">>> np.isfinite(0)\n""True\n"">>> np.isfinite(np.nan)\n""False\n"">>> np.isfinite(np.inf)\n""False\n"">>> np.isfinite(np.NINF)\n""False\n"">>> np.isfinite([np.log(-1.),1.,np.log(0)])\n""array([False,  True, False])\n""\n"">>> x = np.array([-np.inf, 0., np.inf])\n"">>> y = np.array([2, 2, 2])\n"">>> np.isfinite(x, y)\n""array([0, 1, 0])\n"">>> y\n""array([0, 1, 0])"
#define DOC_NUMPY_CORE_UMATH_ISINF "Test element-wise for positive or negative infinity.\n""\n""Returns a boolean array of the same shape as `x`, True where ``x ==\n""+/-inf``, otherwise False.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input values\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : bool (scalar) or boolean ndarray\n""    True where ``x`` is positive or negative infinity, false otherwise.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""isneginf, isposinf, isnan, isfinite\n""\n""Notes\n""-----\n""NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic\n""(IEEE 754).\n""\n""Errors result if the second argument is supplied when the first\n""argument is a scalar, or if the first and second arguments have\n""different shapes.\n""\n""Examples\n""--------\n"">>> np.isinf(np.inf)\n""True\n"">>> np.isinf(np.nan)\n""False\n"">>> np.isinf(np.NINF)\n""True\n"">>> np.isinf([np.inf, -np.inf, 1.0, np.nan])\n""array([ True,  True, False, False])\n""\n"">>> x = np.array([-np.inf, 0., np.inf])\n"">>> y = np.array([2, 2, 2])\n"">>> np.isinf(x, y)\n""array([1, 0, 1])\n"">>> y\n""array([1, 0, 1])"
#define DOC_NUMPY_CORE_UMATH_ISNAN "Test element-wise for NaN and return result as a boolean array.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input array.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray or bool\n""    True where ``x`` is NaN, false otherwise.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""isinf, isneginf, isposinf, isfinite, isnat\n""\n""Notes\n""-----\n""NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic\n""(IEEE 754). This means that Not a Number is not equivalent to infinity.\n""\n""Examples\n""--------\n"">>> np.isnan(np.nan)\n""True\n"">>> np.isnan(np.inf)\n""False\n"">>> np.isnan([np.log(-1.),1.,np.log(0)])\n""array([ True, False, False])"
#define DOC_NUMPY_CORE_UMATH_ISNAT "Test element-wise for NaT (not a time) and return result as a boolean array.\n""\n"".. versionadded:: 1.13.0\n""\n""Parameters\n""----------\n""x : array_like\n""    Input array with datetime or timedelta data type.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray or bool\n""    True where ``x`` is NaT, false otherwise.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""isnan, isinf, isneginf, isposinf, isfinite\n""\n""Examples\n""--------\n"">>> np.isnat(np.datetime64(\"NaT\"))\n""True\n"">>> np.isnat(np.datetime64(\"2016-01-01\"))\n""False\n"">>> np.isnat(np.array([\"NaT\", \"2016-01-01\"], dtype=\"datetime64[ns]\"))\n""array([ True, False])"
#define DOC_NUMPY_CORE_UMATH_LEFT_SHIFT "Shift the bits of an integer to the left.\n""\n""Bits are shifted to the left by appending `x2` 0s at the right of `x1`.\n""Since the internal representation of numbers is in binary format, this\n""operation is equivalent to multiplying `x1` by ``2**x2``.\n""\n""Parameters\n""----------\n""x1 : array_like of integer type\n""    Input values.\n""x2 : array_like of integer type\n""    Number of zeros to append to `x1`. Has to be non-negative.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : array of integer type\n""    Return `x1` with bits shifted `x2` times to the left.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""right_shift : Shift the bits of an integer to the right.\n""binary_repr : Return the binary representation of the input number\n""    as a string.\n""\n""Examples\n""--------\n"">>> np.binary_repr(5)\n""\'101\'\n"">>> np.left_shift(5, 2)\n""20\n"">>> np.binary_repr(20)\n""\'10100\'\n""\n"">>> np.left_shift(5, [1,2,3])\n""array([10, 20, 40])\n""\n""Note that the dtype of the second argument may change the dtype of the\n""result and can lead to unexpected results in some cases (see\n"":ref:`Casting Rules <ufuncs.casting>`):\n""\n"">>> a = np.left_shift(np.uint8(255), 1) # Expect 254\n"">>> print(a, type(a)) # Unexpected result due to upcasting\n""510 <class \'numpy.int64\'>\n"">>> b = np.left_shift(np.uint8(255), np.uint8(1))\n"">>> print(b, type(b))\n""254 <class \'numpy.uint8\'>\n""\n""The ``<<`` operator can be used as a shorthand for ``np.left_shift`` on\n""ndarrays.\n""\n"">>> x1 = 5\n"">>> x2 = np.array([1, 2, 3])\n"">>> x1 << x2\n""array([10, 20, 40])"
#define DOC_NUMPY_CORE_UMATH_LESS "Return the truth value of (x1 < x2) element-wise.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    Input arrays.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    Output array, element-wise comparison of `x1` and `x2`.\n""    Typically of type bool, unless ``dtype=object`` is passed.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""greater, less_equal, greater_equal, equal, not_equal\n""\n""Examples\n""--------\n"">>> np.less([1, 2], [2, 2])\n""array([ True, False])\n""\n""The ``<`` operator can be used as a shorthand for ``np.less`` on ndarrays.\n""\n"">>> a = np.array([1, 2])\n"">>> b = np.array([2, 2])\n"">>> a < b\n""array([ True, False])"
#define DOC_NUMPY_CORE_UMATH_LESS_EQUAL "Return the truth value of (x1 <= x2) element-wise.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    Input arrays.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    Output array, element-wise comparison of `x1` and `x2`.\n""    Typically of type bool, unless ``dtype=object`` is passed.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""greater, less, greater_equal, equal, not_equal\n""\n""Examples\n""--------\n"">>> np.less_equal([4, 2, 1], [2, 2, 2])\n""array([False,  True,  True])\n""\n""The ``<=`` operator can be used as a shorthand for ``np.less_equal`` on\n""ndarrays.\n""\n"">>> a = np.array([4, 2, 1])\n"">>> b = np.array([2, 2, 2])\n"">>> a <= b\n""array([False,  True,  True])"
#define DOC_NUMPY_CORE_UMATH_LOG "Natural logarithm, element-wise.\n""\n""The natural logarithm `log` is the inverse of the exponential function,\n""so that `log(exp(x)) = x`. The natural logarithm is logarithm in base\n""`e`.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input value.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    The natural logarithm of `x`, element-wise.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""log10, log2, log1p, emath.log\n""\n""Notes\n""-----\n""Logarithm is a multivalued function: for each `x` there is an infinite\n""number of `z` such that `exp(z) = x`. The convention is to return the\n""`z` whose imaginary part lies in `[-pi, pi]`.\n""\n""For real-valued input data types, `log` always returns real output. For\n""each value that cannot be expressed as a real number or infinity, it\n""yields ``nan`` and sets the `invalid` floating point error flag.\n""\n""For complex-valued input, `log` is a complex analytical function that\n""has a branch cut `[-inf, 0]` and is continuous from above on it. `log`\n""handles the floating-point negative zero as an infinitesimal negative\n""number, conforming to the C99 standard.\n""\n""References\n""----------\n"".. [1] M. Abramowitz and I.A. Stegun, \"Handbook of Mathematical Functions\",\n""       10th printing, 1964, pp. 67.\n""       https://personal.math.ubc.ca/~cbm/aands/page_67.htm\n"".. [2] Wikipedia, \"Logarithm\". https://en.wikipedia.org/wiki/Logarithm\n""\n""Examples\n""--------\n"">>> np.log([1, np.e, np.e**2, 0])\n""array([  0.,   1.,   2., -Inf])"
#define DOC_NUMPY_CORE_UMATH_LOG10 "Return the base 10 logarithm of the input array, element-wise.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input values.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    The logarithm to the base 10 of `x`, element-wise. NaNs are\n""    returned where x is negative.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""emath.log10\n""\n""Notes\n""-----\n""Logarithm is a multivalued function: for each `x` there is an infinite\n""number of `z` such that `10**z = x`. The convention is to return the\n""`z` whose imaginary part lies in `[-pi, pi]`.\n""\n""For real-valued input data types, `log10` always returns real output.\n""For each value that cannot be expressed as a real number or infinity,\n""it yields ``nan`` and sets the `invalid` floating point error flag.\n""\n""For complex-valued input, `log10` is a complex analytical function that\n""has a branch cut `[-inf, 0]` and is continuous from above on it.\n""`log10` handles the floating-point negative zero as an infinitesimal\n""negative number, conforming to the C99 standard.\n""\n""References\n""----------\n"".. [1] M. Abramowitz and I.A. Stegun, \"Handbook of Mathematical Functions\",\n""       10th printing, 1964, pp. 67.\n""       https://personal.math.ubc.ca/~cbm/aands/page_67.htm\n"".. [2] Wikipedia, \"Logarithm\". https://en.wikipedia.org/wiki/Logarithm\n""\n""Examples\n""--------\n"">>> np.log10([1e-15, -3.])\n""array([-15.,  nan])"
#define DOC_NUMPY_CORE_UMATH_LOG2 "Base-2 logarithm of `x`.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input values.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    Base-2 logarithm of `x`.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""log, log10, log1p, emath.log2\n""\n""Notes\n""-----\n"".. versionadded:: 1.3.0\n""\n""Logarithm is a multivalued function: for each `x` there is an infinite\n""number of `z` such that `2**z = x`. The convention is to return the `z`\n""whose imaginary part lies in `[-pi, pi]`.\n""\n""For real-valued input data types, `log2` always returns real output.\n""For each value that cannot be expressed as a real number or infinity,\n""it yields ``nan`` and sets the `invalid` floating point error flag.\n""\n""For complex-valued input, `log2` is a complex analytical function that\n""has a branch cut `[-inf, 0]` and is continuous from above on it. `log2`\n""handles the floating-point negative zero as an infinitesimal negative\n""number, conforming to the C99 standard.\n""\n""Examples\n""--------\n"">>> x = np.array([0, 1, 2, 2**4])\n"">>> np.log2(x)\n""array([-Inf,   0.,   1.,   4.])\n""\n"">>> xi = np.array([0+1.j, 1, 2+0.j, 4.j])\n"">>> np.log2(xi)\n""array([ 0.+2.26618007j,  0.+0.j        ,  1.+0.j        ,  2.+2.26618007j])"
#define DOC_NUMPY_CORE_UMATH_LOGADDEXP "Logarithm of the sum of exponentiations of the inputs.\n""\n""Calculates ``log(exp(x1) + exp(x2))``. This function is useful in\n""statistics where the calculated probabilities of events may be so small\n""as to exceed the range of normal floating point numbers.  In such cases\n""the logarithm of the calculated probability is stored. This function\n""allows adding probabilities stored in such a fashion.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    Input values.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""result : ndarray\n""    Logarithm of ``exp(x1) + exp(x2)``.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""logaddexp2: Logarithm of the sum of exponentiations of inputs in base 2.\n""\n""Notes\n""-----\n"".. versionadded:: 1.3.0\n""\n""Examples\n""--------\n"">>> prob1 = np.log(1e-50)\n"">>> prob2 = np.log(2.5e-50)\n"">>> prob12 = np.logaddexp(prob1, prob2)\n"">>> prob12\n""-113.87649168120691\n"">>> np.exp(prob12)\n""3.5000000000000057e-50"
#define DOC_NUMPY_CORE_UMATH_LOGADDEXP2 "Logarithm of the sum of exponentiations of the inputs in base-2.\n""\n""Calculates ``log2(2**x1 + 2**x2)``. This function is useful in machine\n""learning when the calculated probabilities of events may be so small as\n""to exceed the range of normal floating point numbers.  In such cases\n""the base-2 logarithm of the calculated probability can be used instead.\n""This function allows adding probabilities stored in such a fashion.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    Input values.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""result : ndarray\n""    Base-2 logarithm of ``2**x1 + 2**x2``.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""logaddexp: Logarithm of the sum of exponentiations of the inputs.\n""\n""Notes\n""-----\n"".. versionadded:: 1.3.0\n""\n""Examples\n""--------\n"">>> prob1 = np.log2(1e-50)\n"">>> prob2 = np.log2(2.5e-50)\n"">>> prob12 = np.logaddexp2(prob1, prob2)\n"">>> prob1, prob2, prob12\n""(-166.09640474436813, -164.77447664948076, -164.28904982231052)\n"">>> 2**prob12\n""3.4999999999999914e-50"
#define DOC_NUMPY_CORE_UMATH_LOG1P "Return the natural logarithm of one plus the input array, element-wise.\n""\n""Calculates ``log(1 + x)``.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input values.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    Natural logarithm of `1 + x`, element-wise.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""expm1 : ``exp(x) - 1``, the inverse of `log1p`.\n""\n""Notes\n""-----\n""For real-valued input, `log1p` is accurate also for `x` so small\n""that `1 + x == 1` in floating-point accuracy.\n""\n""Logarithm is a multivalued function: for each `x` there is an infinite\n""number of `z` such that `exp(z) = 1 + x`. The convention is to return\n""the `z` whose imaginary part lies in `[-pi, pi]`.\n""\n""For real-valued input data types, `log1p` always returns real output.\n""For each value that cannot be expressed as a real number or infinity,\n""it yields ``nan`` and sets the `invalid` floating point error flag.\n""\n""For complex-valued input, `log1p` is a complex analytical function that\n""has a branch cut `[-inf, -1]` and is continuous from above on it.\n""`log1p` handles the floating-point negative zero as an infinitesimal\n""negative number, conforming to the C99 standard.\n""\n""References\n""----------\n"".. [1] M. Abramowitz and I.A. Stegun, \"Handbook of Mathematical Functions\",\n""       10th printing, 1964, pp. 67.\n""       https://personal.math.ubc.ca/~cbm/aands/page_67.htm\n"".. [2] Wikipedia, \"Logarithm\". https://en.wikipedia.org/wiki/Logarithm\n""\n""Examples\n""--------\n"">>> np.log1p(1e-99)\n""1e-99\n"">>> np.log(1 + 1e-99)\n""0.0"
#define DOC_NUMPY_CORE_UMATH_LOGICAL_AND "Compute the truth value of x1 AND x2 element-wise.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    Input arrays.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray or bool\n""    Boolean result of the logical AND operation applied to the elements\n""    of `x1` and `x2`; the shape is determined by broadcasting.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""logical_or, logical_not, logical_xor\n""bitwise_and\n""\n""Examples\n""--------\n"">>> np.logical_and(True, False)\n""False\n"">>> np.logical_and([True, False], [False, False])\n""array([False, False])\n""\n"">>> x = np.arange(5)\n"">>> np.logical_and(x>1, x<4)\n""array([False, False,  True,  True, False])\n""\n""\n""The ``&`` operator can be used as a shorthand for ``np.logical_and`` on\n""boolean ndarrays.\n""\n"">>> a = np.array([True, False])\n"">>> b = np.array([False, False])\n"">>> a & b\n""array([False, False])"
#define DOC_NUMPY_CORE_UMATH_LOGICAL_NOT "Compute the truth value of NOT x element-wise.\n""\n""Parameters\n""----------\n""x : array_like\n""    Logical NOT is applied to the elements of `x`.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : bool or ndarray of bool\n""    Boolean result with the same shape as `x` of the NOT operation\n""    on elements of `x`.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""logical_and, logical_or, logical_xor\n""\n""Examples\n""--------\n"">>> np.logical_not(3)\n""False\n"">>> np.logical_not([True, False, 0, 1])\n""array([False,  True,  True, False])\n""\n"">>> x = np.arange(5)\n"">>> np.logical_not(x<3)\n""array([False, False, False,  True,  True])"
#define DOC_NUMPY_CORE_UMATH_LOGICAL_OR "Compute the truth value of x1 OR x2 element-wise.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    Logical OR is applied to the elements of `x1` and `x2`.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray or bool\n""    Boolean result of the logical OR operation applied to the elements\n""    of `x1` and `x2`; the shape is determined by broadcasting.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""logical_and, logical_not, logical_xor\n""bitwise_or\n""\n""Examples\n""--------\n"">>> np.logical_or(True, False)\n""True\n"">>> np.logical_or([True, False], [False, False])\n""array([ True, False])\n""\n"">>> x = np.arange(5)\n"">>> np.logical_or(x < 1, x > 3)\n""array([ True, False, False, False,  True])\n""\n""The ``|`` operator can be used as a shorthand for ``np.logical_or`` on\n""boolean ndarrays.\n""\n"">>> a = np.array([True, False])\n"">>> b = np.array([False, False])\n"">>> a | b\n""array([ True, False])"
#define DOC_NUMPY_CORE_UMATH_LOGICAL_XOR "Compute the truth value of x1 XOR x2, element-wise.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    Logical XOR is applied to the elements of `x1` and `x2`.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : bool or ndarray of bool\n""    Boolean result of the logical XOR operation applied to the elements\n""    of `x1` and `x2`; the shape is determined by broadcasting.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""logical_and, logical_or, logical_not, bitwise_xor\n""\n""Examples\n""--------\n"">>> np.logical_xor(True, False)\n""True\n"">>> np.logical_xor([True, True, False, False], [True, False, True, False])\n""array([False,  True,  True, False])\n""\n"">>> x = np.arange(5)\n"">>> np.logical_xor(x < 1, x > 3)\n""array([ True, False, False, False,  True])\n""\n""Simple example showing support of broadcasting\n""\n"">>> np.logical_xor(0, np.eye(2))\n""array([[ True, False],\n""       [False,  True]])"
#define DOC_NUMPY_CORE_UMATH_MAXIMUM "Element-wise maximum of array elements.\n""\n""Compare two arrays and returns a new array containing the element-wise\n""maxima. If one of the elements being compared is a NaN, then that\n""element is returned. If both elements are NaNs then the first is\n""returned. The latter distinction is important for complex NaNs, which\n""are defined as at least one of the real or imaginary parts being a NaN.\n""The net effect is that NaNs are propagated.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    The arrays holding the elements to be compared.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray or scalar\n""    The maximum of `x1` and `x2`, element-wise.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""minimum :\n""    Element-wise minimum of two arrays, propagates NaNs.\n""fmax :\n""    Element-wise maximum of two arrays, ignores NaNs.\n""amax :\n""    The maximum value of an array along a given axis, propagates NaNs.\n""nanmax :\n""    The maximum value of an array along a given axis, ignores NaNs.\n""\n""fmin, amin, nanmin\n""\n""Notes\n""-----\n""The maximum is equivalent to ``np.where(x1 >= x2, x1, x2)`` when\n""neither x1 nor x2 are nans, but it is faster and does proper\n""broadcasting.\n""\n""Examples\n""--------\n"">>> np.maximum([2, 3, 4], [1, 5, 2])\n""array([2, 5, 4])\n""\n"">>> np.maximum(np.eye(2), [0.5, 2]) # broadcasting\n""array([[ 1. ,  2. ],\n""       [ 0.5,  2. ]])\n""\n"">>> np.maximum([np.nan, 0, np.nan], [0, np.nan, np.nan])\n""array([nan, nan, nan])\n"">>> np.maximum(np.Inf, 1)\n""inf"
#define DOC_NUMPY_CORE_UMATH_MINIMUM "Element-wise minimum of array elements.\n""\n""Compare two arrays and returns a new array containing the element-wise\n""minima. If one of the elements being compared is a NaN, then that\n""element is returned. If both elements are NaNs then the first is\n""returned. The latter distinction is important for complex NaNs, which\n""are defined as at least one of the real or imaginary parts being a NaN.\n""The net effect is that NaNs are propagated.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    The arrays holding the elements to be compared.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray or scalar\n""    The minimum of `x1` and `x2`, element-wise.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""maximum :\n""    Element-wise maximum of two arrays, propagates NaNs.\n""fmin :\n""    Element-wise minimum of two arrays, ignores NaNs.\n""amin :\n""    The minimum value of an array along a given axis, propagates NaNs.\n""nanmin :\n""    The minimum value of an array along a given axis, ignores NaNs.\n""\n""fmax, amax, nanmax\n""\n""Notes\n""-----\n""The minimum is equivalent to ``np.where(x1 <= x2, x1, x2)`` when\n""neither x1 nor x2 are NaNs, but it is faster and does proper\n""broadcasting.\n""\n""Examples\n""--------\n"">>> np.minimum([2, 3, 4], [1, 5, 2])\n""array([1, 3, 2])\n""\n"">>> np.minimum(np.eye(2), [0.5, 2]) # broadcasting\n""array([[ 0.5,  0. ],\n""       [ 0. ,  1. ]])\n""\n"">>> np.minimum([np.nan, 0, np.nan],[0, np.nan, np.nan])\n""array([nan, nan, nan])\n"">>> np.minimum(-np.Inf, 1)\n""-inf"
#define DOC_NUMPY_CORE_UMATH_FMAX "Element-wise maximum of array elements.\n""\n""Compare two arrays and returns a new array containing the element-wise\n""maxima. If one of the elements being compared is a NaN, then the\n""non-nan element is returned. If both elements are NaNs then the first\n""is returned.  The latter distinction is important for complex NaNs,\n""which are defined as at least one of the real or imaginary parts being\n""a NaN. The net effect is that NaNs are ignored when possible.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    The arrays holding the elements to be compared.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray or scalar\n""    The maximum of `x1` and `x2`, element-wise.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""fmin :\n""    Element-wise minimum of two arrays, ignores NaNs.\n""maximum :\n""    Element-wise maximum of two arrays, propagates NaNs.\n""amax :\n""    The maximum value of an array along a given axis, propagates NaNs.\n""nanmax :\n""    The maximum value of an array along a given axis, ignores NaNs.\n""\n""minimum, amin, nanmin\n""\n""Notes\n""-----\n"".. versionadded:: 1.3.0\n""\n""The fmax is equivalent to ``np.where(x1 >= x2, x1, x2)`` when neither\n""x1 nor x2 are NaNs, but it is faster and does proper broadcasting.\n""\n""Examples\n""--------\n"">>> np.fmax([2, 3, 4], [1, 5, 2])\n""array([ 2.,  5.,  4.])\n""\n"">>> np.fmax(np.eye(2), [0.5, 2])\n""array([[ 1. ,  2. ],\n""       [ 0.5,  2. ]])\n""\n"">>> np.fmax([np.nan, 0, np.nan],[0, np.nan, np.nan])\n""array([ 0.,  0., nan])"
#define DOC_NUMPY_CORE_UMATH_FMIN "Element-wise minimum of array elements.\n""\n""Compare two arrays and returns a new array containing the element-wise\n""minima. If one of the elements being compared is a NaN, then the\n""non-nan element is returned. If both elements are NaNs then the first\n""is returned.  The latter distinction is important for complex NaNs,\n""which are defined as at least one of the real or imaginary parts being\n""a NaN. The net effect is that NaNs are ignored when possible.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    The arrays holding the elements to be compared.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray or scalar\n""    The minimum of `x1` and `x2`, element-wise.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""fmax :\n""    Element-wise maximum of two arrays, ignores NaNs.\n""minimum :\n""    Element-wise minimum of two arrays, propagates NaNs.\n""amin :\n""    The minimum value of an array along a given axis, propagates NaNs.\n""nanmin :\n""    The minimum value of an array along a given axis, ignores NaNs.\n""\n""maximum, amax, nanmax\n""\n""Notes\n""-----\n"".. versionadded:: 1.3.0\n""\n""The fmin is equivalent to ``np.where(x1 <= x2, x1, x2)`` when neither\n""x1 nor x2 are NaNs, but it is faster and does proper broadcasting.\n""\n""Examples\n""--------\n"">>> np.fmin([2, 3, 4], [1, 5, 2])\n""array([1, 3, 2])\n""\n"">>> np.fmin(np.eye(2), [0.5, 2])\n""array([[ 0.5,  0. ],\n""       [ 0. ,  1. ]])\n""\n"">>> np.fmin([np.nan, 0, np.nan],[0, np.nan, np.nan])\n""array([ 0.,  0., nan])"
#define DOC_NUMPY_CORE_UMATH_CLIP "Clip (limit) the values in an array.\n""\n""Given an interval, values outside the interval are clipped to\n""the interval edges.  For example, if an interval of ``[0, 1]``\n""is specified, values smaller than 0 become 0, and values larger\n""than 1 become 1.\n""\n""Equivalent to but faster than ``np.minimum(np.maximum(a, a_min), a_max)``.\n""\n""Parameters\n""----------\n""a : array_like\n""    Array containing elements to clip.\n""a_min : array_like\n""    Minimum value.\n""a_max : array_like\n""    Maximum value.\n""out : ndarray, optional\n""    The results will be placed in this array. It may be the input\n""    array for in-place clipping.  `out` must be of the right shape\n""    to hold the output.  Its type is preserved.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""See Also\n""--------\n""numpy.clip :\n""    Wrapper that makes the ``a_min`` and ``a_max`` arguments optional,\n""    dispatching to one of `~numpy.core.umath.clip`,\n""    `~numpy.core.umath.minimum`, and `~numpy.core.umath.maximum`.\n""\n""Returns\n""-------\n""clipped_array : ndarray\n""    An array with the elements of `a`, but where values\n""    < `a_min` are replaced with `a_min`, and those > `a_max`\n""    with `a_max`."
#define DOC_NUMPY_CORE_UMATH_MATMUL "Matrix product of two arrays.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    Input arrays, scalars not allowed.\n""out : ndarray, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that matches the signature `(n,k),(k,m)->(n,m)`. If not\n""    provided or None, a freshly-allocated array is returned.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""    .. versionadded:: 1.16\n""       Now handles ufunc kwargs\n""\n""Returns\n""-------\n""y : ndarray\n""    The matrix product of the inputs.\n""    This is a scalar only when both x1, x2 are 1-d vectors.\n""\n""Raises\n""------\n""ValueError\n""    If the last dimension of `x1` is not the same size as\n""    the second-to-last dimension of `x2`.\n""\n""    If a scalar value is passed in.\n""\n""See Also\n""--------\n""vdot : Complex-conjugating dot product.\n""tensordot : Sum products over arbitrary axes.\n""einsum : Einstein summation convention.\n""dot : alternative matrix product with different broadcasting rules.\n""\n""Notes\n""-----\n""\n""The behavior depends on the arguments in the following way.\n""\n""- If both arguments are 2-D they are multiplied like conventional\n""  matrices.\n""- If either argument is N-D, N > 2, it is treated as a stack of\n""  matrices residing in the last two indexes and broadcast accordingly.\n""- If the first argument is 1-D, it is promoted to a matrix by\n""  prepending a 1 to its dimensions. After matrix multiplication\n""  the prepended 1 is removed.\n""- If the second argument is 1-D, it is promoted to a matrix by\n""  appending a 1 to its dimensions. After matrix multiplication\n""  the appended 1 is removed.\n""\n""``matmul`` differs from ``dot`` in two important ways:\n""\n""- Multiplication by scalars is not allowed, use ``*`` instead.\n""- Stacks of matrices are broadcast together as if the matrices\n""  were elements, respecting the signature ``(n,k),(k,m)->(n,m)``:\n""\n""  >>> a = np.ones([9, 5, 7, 4])\n""  >>> c = np.ones([9, 5, 4, 3])\n""  >>> np.dot(a, c).shape\n""  (9, 5, 7, 9, 5, 3)\n""  >>> np.matmul(a, c).shape\n""  (9, 5, 7, 3)\n""  >>> # n is 7, k is 4, m is 3\n""\n""The matmul function implements the semantics of the ``@`` operator introduced\n""in Python 3.5 following :pep:`465`.\n""\n""Examples\n""--------\n""For 2-D arrays it is the matrix product:\n""\n"">>> a = np.array([[1, 0],\n""...               [0, 1]])\n"">>> b = np.array([[4, 1],\n""...               [2, 2]])\n"">>> np.matmul(a, b)\n""array([[4, 1],\n""       [2, 2]])\n""\n""For 2-D mixed with 1-D, the result is the usual.\n""\n"">>> a = np.array([[1, 0],\n""...               [0, 1]])\n"">>> b = np.array([1, 2])\n"">>> np.matmul(a, b)\n""array([1, 2])\n"">>> np.matmul(b, a)\n""array([1, 2])\n""\n""\n""Broadcasting is conventional for stacks of arrays\n""\n"">>> a = np.arange(2 * 2 * 4).reshape((2, 2, 4))\n"">>> b = np.arange(2 * 2 * 4).reshape((2, 4, 2))\n"">>> np.matmul(a,b).shape\n""(2, 2, 2)\n"">>> np.matmul(a, b)[0, 1, 1]\n""98\n"">>> sum(a[0, 1, :] * b[0 , :, 1])\n""98\n""\n""Vector, vector returns the scalar inner product, but neither argument\n""is complex-conjugated:\n""\n"">>> np.matmul([2j, 3j], [2j, 3j])\n""(-13+0j)\n""\n""Scalar multiplication raises an error.\n""\n"">>> np.matmul([1,2], 3)\n""Traceback (most recent call last):\n""...\n""ValueError: matmul: Input operand 1 does not have enough dimensions ...\n""\n""The ``@`` operator can be used as a shorthand for ``np.matmul`` on\n""ndarrays.\n""\n"">>> x1 = np.array([2j, 3j])\n"">>> x2 = np.array([2j, 3j])\n"">>> x1 @ x2\n""(-13+0j)\n""\n"".. versionadded:: 1.10.0"
#define DOC_NUMPY_CORE_UMATH_MODF "Return the fractional and integral parts of an array, element-wise.\n""\n""The fractional and integral parts are negative if the given number is\n""negative.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input array.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y1 : ndarray\n""    Fractional part of `x`.\n""    This is a scalar if `x` is a scalar.\n""y2 : ndarray\n""    Integral part of `x`.\n""    This is a scalar if `x` is a scalar.\n""\n""Notes\n""-----\n""For integer input the return values are floats.\n""\n""See Also\n""--------\n""divmod : ``divmod(x, 1)`` is equivalent to ``modf`` with the return values\n""         switched, except it always has a positive remainder.\n""\n""Examples\n""--------\n"">>> np.modf([0, 3.5])\n""(array([ 0. ,  0.5]), array([ 0.,  3.]))\n"">>> np.modf(-0.5)\n""(-0.5, -0)"
#define DOC_NUMPY_CORE_UMATH_MULTIPLY "Multiply arguments element-wise.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    Input arrays to be multiplied.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    The product of `x1` and `x2`, element-wise.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""Notes\n""-----\n""Equivalent to `x1` * `x2` in terms of array broadcasting.\n""\n""Examples\n""--------\n"">>> np.multiply(2.0, 4.0)\n""8.0\n""\n"">>> x1 = np.arange(9.0).reshape((3, 3))\n"">>> x2 = np.arange(3.0)\n"">>> np.multiply(x1, x2)\n""array([[  0.,   1.,   4.],\n""       [  0.,   4.,  10.],\n""       [  0.,   7.,  16.]])\n""\n""The ``*`` operator can be used as a shorthand for ``np.multiply`` on\n""ndarrays.\n""\n"">>> x1 = np.arange(9.0).reshape((3, 3))\n"">>> x2 = np.arange(3.0)\n"">>> x1 * x2\n""array([[  0.,   1.,   4.],\n""       [  0.,   4.,  10.],\n""       [  0.,   7.,  16.]])"
#define DOC_NUMPY_CORE_UMATH_NEGATIVE "Numerical negative, element-wise.\n""\n""Parameters\n""----------\n""x : array_like or scalar\n""    Input array.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray or scalar\n""    Returned array or scalar: `y = -x`.\n""    This is a scalar if `x` is a scalar.\n""\n""Examples\n""--------\n"">>> np.negative([1.,-1.])\n""array([-1.,  1.])\n""\n""The unary ``-`` operator can be used as a shorthand for ``np.negative`` on\n""ndarrays.\n""\n"">>> x1 = np.array(([1., -1.]))\n"">>> -x1\n""array([-1.,  1.])"
#define DOC_NUMPY_CORE_UMATH_POSITIVE "Numerical positive, element-wise.\n""\n"".. versionadded:: 1.13.0\n""\n""Parameters\n""----------\n""x : array_like or scalar\n""    Input array.\n""\n""Returns\n""-------\n""y : ndarray or scalar\n""    Returned array or scalar: `y = +x`.\n""    This is a scalar if `x` is a scalar.\n""\n""Notes\n""-----\n""Equivalent to `x.copy()`, but only defined for types that support\n""arithmetic.\n""\n""Examples\n""--------\n""\n"">>> x1 = np.array(([1., -1.]))\n"">>> np.positive(x1)\n""array([ 1., -1.])\n""\n""The unary ``+`` operator can be used as a shorthand for ``np.positive`` on\n""ndarrays.\n""\n"">>> x1 = np.array(([1., -1.]))\n"">>> +x1\n""array([ 1., -1.])"
#define DOC_NUMPY_CORE_UMATH_NOT_EQUAL "Return (x1 != x2) element-wise.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    Input arrays.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    Output array, element-wise comparison of `x1` and `x2`.\n""    Typically of type bool, unless ``dtype=object`` is passed.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""equal, greater, greater_equal, less, less_equal\n""\n""Examples\n""--------\n"">>> np.not_equal([1.,2.], [1., 3.])\n""array([False,  True])\n"">>> np.not_equal([1, 2], [[1, 3],[1, 4]])\n""array([[False,  True],\n""       [False,  True]])\n""\n""The ``!=`` operator can be used as a shorthand for ``np.not_equal`` on\n""ndarrays.\n""\n"">>> a = np.array([1., 2.])\n"">>> b = np.array([1., 3.])\n"">>> a != b\n""array([False,  True])"
#define DOC_NUMPY_CORE_UMATH__ONES_LIKE "This function used to be the numpy.ones_like, but now a specific\n""function for that has been written for consistency with the other\n""*_like functions. It is only used internally in a limited fashion now.\n""\n""See Also\n""--------\n""ones_like"
#define DOC_NUMPY_CORE_UMATH_POWER "First array elements raised to powers from second array, element-wise.\n""\n""Raise each base in `x1` to the positionally-corresponding power in\n""`x2`.  `x1` and `x2` must be broadcastable to the same shape.\n""\n""An integer type raised to a negative integer power will raise a\n""``ValueError``.\n""\n""Negative values raised to a non-integral value will return ``nan``.\n""To get complex results, cast the input to complex, or specify the\n""``dtype`` to be ``complex`` (see the example below).\n""\n""Parameters\n""----------\n""x1 : array_like\n""    The bases.\n""x2 : array_like\n""    The exponents.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    The bases in `x1` raised to the exponents in `x2`.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""float_power : power function that promotes integers to float\n""\n""Examples\n""--------\n""Cube each element in an array.\n""\n"">>> x1 = np.arange(6)\n"">>> x1\n""[0, 1, 2, 3, 4, 5]\n"">>> np.power(x1, 3)\n""array([  0,   1,   8,  27,  64, 125])\n""\n""Raise the bases to different exponents.\n""\n"">>> x2 = [1.0, 2.0, 3.0, 3.0, 2.0, 1.0]\n"">>> np.power(x1, x2)\n""array([  0.,   1.,   8.,  27.,  16.,   5.])\n""\n""The effect of broadcasting.\n""\n"">>> x2 = np.array([[1, 2, 3, 3, 2, 1], [1, 2, 3, 3, 2, 1]])\n"">>> x2\n""array([[1, 2, 3, 3, 2, 1],\n""       [1, 2, 3, 3, 2, 1]])\n"">>> np.power(x1, x2)\n""array([[ 0,  1,  8, 27, 16,  5],\n""       [ 0,  1,  8, 27, 16,  5]])\n""\n""The ``**`` operator can be used as a shorthand for ``np.power`` on\n""ndarrays.\n""\n"">>> x2 = np.array([1, 2, 3, 3, 2, 1])\n"">>> x1 = np.arange(6)\n"">>> x1 ** x2\n""array([ 0,  1,  8, 27, 16,  5])\n""\n""Negative values raised to a non-integral value will result in ``nan``\n""(and a warning will be generated).\n""\n"">>> x3 = np.array([-1.0, -4.0])\n"">>> with np.errstate(invalid=\'ignore\'):\n""...     p = np.power(x3, 1.5)\n""...\n"">>> p\n""array([nan, nan])\n""\n""To get complex results, give the argument ``dtype=complex``.\n""\n"">>> np.power(x3, 1.5, dtype=complex)\n""array([-1.83697020e-16-1.j, -1.46957616e-15-8.j])"
#define DOC_NUMPY_CORE_UMATH_FLOAT_POWER "First array elements raised to powers from second array, element-wise.\n""\n""Raise each base in `x1` to the positionally-corresponding power in `x2`.\n""`x1` and `x2` must be broadcastable to the same shape. This differs from\n""the power function in that integers, float16, and float32  are promoted to\n""floats with a minimum precision of float64 so that the result is always\n""inexact.  The intent is that the function will return a usable result for\n""negative powers and seldom overflow for positive powers.\n""\n""Negative values raised to a non-integral value will return ``nan``.\n""To get complex results, cast the input to complex, or specify the\n""``dtype`` to be ``complex`` (see the example below).\n""\n"".. versionadded:: 1.12.0\n""\n""Parameters\n""----------\n""x1 : array_like\n""    The bases.\n""x2 : array_like\n""    The exponents.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    The bases in `x1` raised to the exponents in `x2`.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""power : power function that preserves type\n""\n""Examples\n""--------\n""Cube each element in a list.\n""\n"">>> x1 = range(6)\n"">>> x1\n""[0, 1, 2, 3, 4, 5]\n"">>> np.float_power(x1, 3)\n""array([   0.,    1.,    8.,   27.,   64.,  125.])\n""\n""Raise the bases to different exponents.\n""\n"">>> x2 = [1.0, 2.0, 3.0, 3.0, 2.0, 1.0]\n"">>> np.float_power(x1, x2)\n""array([  0.,   1.,   8.,  27.,  16.,   5.])\n""\n""The effect of broadcasting.\n""\n"">>> x2 = np.array([[1, 2, 3, 3, 2, 1], [1, 2, 3, 3, 2, 1]])\n"">>> x2\n""array([[1, 2, 3, 3, 2, 1],\n""       [1, 2, 3, 3, 2, 1]])\n"">>> np.float_power(x1, x2)\n""array([[  0.,   1.,   8.,  27.,  16.,   5.],\n""       [  0.,   1.,   8.,  27.,  16.,   5.]])\n""\n""Negative values raised to a non-integral value will result in ``nan``\n""(and a warning will be generated).\n""\n"">>> x3 = np.array([-1, -4])\n"">>> with np.errstate(invalid=\'ignore\'):\n""...     p = np.float_power(x3, 1.5)\n""...\n"">>> p\n""array([nan, nan])\n""\n""To get complex results, give the argument ``dtype=complex``.\n""\n"">>> np.float_power(x3, 1.5, dtype=complex)\n""array([-1.83697020e-16-1.j, -1.46957616e-15-8.j])"
#define DOC_NUMPY_CORE_UMATH_RADIANS "Convert angles from degrees to radians.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input array in degrees.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    The corresponding radian values.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""deg2rad : equivalent function\n""\n""Examples\n""--------\n""Convert a degree array to radians\n""\n"">>> deg = np.arange(12.) * 30.\n"">>> np.radians(deg)\n""array([ 0.        ,  0.52359878,  1.04719755,  1.57079633,  2.0943951 ,\n""        2.61799388,  3.14159265,  3.66519143,  4.1887902 ,  4.71238898,\n""        5.23598776,  5.75958653])\n""\n"">>> out = np.zeros((deg.shape))\n"">>> ret = np.radians(deg, out)\n"">>> ret is out\n""True"
#define DOC_NUMPY_CORE_UMATH_DEG2RAD "Convert angles from degrees to radians.\n""\n""Parameters\n""----------\n""x : array_like\n""    Angles in degrees.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    The corresponding angle in radians.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""rad2deg : Convert angles from radians to degrees.\n""unwrap : Remove large jumps in angle by wrapping.\n""\n""Notes\n""-----\n"".. versionadded:: 1.3.0\n""\n""``deg2rad(x)`` is ``x * pi / 180``.\n""\n""Examples\n""--------\n"">>> np.deg2rad(180)\n""3.1415926535897931"
#define DOC_NUMPY_CORE_UMATH_RECIPROCAL "Return the reciprocal of the argument, element-wise.\n""\n""Calculates ``1/x``.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input array.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    Return array.\n""    This is a scalar if `x` is a scalar.\n""\n""Notes\n""-----\n"".. note::\n""    This function is not designed to work with integers.\n""\n""For integer arguments with absolute value larger than 1 the result is\n""always zero because of the way Python handles integer division.  For\n""integer zero the result is an overflow.\n""\n""Examples\n""--------\n"">>> np.reciprocal(2.)\n""0.5\n"">>> np.reciprocal([1, 2., 3.33])\n""array([ 1.       ,  0.5      ,  0.3003003])"
#define DOC_NUMPY_CORE_UMATH_REMAINDER "Returns the element-wise remainder of division.\n""\n""Computes the remainder complementary to the `floor_divide` function.  It is\n""equivalent to the Python modulus operator``x1 % x2`` and has the same sign\n""as the divisor `x2`. The MATLAB function equivalent to ``np.remainder``\n""is ``mod``.\n""\n"".. warning::\n""\n""    This should not be confused with:\n""\n""    * Python 3.7\'s `math.remainder` and C\'s ``remainder``, which\n""      computes the IEEE remainder, which are the complement to\n""      ``round(x1 / x2)``.\n""    * The MATLAB ``rem`` function and or the C ``%`` operator which is the\n""      complement to ``int(x1 / x2)``.\n""\n""Parameters\n""----------\n""x1 : array_like\n""    Dividend array.\n""x2 : array_like\n""    Divisor array.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    The element-wise remainder of the quotient ``floor_divide(x1, x2)``.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""floor_divide : Equivalent of Python ``//`` operator.\n""divmod : Simultaneous floor division and remainder.\n""fmod : Equivalent of the MATLAB ``rem`` function.\n""divide, floor\n""\n""Notes\n""-----\n""Returns 0 when `x2` is 0 and both `x1` and `x2` are (arrays of)\n""integers.\n""``mod`` is an alias of ``remainder``.\n""\n""Examples\n""--------\n"">>> np.remainder([4, 7], [2, 3])\n""array([0, 1])\n"">>> np.remainder(np.arange(7), 5)\n""array([0, 1, 2, 3, 4, 0, 1])\n""\n""The ``%`` operator can be used as a shorthand for ``np.remainder`` on\n""ndarrays.\n""\n"">>> x1 = np.arange(7)\n"">>> x1 % 5\n""array([0, 1, 2, 3, 4, 0, 1])"
#define DOC_NUMPY_CORE_UMATH_DIVMOD "Return element-wise quotient and remainder simultaneously.\n""\n"".. versionadded:: 1.13.0\n""\n""``np.divmod(x, y)`` is equivalent to ``(x // y, x % y)``, but faster\n""because it avoids redundant work. It is used to implement the Python\n""built-in function ``divmod`` on NumPy arrays.\n""\n""Parameters\n""----------\n""x1 : array_like\n""    Dividend array.\n""x2 : array_like\n""    Divisor array.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out1 : ndarray\n""    Element-wise quotient resulting from floor division.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""out2 : ndarray\n""    Element-wise remainder from floor division.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""floor_divide : Equivalent to Python\'s ``//`` operator.\n""remainder : Equivalent to Python\'s ``%`` operator.\n""modf : Equivalent to ``divmod(x, 1)`` for positive ``x`` with the return\n""       values switched.\n""\n""Examples\n""--------\n"">>> np.divmod(np.arange(5), 3)\n""(array([0, 0, 0, 1, 1]), array([0, 1, 2, 0, 1]))\n""\n""The `divmod` function can be used as a shorthand for ``np.divmod`` on\n""ndarrays.\n""\n"">>> x = np.arange(5)\n"">>> divmod(x, 3)\n""(array([0, 0, 0, 1, 1]), array([0, 1, 2, 0, 1]))"
#define DOC_NUMPY_CORE_UMATH_RIGHT_SHIFT "Shift the bits of an integer to the right.\n""\n""Bits are shifted to the right `x2`.  Because the internal\n""representation of numbers is in binary format, this operation is\n""equivalent to dividing `x1` by ``2**x2``.\n""\n""Parameters\n""----------\n""x1 : array_like, int\n""    Input values.\n""x2 : array_like, int\n""    Number of bits to remove at the right of `x1`.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray, int\n""    Return `x1` with bits shifted `x2` times to the right.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""left_shift : Shift the bits of an integer to the left.\n""binary_repr : Return the binary representation of the input number\n""    as a string.\n""\n""Examples\n""--------\n"">>> np.binary_repr(10)\n""\'1010\'\n"">>> np.right_shift(10, 1)\n""5\n"">>> np.binary_repr(5)\n""\'101\'\n""\n"">>> np.right_shift(10, [1,2,3])\n""array([5, 2, 1])\n""\n""The ``>>`` operator can be used as a shorthand for ``np.right_shift`` on\n""ndarrays.\n""\n"">>> x1 = 10\n"">>> x2 = np.array([1,2,3])\n"">>> x1 >> x2\n""array([5, 2, 1])"
#define DOC_NUMPY_CORE_UMATH_RINT "Round elements of the array to the nearest integer.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input array.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    Output array is same shape and type as `x`.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""fix, ceil, floor, trunc\n""\n""Notes\n""-----\n""For values exactly halfway between rounded decimal values, NumPy\n""rounds to the nearest even value. Thus 1.5 and 2.5 round to 2.0,\n""-0.5 and 0.5 round to 0.0, etc.\n""\n""Examples\n""--------\n"">>> a = np.array([-1.7, -1.5, -0.2, 0.2, 1.5, 1.7, 2.0])\n"">>> np.rint(a)\n""array([-2., -2., -0.,  0.,  2.,  2.,  2.])"
#define DOC_NUMPY_CORE_UMATH_SIGN "Returns an element-wise indication of the sign of a number.\n""\n""The `sign` function returns ``-1 if x < 0, 0 if x==0, 1 if x > 0``.  nan\n""is returned for nan inputs.\n""\n""For complex inputs, the `sign` function returns\n""``sign(x.real) + 0j if x.real != 0 else sign(x.imag) + 0j``.\n""\n""complex(nan, 0) is returned for complex nan inputs.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input values.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    The sign of `x`.\n""    This is a scalar if `x` is a scalar.\n""\n""Notes\n""-----\n""There is more than one definition of sign in common use for complex\n""numbers.  The definition used here is equivalent to :math:`x/\\sqrt{x*x}`\n""which is different from a common alternative, :math:`x/|x|`.\n""\n""Examples\n""--------\n"">>> np.sign([-5., 4.5])\n""array([-1.,  1.])\n"">>> np.sign(0)\n""0\n"">>> np.sign(5-2j)\n""(1+0j)"
#define DOC_NUMPY_CORE_UMATH_SIGNBIT "Returns element-wise True where signbit is set (less than zero).\n""\n""Parameters\n""----------\n""x : array_like\n""    The input value(s).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""result : ndarray of bool\n""    Output array, or reference to `out` if that was supplied.\n""    This is a scalar if `x` is a scalar.\n""\n""Examples\n""--------\n"">>> np.signbit(-1.2)\n""True\n"">>> np.signbit(np.array([1, -2.3, 2.1]))\n""array([False,  True, False])"
#define DOC_NUMPY_CORE_UMATH_COPYSIGN "Change the sign of x1 to that of x2, element-wise.\n""\n""If `x2` is a scalar, its sign will be copied to all elements of `x1`.\n""\n""Parameters\n""----------\n""x1 : array_like\n""    Values to change the sign of.\n""x2 : array_like\n""    The sign of `x2` is copied to `x1`.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    The values of `x1` with the sign of `x2`.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""Examples\n""--------\n"">>> np.copysign(1.3, -1)\n""-1.3\n"">>> 1/np.copysign(0, 1)\n""inf\n"">>> 1/np.copysign(0, -1)\n""-inf\n""\n"">>> np.copysign([-1, 0, 1], -1.1)\n""array([-1., -0., -1.])\n"">>> np.copysign([-1, 0, 1], np.arange(3)-1)\n""array([-1.,  0.,  1.])"
#define DOC_NUMPY_CORE_UMATH_NEXTAFTER "Return the next floating-point value after x1 towards x2, element-wise.\n""\n""Parameters\n""----------\n""x1 : array_like\n""    Values to find the next representable value of.\n""x2 : array_like\n""    The direction where to look for the next representable value of `x1`.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    The next representable values of `x1` in the direction of `x2`.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""Examples\n""--------\n"">>> eps = np.finfo(np.float64).eps\n"">>> np.nextafter(1, 2) == eps + 1\n""True\n"">>> np.nextafter([1, 2], [2, 1]) == [eps + 1, 2 - eps]\n""array([ True,  True])"
#define DOC_NUMPY_CORE_UMATH_SPACING "Return the distance between x and the nearest adjacent number.\n""\n""Parameters\n""----------\n""x : array_like\n""    Values to find the spacing of.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    The spacing of values of `x`.\n""    This is a scalar if `x` is a scalar.\n""\n""Notes\n""-----\n""It can be considered as a generalization of EPS:\n""``spacing(np.float64(1)) == np.finfo(np.float64).eps``, and there\n""should not be any representable number between ``x + spacing(x)`` and\n""x for any finite x.\n""\n""Spacing of +- inf and NaN is NaN.\n""\n""Examples\n""--------\n"">>> np.spacing(1) == np.finfo(np.float64).eps\n""True"
#define DOC_NUMPY_CORE_UMATH_SIN "Trigonometric sine, element-wise.\n""\n""Parameters\n""----------\n""x : array_like\n""    Angle, in radians (:math:`2 \\pi` rad equals 360 degrees).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : array_like\n""    The sine of each element of x.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""arcsin, sinh, cos\n""\n""Notes\n""-----\n""The sine is one of the fundamental functions of trigonometry (the\n""mathematical study of triangles).  Consider a circle of radius 1\n""centered on the origin.  A ray comes in from the :math:`+x` axis, makes\n""an angle at the origin (measured counter-clockwise from that axis), and\n""departs from the origin.  The :math:`y` coordinate of the outgoing\n""ray\'s intersection with the unit circle is the sine of that angle.  It\n""ranges from -1 for :math:`x=3\\pi / 2` to +1 for :math:`\\pi / 2.`  The\n""function has zeroes where the angle is a multiple of :math:`\\pi`.\n""Sines of angles between :math:`\\pi` and :math:`2\\pi` are negative.\n""The numerous properties of the sine and related functions are included\n""in any standard trigonometry text.\n""\n""Examples\n""--------\n""Print sine of one angle:\n""\n"">>> np.sin(np.pi/2.)\n""1.0\n""\n""Print sines of an array of angles given in degrees:\n""\n"">>> np.sin(np.array((0., 30., 45., 60., 90.)) * np.pi / 180. )\n""array([ 0.        ,  0.5       ,  0.70710678,  0.8660254 ,  1.        ])\n""\n""Plot the sine function:\n""\n"">>> import matplotlib.pylab as plt\n"">>> x = np.linspace(-np.pi, np.pi, 201)\n"">>> plt.plot(x, np.sin(x))\n"">>> plt.xlabel(\'Angle [rad]\')\n"">>> plt.ylabel(\'sin(x)\')\n"">>> plt.axis(\'tight\')\n"">>> plt.show()"
#define DOC_NUMPY_CORE_UMATH_SINH "Hyperbolic sine, element-wise.\n""\n""Equivalent to ``1/2 * (np.exp(x) - np.exp(-x))`` or\n""``-1j * np.sin(1j*x)``.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input array.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    The corresponding hyperbolic sine values.\n""    This is a scalar if `x` is a scalar.\n""\n""Notes\n""-----\n""If `out` is provided, the function writes the result into it,\n""and returns a reference to `out`.  (See Examples)\n""\n""References\n""----------\n""M. Abramowitz and I. A. Stegun, Handbook of Mathematical Functions.\n""New York, NY: Dover, 1972, pg. 83.\n""\n""Examples\n""--------\n"">>> np.sinh(0)\n""0.0\n"">>> np.sinh(np.pi*1j/2)\n""1j\n"">>> np.sinh(np.pi*1j) # (exact value is 0)\n""1.2246063538223773e-016j\n"">>> # Discrepancy due to vagaries of floating point arithmetic.\n""\n"">>> # Example of providing the optional output parameter\n"">>> out1 = np.array([0], dtype=\'d\')\n"">>> out2 = np.sinh([0.1], out1)\n"">>> out2 is out1\n""True\n""\n"">>> # Example of ValueError due to provision of shape mis-matched `out`\n"">>> np.sinh(np.zeros((3,3)),np.zeros((2,2)))\n""Traceback (most recent call last):\n""  File \"<stdin>\", line 1, in <module>\n""ValueError: operands could not be broadcast together with shapes (3,3) (2,2)"
#define DOC_NUMPY_CORE_UMATH_SQRT "Return the non-negative square-root of an array, element-wise.\n""\n""Parameters\n""----------\n""x : array_like\n""    The values whose square-roots are required.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    An array of the same shape as `x`, containing the positive\n""    square-root of each element in `x`.  If any element in `x` is\n""    complex, a complex array is returned (and the square-roots of\n""    negative reals are calculated).  If all of the elements in `x`\n""    are real, so is `y`, with negative elements returning ``nan``.\n""    If `out` was provided, `y` is a reference to it.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""emath.sqrt\n""    A version which returns complex numbers when given negative reals.\n""    Note: 0.0 and -0.0 are handled differently for complex inputs.\n""\n""Notes\n""-----\n""*sqrt* has--consistent with common convention--as its branch cut the\n""real \"interval\" [`-inf`, 0), and is continuous from above on it.\n""A branch cut is a curve in the complex plane across which a given\n""complex function fails to be continuous.\n""\n""Examples\n""--------\n"">>> np.sqrt([1,4,9])\n""array([ 1.,  2.,  3.])\n""\n"">>> np.sqrt([4, -1, -3+4J])\n""array([ 2.+0.j,  0.+1.j,  1.+2.j])\n""\n"">>> np.sqrt([4, -1, np.inf])\n""array([ 2., nan, inf])"
#define DOC_NUMPY_CORE_UMATH_CBRT "Return the cube-root of an array, element-wise.\n""\n"".. versionadded:: 1.10.0\n""\n""Parameters\n""----------\n""x : array_like\n""    The values whose cube-roots are required.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    An array of the same shape as `x`, containing the cube\n""    cube-root of each element in `x`.\n""    If `out` was provided, `y` is a reference to it.\n""    This is a scalar if `x` is a scalar.\n""\n""\n""Examples\n""--------\n"">>> np.cbrt([1,8,27])\n""array([ 1.,  2.,  3.])"
#define DOC_NUMPY_CORE_UMATH_SQUARE "Return the element-wise square of the input.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input data.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""out : ndarray or scalar\n""    Element-wise `x*x`, of the same shape and dtype as `x`.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""numpy.linalg.matrix_power\n""sqrt\n""power\n""\n""Examples\n""--------\n"">>> np.square([-1j, 1])\n""array([-1.-0.j,  1.+0.j])"
#define DOC_NUMPY_CORE_UMATH_SUBTRACT "Subtract arguments, element-wise.\n""\n""Parameters\n""----------\n""x1, x2 : array_like\n""    The arrays to be subtracted from each other.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    The difference of `x1` and `x2`, element-wise.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""Notes\n""-----\n""Equivalent to ``x1 - x2`` in terms of array broadcasting.\n""\n""Examples\n""--------\n"">>> np.subtract(1.0, 4.0)\n""-3.0\n""\n"">>> x1 = np.arange(9.0).reshape((3, 3))\n"">>> x2 = np.arange(3.0)\n"">>> np.subtract(x1, x2)\n""array([[ 0.,  0.,  0.],\n""       [ 3.,  3.,  3.],\n""       [ 6.,  6.,  6.]])\n""\n""The ``-`` operator can be used as a shorthand for ``np.subtract`` on\n""ndarrays.\n""\n"">>> x1 = np.arange(9.0).reshape((3, 3))\n"">>> x2 = np.arange(3.0)\n"">>> x1 - x2\n""array([[0., 0., 0.],\n""       [3., 3., 3.],\n""       [6., 6., 6.]])"
#define DOC_NUMPY_CORE_UMATH_TAN "Compute tangent element-wise.\n""\n""Equivalent to ``np.sin(x)/np.cos(x)`` element-wise.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input array.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    The corresponding tangent values.\n""    This is a scalar if `x` is a scalar.\n""\n""Notes\n""-----\n""If `out` is provided, the function writes the result into it,\n""and returns a reference to `out`.  (See Examples)\n""\n""References\n""----------\n""M. Abramowitz and I. A. Stegun, Handbook of Mathematical Functions.\n""New York, NY: Dover, 1972.\n""\n""Examples\n""--------\n"">>> from math import pi\n"">>> np.tan(np.array([-pi,pi/2,pi]))\n""array([  1.22460635e-16,   1.63317787e+16,  -1.22460635e-16])\n"">>>\n"">>> # Example of providing the optional output parameter illustrating\n"">>> # that what is returned is a reference to said parameter\n"">>> out1 = np.array([0], dtype=\'d\')\n"">>> out2 = np.cos([0.1], out1)\n"">>> out2 is out1\n""True\n"">>>\n"">>> # Example of ValueError due to provision of shape mis-matched `out`\n"">>> np.cos(np.zeros((3,3)),np.zeros((2,2)))\n""Traceback (most recent call last):\n""  File \"<stdin>\", line 1, in <module>\n""ValueError: operands could not be broadcast together with shapes (3,3) (2,2)"
#define DOC_NUMPY_CORE_UMATH_TANH "Compute hyperbolic tangent element-wise.\n""\n""Equivalent to ``np.sinh(x)/np.cosh(x)`` or ``-1j * np.tan(1j*x)``.\n""\n""Parameters\n""----------\n""x : array_like\n""    Input array.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray\n""    The corresponding hyperbolic tangent values.\n""    This is a scalar if `x` is a scalar.\n""\n""Notes\n""-----\n""If `out` is provided, the function writes the result into it,\n""and returns a reference to `out`.  (See Examples)\n""\n""References\n""----------\n"".. [1] M. Abramowitz and I. A. Stegun, Handbook of Mathematical Functions.\n""       New York, NY: Dover, 1972, pg. 83.\n""       https://personal.math.ubc.ca/~cbm/aands/page_83.htm\n""\n"".. [2] Wikipedia, \"Hyperbolic function\",\n""       https://en.wikipedia.org/wiki/Hyperbolic_function\n""\n""Examples\n""--------\n"">>> np.tanh((0, np.pi*1j, np.pi*1j/2))\n""array([ 0. +0.00000000e+00j,  0. -1.22460635e-16j,  0. +1.63317787e+16j])\n""\n"">>> # Example of providing the optional output parameter illustrating\n"">>> # that what is returned is a reference to said parameter\n"">>> out1 = np.array([0], dtype=\'d\')\n"">>> out2 = np.tanh([0.1], out1)\n"">>> out2 is out1\n""True\n""\n"">>> # Example of ValueError due to provision of shape mis-matched `out`\n"">>> np.tanh(np.zeros((3,3)),np.zeros((2,2)))\n""Traceback (most recent call last):\n""  File \"<stdin>\", line 1, in <module>\n""ValueError: operands could not be broadcast together with shapes (3,3) (2,2)"
#define DOC_NUMPY_CORE_UMATH_FREXP "Decompose the elements of x into mantissa and twos exponent.\n""\n""Returns (`mantissa`, `exponent`), where ``x = mantissa * 2**exponent``.\n""The mantissa lies in the open interval(-1, 1), while the twos\n""exponent is a signed integer.\n""\n""Parameters\n""----------\n""x : array_like\n""    Array of numbers to be decomposed.\n""out1 : ndarray, optional\n""    Output array for the mantissa. Must have the same shape as `x`.\n""out2 : ndarray, optional\n""    Output array for the exponent. Must have the same shape as `x`.\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""mantissa : ndarray\n""    Floating values between -1 and 1.\n""    This is a scalar if `x` is a scalar.\n""exponent : ndarray\n""    Integer exponents of 2.\n""    This is a scalar if `x` is a scalar.\n""\n""See Also\n""--------\n""ldexp : Compute ``y = x1 * 2**x2``, the inverse of `frexp`.\n""\n""Notes\n""-----\n""Complex dtypes are not supported, they will raise a TypeError.\n""\n""Examples\n""--------\n"">>> x = np.arange(9)\n"">>> y1, y2 = np.frexp(x)\n"">>> y1\n""array([ 0.   ,  0.5  ,  0.5  ,  0.75 ,  0.5  ,  0.625,  0.75 ,  0.875,\n""        0.5  ])\n"">>> y2\n""array([0, 1, 2, 2, 3, 3, 3, 3, 4])\n"">>> y1 * 2**y2\n""array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.])"
#define DOC_NUMPY_CORE_UMATH_LDEXP "Returns x1 * 2**x2, element-wise.\n""\n""The mantissas `x1` and twos exponents `x2` are used to construct\n""floating point numbers ``x1 * 2**x2``.\n""\n""Parameters\n""----------\n""x1 : array_like\n""    Array of multipliers.\n""x2 : array_like, int\n""    Array of twos exponents.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""out : ndarray, None, or tuple of ndarray and None, optional\n""    A location into which the result is stored. If provided, it must have\n""    a shape that the inputs broadcast to. If not provided or None,\n""    a freshly-allocated array is returned. A tuple (possible only as a\n""    keyword argument) must have length equal to the number of outputs.\n""where : array_like, optional\n""    This condition is broadcast over the input. At locations where the\n""    condition is True, the `out` array will be set to the ufunc result.\n""    Elsewhere, the `out` array will retain its original value.\n""    Note that if an uninitialized `out` array is created via the default\n""    ``out=None``, locations within it where the condition is False will\n""    remain uninitialized.\n""**kwargs\n""    For other keyword-only arguments, see the\n""    :ref:`ufunc docs <ufuncs.kwargs>`.\n""\n""Returns\n""-------\n""y : ndarray or scalar\n""    The result of ``x1 * 2**x2``.\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""frexp : Return (y1, y2) from ``x = y1 * 2**y2``, inverse to `ldexp`.\n""\n""Notes\n""-----\n""Complex dtypes are not supported, they will raise a TypeError.\n""\n""`ldexp` is useful as the inverse of `frexp`, if used by itself it is\n""more clear to simply use the expression ``x1 * 2**x2``.\n""\n""Examples\n""--------\n"">>> np.ldexp(5, np.arange(4))\n""array([ 5., 10., 20., 40.], dtype=float16)\n""\n"">>> x = np.arange(6)\n"">>> np.ldexp(*np.frexp(x))\n""array([ 0.,  1.,  2.,  3.,  4.,  5.])"
#define DOC_NUMPY_CORE_UMATH_GCD "Returns the greatest common divisor of ``|x1|`` and ``|x2|``\n""\n""Parameters\n""----------\n""x1, x2 : array_like, int\n""    Arrays of values.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""\n""Returns\n""-------\n""y : ndarray or scalar\n""    The greatest common divisor of the absolute value of the inputs\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""lcm : The lowest common multiple\n""\n""Examples\n""--------\n"">>> np.gcd(12, 20)\n""4\n"">>> np.gcd.reduce([15, 25, 35])\n""5\n"">>> np.gcd(np.arange(6), 20)\n""array([20,  1,  2,  1,  4,  5])"
#define DOC_NUMPY_CORE_UMATH_LCM "Returns the lowest common multiple of ``|x1|`` and ``|x2|``\n""\n""Parameters\n""----------\n""x1, x2 : array_like, int\n""    Arrays of values.\n""    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n""    shape (which becomes the shape of the output).\n""\n""Returns\n""-------\n""y : ndarray or scalar\n""    The lowest common multiple of the absolute value of the inputs\n""    This is a scalar if both `x1` and `x2` are scalars.\n""\n""See Also\n""--------\n""gcd : The greatest common divisor\n""\n""Examples\n""--------\n"">>> np.lcm(12, 20)\n""60\n"">>> np.lcm.reduce([3, 12, 20])\n""60\n"">>> np.lcm.reduce([40, 12, 20])\n""120\n"">>> np.lcm(np.arange(6), 20)\n""array([ 0, 20, 20, 60, 20, 20])"
#endif //NUMPY_CORE_INCLUDE__UMATH_DOC_GENERATED_H
