        subroutine id_frand(n,r)
c
c       generates n pseudorandom numbers drawn uniformly from [0,1],
c       via a very efficient lagged Fibonnaci method.
c       Unlike routine id_srand, the present routine requires that
c       n be at least 55.
c
c       input:
c       n -- number of pseudorandom numbers to generate
c
c       output:
c       r -- array of pseudorandom numbers
c
c       _N.B._: n must be at least 55.
c
c       reference:
c       Press, Teukolsky, Vetterling, Flannery, "Numerical Recipes,"
c            3rd edition, Cambridge University Press, 2007,
c            Section 7.1.5.
c
        implicit none
        integer n,k
        real*8 r(n),s(55),t(55),s0(55),x
        save
c
        data s/
     1  0.2793574644042651d0, 0.1882566493961346d0,
     2  0.5202478134503912d0, 0.7568505373052146d0,
     3  0.5682465992936152d0, 0.5153148754383294d0,
     4  0.7806554095454596d0, 1.982474428974643d-2,
     5  0.2520464262278498d0, 0.6423784715775962d0,
     6  0.5802024387972178d0, 0.3784471040388249d0,
     7  7.839919528229308d-2, 0.6334519212594525d0,
     8  3.387627157788001d-2, 0.1709066283884670d0,
     9  0.4801610983518325d0, 0.8983424668099422d0,
     *  5.358948687598758d-2, 0.1265377231771848d0,
     1  0.8979988627693677d0, 0.6470084038238917d0,
     2  0.3031709395541237d0, 0.6674702804438126d0,
     3  0.6318240977112699d0, 0.2235229633873050d0,
     4  0.2784629939177633d0, 0.2365462014457445d0,
     5  0.7226213454977284d0, 0.8986523045307989d0,
     6  0.5488233229247885d0, 0.3924605412141200d0,
     7  0.6288356378374988d0, 0.6370664115760445d0,
     8  0.5925600062791174d0, 0.4322113919396362d0,
     9  0.9766098520360393d0, 0.5168619893947437d0,
     *  0.6799970440779681d0, 0.4196004604766881d0,
     1  0.2324473089903044d0, 0.1439046416143282d0,
     2  0.4670307948601256d0, 0.7076498261128343d0,
     3  0.9458030397562582d0, 0.4557892460080424d0,
     4  0.3905930854589403d0, 0.3361770064397268d0,
     5  0.8303274937900278d0, 0.3041110304032945d0,
     6  0.5752684022049654d0, 7.985703137991175d-2,
     7  0.5522643936454465d0, 1.956754937251801d-2,
     8  0.9920272858340107d0/
c
        data s0/
     1  0.2793574644042651d0, 0.1882566493961346d0,
     2  0.5202478134503912d0, 0.7568505373052146d0,
     3  0.5682465992936152d0, 0.5153148754383294d0,
     4  0.7806554095454596d0, 1.982474428974643d-2,
     5  0.2520464262278498d0, 0.6423784715775962d0,
     6  0.5802024387972178d0, 0.3784471040388249d0,
     7  7.839919528229308d-2, 0.6334519212594525d0,
     8  3.387627157788001d-2, 0.1709066283884670d0,
     9  0.4801610983518325d0, 0.8983424668099422d0,
     *  5.358948687598758d-2, 0.1265377231771848d0,
     1  0.8979988627693677d0, 0.6470084038238917d0,
     2  0.3031709395541237d0, 0.6674702804438126d0,
     3  0.6318240977112699d0, 0.2235229633873050d0,
     4  0.2784629939177633d0, 0.2365462014457445d0,
     5  0.7226213454977284d0, 0.8986523045307989d0,
     6  0.5488233229247885d0, 0.3924605412141200d0,
     7  0.6288356378374988d0, 0.6370664115760445d0,
     8  0.5925600062791174d0, 0.4322113919396362d0,
     9  0.9766098520360393d0, 0.5168619893947437d0,
     *  0.6799970440779681d0, 0.4196004604766881d0,
     1  0.2324473089903044d0, 0.1439046416143282d0,
     2  0.4670307948601256d0, 0.7076498261128343d0,
     3  0.9458030397562582d0, 0.4557892460080424d0,
     4  0.3905930854589403d0, 0.3361770064397268d0,
     5  0.8303274937900278d0, 0.3041110304032945d0,
     6  0.5752684022049654d0, 7.985703137991175d-2,
     7  0.5522643936454465d0, 1.956754937251801d-2,
     8  0.9920272858340107d0/
c
c
        do k = 1,24
c
          x = s(k+31)-s(k)
          if(x .lt. 0) x = x+1
          r(k) = x
c
        enddo ! k
c
c
        do k = 25,55
c
          x = r(k-24)-s(k)
          if(x .lt. 0) x = x+1
          r(k) = x
c
        enddo ! k
c
c
        do k = 56,n
c
          x = r(k-24)-r(k-55)
          if(x .lt. 0) x = x+1
          r(k) = x
c
        enddo ! k
c
c
        do k = 1,55
          s(k) = r(n-55+k)
        enddo ! k
c
c
        return
c
c
c
        entry id_frandi(t)
c
c       initializes the seed values in s
c       (any appropriately random numbers will do).
c
c       input:
c       t -- values to copy into s
c
        do k = 1,55
          s(k) = t(k)
        enddo ! k
c
        return
c
c
c
        entry id_frando()
c
c       initializes the seed values in s to their original values.
c
        do k = 1,55
          s(k) = s0(k)
        enddo ! k
c
        return
        end
c
c
c
c
