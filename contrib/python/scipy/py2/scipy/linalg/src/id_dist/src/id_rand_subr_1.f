        subroutine id_srand(n,r)
c
c       generates n pseudorandom numbers drawn uniformly from [0,1],
c       via a very efficient lagged Fibonnaci method.
c       Unlike routine id_frand, the present routine does not requires
c       that n be at least 55.
c
c       input:
c       n -- number of pseudorandom numbers to generate
c
c       output:
c       r -- array of pseudorandom numbers
c
c       reference:
c       Press, Teukolsky, Vetterling, Flannery, "Numerical Recipes,"
c            3rd edition, Cambridge University Press, 2007,
c            Section 7.1.5.
c
        implicit none
        integer n,k,l,m
        real*8 s(55),r(n),s0(55),t(55),x
        save
c
        data l/55/,m/24/
c
        data s/
     1  0.8966049453474352d0, 0.7789471911260157d0,
     2  0.6071529762908476d0, 0.8287077988663865d0,
     3  0.8249336255502409d0, 0.5735259423199479d0,
     4  0.2436346323812991d0, 0.2656149927259701d0,
     5  0.6594784809929011d0, 0.3432392503145575d0,
     6  0.5051287353012308d0, 0.1444493249757482d0,
     7  0.7643753221285416d0, 0.4843422506977382d0,
     8  0.4427513254774826d0, 0.2965991475108561d0,
     9  0.2650513544474467d0, 2.768759325778929d-2,
     *  0.6106305243078063d0, 0.4246918885003141d0,
     1  0.2863757386932874d0, 0.6211983878375777d0,
     2  0.7534336463880467d0, 0.7471458603576737d0,
     3  0.2017455446928328d0, 0.9334235874832779d0,
     4  0.6343440435422822d0, 0.8819824804812527d0,
     5  1.994761401222460d-2, 0.7023693520374801d0,
     6  0.6010088924817263d0, 6.498095955562046d-2,
     7  0.3090915456102685d0, 0.3014924769096677d0,
     8  0.5820726822705102d0, 0.3630527222866207d0,
     9  0.3787166916242271d0, 0.3932772088505305d0,
     *  0.5570720335382000d0, 0.9712062146993835d0,
     1  0.1338293907964648d0, 0.1857441593107195d0,
     2  0.9102503893692572d0, 0.2623337538798778d0,
     3  0.3542828591321135d0, 2.246286032456513d-2,
     4  0.7935703170405717d0, 6.051464729640567d-2,
     5  0.7271929955172147d0, 1.968513010678739d-3,
     6  0.4914223624495486d0, 0.8730023176789450d0,
     7  0.9639777091743168d0, 0.1084256187532446d0,
     8  0.8539399636754000d0/
c
        data s0/
     1  0.8966049453474352d0, 0.7789471911260157d0,
     2  0.6071529762908476d0, 0.8287077988663865d0,
     3  0.8249336255502409d0, 0.5735259423199479d0,
     4  0.2436346323812991d0, 0.2656149927259701d0,
     5  0.6594784809929011d0, 0.3432392503145575d0,
     6  0.5051287353012308d0, 0.1444493249757482d0,
     7  0.7643753221285416d0, 0.4843422506977382d0,
     8  0.4427513254774826d0, 0.2965991475108561d0,
     9  0.2650513544474467d0, 2.768759325778929d-2,
     *  0.6106305243078063d0, 0.4246918885003141d0,
     1  0.2863757386932874d0, 0.6211983878375777d0,
     2  0.7534336463880467d0, 0.7471458603576737d0,
     3  0.2017455446928328d0, 0.9334235874832779d0,
     4  0.6343440435422822d0, 0.8819824804812527d0,
     5  1.994761401222460d-2, 0.7023693520374801d0,
     6  0.6010088924817263d0, 6.498095955562046d-2,
     7  0.3090915456102685d0, 0.3014924769096677d0,
     8  0.5820726822705102d0, 0.3630527222866207d0,
     9  0.3787166916242271d0, 0.3932772088505305d0,
     *  0.5570720335382000d0, 0.9712062146993835d0,
     1  0.1338293907964648d0, 0.1857441593107195d0,
     2  0.9102503893692572d0, 0.2623337538798778d0,
     3  0.3542828591321135d0, 2.246286032456513d-2,
     4  0.7935703170405717d0, 6.051464729640567d-2,
     5  0.7271929955172147d0, 1.968513010678739d-3,
     6  0.4914223624495486d0, 0.8730023176789450d0,
     7  0.9639777091743168d0, 0.1084256187532446d0,
     8  0.8539399636754000d0/
c
c
        do k = 1,n
c
c         Run one step of the recurrence.
c
          x = s(m)-s(l)
          if(x .lt. 0) x = x+1
          s(l) = x
          r(k) = x
c
c         Decrement l and m.
c
          l = l-1
          m = m-1
c
c         Circle back to the end if required.
c
          if(l .eq. 0) l = 55
          if(m .eq. 0) m = 55
c
        enddo ! k
c
c
        return
c
c
c
        entry id_srandi(t)
c
c       initializes the seed values in s
c       (any appropriately random numbers will do).
c
c       input:
c       t -- values to copy into s
c
        do k = 1,55
          s(k) = t(k)
        enddo ! k
c
        l = 55
        m = 24
c
        return
c
c
c
        entry id_srando()
c
c       initializes the seed values in s to their original values.
c
        do k = 1,55
          s(k) = s0(k)
        enddo ! k
c
        l = 55
        m = 24
c
        return
        end
c
c
c
c
