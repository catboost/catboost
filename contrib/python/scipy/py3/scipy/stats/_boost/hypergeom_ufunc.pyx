# distutils: language = c++
# cython: language_level=3

# This file was generated by stats/_boost/include/code_gen.py
# All modifications to this file will be overwritten.

from numpy cimport (
    import_array,
    import_ufunc,
    PyUFunc_FromFuncAndData,
    PyUFuncGenericFunction,
    PyUFunc_None,
    NPY_FLOAT,
    NPY_DOUBLE,
    NPY_LONGDOUBLE
)
from templated_pyufunc cimport PyUFunc_T
from func_defs cimport (
    boost_pdf3,
    boost_cdf3,
    boost_sf3,
    boost_ppf3,
    boost_isf3,
    boost_mean3,
    boost_variance3,
    boost_skewness3,
    boost_kurtosis_excess3,
)
cdef extern from "boost/math/distributions/hypergeometric.hpp" namespace "boost::math" nogil:
    cdef cppclass hypergeometric_distribution nogil:
        pass

# Workaround for Cython's lack of non-type template parameter
# support
cdef extern from * nogil:
    ctypedef int NINPUTS3 "3"
    ctypedef int NINPUTS4 "4"

_DUMMY = ""
import_array()
import_ufunc()
ctypedef long double longdouble


cdef PyUFuncGenericFunction loop_func0[3]
cdef void* func0[1*3]
cdef char types0[5*3]
loop_func0[0] = <PyUFuncGenericFunction>PyUFunc_T[float, NINPUTS4]
func0[0] = <void*>boost_pdf3[hypergeometric_distribution, float, float, float, float]
types0[0+0*5] = NPY_FLOAT
types0[1+0*5] = NPY_FLOAT
types0[2+0*5] = NPY_FLOAT
types0[3+0*5] = NPY_FLOAT
types0[4+0*5] = NPY_FLOAT
loop_func0[1] = <PyUFuncGenericFunction>PyUFunc_T[double, NINPUTS4]
func0[1] = <void*>boost_pdf3[hypergeometric_distribution, double, double, double, double]
types0[0+1*5] = NPY_DOUBLE
types0[1+1*5] = NPY_DOUBLE
types0[2+1*5] = NPY_DOUBLE
types0[3+1*5] = NPY_DOUBLE
types0[4+1*5] = NPY_DOUBLE
loop_func0[2] = <PyUFuncGenericFunction>PyUFunc_T[longdouble, NINPUTS4]
func0[2] = <void*>boost_pdf3[hypergeometric_distribution, longdouble, longdouble, longdouble, longdouble]
types0[0+2*5] = NPY_LONGDOUBLE
types0[1+2*5] = NPY_LONGDOUBLE
types0[2+2*5] = NPY_LONGDOUBLE
types0[3+2*5] = NPY_LONGDOUBLE
types0[4+2*5] = NPY_LONGDOUBLE

_hypergeom_pdf = PyUFunc_FromFuncAndData(
    loop_func0,
    func0,
    types0,
    3,  # number of supported input types
    4,  # number of input args
    1,  # number of output args
    PyUFunc_None,  # `identity` element, never mind this
    "_hypergeom_pdf",  # function name
    ("_hypergeom_pdf(x, r, n, N) -> computes "
     "pdf of hypergeom distribution"),
    0  # unused
)

cdef PyUFuncGenericFunction loop_func1[3]
cdef void* func1[1*3]
cdef char types1[5*3]
loop_func1[0] = <PyUFuncGenericFunction>PyUFunc_T[float, NINPUTS4]
func1[0] = <void*>boost_cdf3[hypergeometric_distribution, float, float, float, float]
types1[0+0*5] = NPY_FLOAT
types1[1+0*5] = NPY_FLOAT
types1[2+0*5] = NPY_FLOAT
types1[3+0*5] = NPY_FLOAT
types1[4+0*5] = NPY_FLOAT
loop_func1[1] = <PyUFuncGenericFunction>PyUFunc_T[double, NINPUTS4]
func1[1] = <void*>boost_cdf3[hypergeometric_distribution, double, double, double, double]
types1[0+1*5] = NPY_DOUBLE
types1[1+1*5] = NPY_DOUBLE
types1[2+1*5] = NPY_DOUBLE
types1[3+1*5] = NPY_DOUBLE
types1[4+1*5] = NPY_DOUBLE
loop_func1[2] = <PyUFuncGenericFunction>PyUFunc_T[longdouble, NINPUTS4]
func1[2] = <void*>boost_cdf3[hypergeometric_distribution, longdouble, longdouble, longdouble, longdouble]
types1[0+2*5] = NPY_LONGDOUBLE
types1[1+2*5] = NPY_LONGDOUBLE
types1[2+2*5] = NPY_LONGDOUBLE
types1[3+2*5] = NPY_LONGDOUBLE
types1[4+2*5] = NPY_LONGDOUBLE

_hypergeom_cdf = PyUFunc_FromFuncAndData(
    loop_func1,
    func1,
    types1,
    3,  # number of supported input types
    4,  # number of input args
    1,  # number of output args
    PyUFunc_None,  # `identity` element, never mind this
    "_hypergeom_cdf",  # function name
    ("_hypergeom_cdf(x, r, n, N) -> computes "
     "cdf of hypergeom distribution"),
    0  # unused
)

cdef PyUFuncGenericFunction loop_func2[3]
cdef void* func2[1*3]
cdef char types2[5*3]
loop_func2[0] = <PyUFuncGenericFunction>PyUFunc_T[float, NINPUTS4]
func2[0] = <void*>boost_sf3[hypergeometric_distribution, float, float, float, float]
types2[0+0*5] = NPY_FLOAT
types2[1+0*5] = NPY_FLOAT
types2[2+0*5] = NPY_FLOAT
types2[3+0*5] = NPY_FLOAT
types2[4+0*5] = NPY_FLOAT
loop_func2[1] = <PyUFuncGenericFunction>PyUFunc_T[double, NINPUTS4]
func2[1] = <void*>boost_sf3[hypergeometric_distribution, double, double, double, double]
types2[0+1*5] = NPY_DOUBLE
types2[1+1*5] = NPY_DOUBLE
types2[2+1*5] = NPY_DOUBLE
types2[3+1*5] = NPY_DOUBLE
types2[4+1*5] = NPY_DOUBLE
loop_func2[2] = <PyUFuncGenericFunction>PyUFunc_T[longdouble, NINPUTS4]
func2[2] = <void*>boost_sf3[hypergeometric_distribution, longdouble, longdouble, longdouble, longdouble]
types2[0+2*5] = NPY_LONGDOUBLE
types2[1+2*5] = NPY_LONGDOUBLE
types2[2+2*5] = NPY_LONGDOUBLE
types2[3+2*5] = NPY_LONGDOUBLE
types2[4+2*5] = NPY_LONGDOUBLE

_hypergeom_sf = PyUFunc_FromFuncAndData(
    loop_func2,
    func2,
    types2,
    3,  # number of supported input types
    4,  # number of input args
    1,  # number of output args
    PyUFunc_None,  # `identity` element, never mind this
    "_hypergeom_sf",  # function name
    ("_hypergeom_sf(x, r, n, N) -> computes "
     "sf of hypergeom distribution"),
    0  # unused
)

cdef PyUFuncGenericFunction loop_func3[3]
cdef void* func3[1*3]
cdef char types3[5*3]
loop_func3[0] = <PyUFuncGenericFunction>PyUFunc_T[float, NINPUTS4]
func3[0] = <void*>boost_ppf3[hypergeometric_distribution, float, float, float, float]
types3[0+0*5] = NPY_FLOAT
types3[1+0*5] = NPY_FLOAT
types3[2+0*5] = NPY_FLOAT
types3[3+0*5] = NPY_FLOAT
types3[4+0*5] = NPY_FLOAT
loop_func3[1] = <PyUFuncGenericFunction>PyUFunc_T[double, NINPUTS4]
func3[1] = <void*>boost_ppf3[hypergeometric_distribution, double, double, double, double]
types3[0+1*5] = NPY_DOUBLE
types3[1+1*5] = NPY_DOUBLE
types3[2+1*5] = NPY_DOUBLE
types3[3+1*5] = NPY_DOUBLE
types3[4+1*5] = NPY_DOUBLE
loop_func3[2] = <PyUFuncGenericFunction>PyUFunc_T[longdouble, NINPUTS4]
func3[2] = <void*>boost_ppf3[hypergeometric_distribution, longdouble, longdouble, longdouble, longdouble]
types3[0+2*5] = NPY_LONGDOUBLE
types3[1+2*5] = NPY_LONGDOUBLE
types3[2+2*5] = NPY_LONGDOUBLE
types3[3+2*5] = NPY_LONGDOUBLE
types3[4+2*5] = NPY_LONGDOUBLE

_hypergeom_ppf = PyUFunc_FromFuncAndData(
    loop_func3,
    func3,
    types3,
    3,  # number of supported input types
    4,  # number of input args
    1,  # number of output args
    PyUFunc_None,  # `identity` element, never mind this
    "_hypergeom_ppf",  # function name
    ("_hypergeom_ppf(x, r, n, N) -> computes "
     "ppf of hypergeom distribution"),
    0  # unused
)

cdef PyUFuncGenericFunction loop_func4[3]
cdef void* func4[1*3]
cdef char types4[5*3]
loop_func4[0] = <PyUFuncGenericFunction>PyUFunc_T[float, NINPUTS4]
func4[0] = <void*>boost_isf3[hypergeometric_distribution, float, float, float, float]
types4[0+0*5] = NPY_FLOAT
types4[1+0*5] = NPY_FLOAT
types4[2+0*5] = NPY_FLOAT
types4[3+0*5] = NPY_FLOAT
types4[4+0*5] = NPY_FLOAT
loop_func4[1] = <PyUFuncGenericFunction>PyUFunc_T[double, NINPUTS4]
func4[1] = <void*>boost_isf3[hypergeometric_distribution, double, double, double, double]
types4[0+1*5] = NPY_DOUBLE
types4[1+1*5] = NPY_DOUBLE
types4[2+1*5] = NPY_DOUBLE
types4[3+1*5] = NPY_DOUBLE
types4[4+1*5] = NPY_DOUBLE
loop_func4[2] = <PyUFuncGenericFunction>PyUFunc_T[longdouble, NINPUTS4]
func4[2] = <void*>boost_isf3[hypergeometric_distribution, longdouble, longdouble, longdouble, longdouble]
types4[0+2*5] = NPY_LONGDOUBLE
types4[1+2*5] = NPY_LONGDOUBLE
types4[2+2*5] = NPY_LONGDOUBLE
types4[3+2*5] = NPY_LONGDOUBLE
types4[4+2*5] = NPY_LONGDOUBLE

_hypergeom_isf = PyUFunc_FromFuncAndData(
    loop_func4,
    func4,
    types4,
    3,  # number of supported input types
    4,  # number of input args
    1,  # number of output args
    PyUFunc_None,  # `identity` element, never mind this
    "_hypergeom_isf",  # function name
    ("_hypergeom_isf(x, r, n, N) -> computes "
     "isf of hypergeom distribution"),
    0  # unused
)

cdef PyUFuncGenericFunction loop_func5[3]
cdef void* func5[1*3]
cdef char types5[4*3]
loop_func5[0] = <PyUFuncGenericFunction>PyUFunc_T[float, NINPUTS3]
func5[0] = <void*>boost_mean3[hypergeometric_distribution, float, float, float, float]
types5[0+0*4] = NPY_FLOAT
types5[1+0*4] = NPY_FLOAT
types5[2+0*4] = NPY_FLOAT
types5[3+0*4] = NPY_FLOAT
loop_func5[1] = <PyUFuncGenericFunction>PyUFunc_T[double, NINPUTS3]
func5[1] = <void*>boost_mean3[hypergeometric_distribution, double, double, double, double]
types5[0+1*4] = NPY_DOUBLE
types5[1+1*4] = NPY_DOUBLE
types5[2+1*4] = NPY_DOUBLE
types5[3+1*4] = NPY_DOUBLE
loop_func5[2] = <PyUFuncGenericFunction>PyUFunc_T[longdouble, NINPUTS3]
func5[2] = <void*>boost_mean3[hypergeometric_distribution, longdouble, longdouble, longdouble, longdouble]
types5[0+2*4] = NPY_LONGDOUBLE
types5[1+2*4] = NPY_LONGDOUBLE
types5[2+2*4] = NPY_LONGDOUBLE
types5[3+2*4] = NPY_LONGDOUBLE

_hypergeom_mean = PyUFunc_FromFuncAndData(
    loop_func5,
    func5,
    types5,
    3,  # number of supported input types
    3,  # number of input args
    1,  # number of output args
    PyUFunc_None,  # `identity` element, never mind this
    "_hypergeom_mean",  # function name
    ("_hypergeom_mean(r, n, N) -> computes "
     "mean of hypergeom distribution"),
    0  # unused
)

cdef PyUFuncGenericFunction loop_func6[3]
cdef void* func6[1*3]
cdef char types6[4*3]
loop_func6[0] = <PyUFuncGenericFunction>PyUFunc_T[float, NINPUTS3]
func6[0] = <void*>boost_variance3[hypergeometric_distribution, float, float, float, float]
types6[0+0*4] = NPY_FLOAT
types6[1+0*4] = NPY_FLOAT
types6[2+0*4] = NPY_FLOAT
types6[3+0*4] = NPY_FLOAT
loop_func6[1] = <PyUFuncGenericFunction>PyUFunc_T[double, NINPUTS3]
func6[1] = <void*>boost_variance3[hypergeometric_distribution, double, double, double, double]
types6[0+1*4] = NPY_DOUBLE
types6[1+1*4] = NPY_DOUBLE
types6[2+1*4] = NPY_DOUBLE
types6[3+1*4] = NPY_DOUBLE
loop_func6[2] = <PyUFuncGenericFunction>PyUFunc_T[longdouble, NINPUTS3]
func6[2] = <void*>boost_variance3[hypergeometric_distribution, longdouble, longdouble, longdouble, longdouble]
types6[0+2*4] = NPY_LONGDOUBLE
types6[1+2*4] = NPY_LONGDOUBLE
types6[2+2*4] = NPY_LONGDOUBLE
types6[3+2*4] = NPY_LONGDOUBLE

_hypergeom_variance = PyUFunc_FromFuncAndData(
    loop_func6,
    func6,
    types6,
    3,  # number of supported input types
    3,  # number of input args
    1,  # number of output args
    PyUFunc_None,  # `identity` element, never mind this
    "_hypergeom_variance",  # function name
    ("_hypergeom_variance(r, n, N) -> computes "
     "variance of hypergeom distribution"),
    0  # unused
)

cdef PyUFuncGenericFunction loop_func7[3]
cdef void* func7[1*3]
cdef char types7[4*3]
loop_func7[0] = <PyUFuncGenericFunction>PyUFunc_T[float, NINPUTS3]
func7[0] = <void*>boost_skewness3[hypergeometric_distribution, float, float, float, float]
types7[0+0*4] = NPY_FLOAT
types7[1+0*4] = NPY_FLOAT
types7[2+0*4] = NPY_FLOAT
types7[3+0*4] = NPY_FLOAT
loop_func7[1] = <PyUFuncGenericFunction>PyUFunc_T[double, NINPUTS3]
func7[1] = <void*>boost_skewness3[hypergeometric_distribution, double, double, double, double]
types7[0+1*4] = NPY_DOUBLE
types7[1+1*4] = NPY_DOUBLE
types7[2+1*4] = NPY_DOUBLE
types7[3+1*4] = NPY_DOUBLE
loop_func7[2] = <PyUFuncGenericFunction>PyUFunc_T[longdouble, NINPUTS3]
func7[2] = <void*>boost_skewness3[hypergeometric_distribution, longdouble, longdouble, longdouble, longdouble]
types7[0+2*4] = NPY_LONGDOUBLE
types7[1+2*4] = NPY_LONGDOUBLE
types7[2+2*4] = NPY_LONGDOUBLE
types7[3+2*4] = NPY_LONGDOUBLE

_hypergeom_skewness = PyUFunc_FromFuncAndData(
    loop_func7,
    func7,
    types7,
    3,  # number of supported input types
    3,  # number of input args
    1,  # number of output args
    PyUFunc_None,  # `identity` element, never mind this
    "_hypergeom_skewness",  # function name
    ("_hypergeom_skewness(r, n, N) -> computes "
     "skewness of hypergeom distribution"),
    0  # unused
)

cdef PyUFuncGenericFunction loop_func8[3]
cdef void* func8[1*3]
cdef char types8[4*3]
loop_func8[0] = <PyUFuncGenericFunction>PyUFunc_T[float, NINPUTS3]
func8[0] = <void*>boost_kurtosis_excess3[hypergeometric_distribution, float, float, float, float]
types8[0+0*4] = NPY_FLOAT
types8[1+0*4] = NPY_FLOAT
types8[2+0*4] = NPY_FLOAT
types8[3+0*4] = NPY_FLOAT
loop_func8[1] = <PyUFuncGenericFunction>PyUFunc_T[double, NINPUTS3]
func8[1] = <void*>boost_kurtosis_excess3[hypergeometric_distribution, double, double, double, double]
types8[0+1*4] = NPY_DOUBLE
types8[1+1*4] = NPY_DOUBLE
types8[2+1*4] = NPY_DOUBLE
types8[3+1*4] = NPY_DOUBLE
loop_func8[2] = <PyUFuncGenericFunction>PyUFunc_T[longdouble, NINPUTS3]
func8[2] = <void*>boost_kurtosis_excess3[hypergeometric_distribution, longdouble, longdouble, longdouble, longdouble]
types8[0+2*4] = NPY_LONGDOUBLE
types8[1+2*4] = NPY_LONGDOUBLE
types8[2+2*4] = NPY_LONGDOUBLE
types8[3+2*4] = NPY_LONGDOUBLE

_hypergeom_kurtosis_excess = PyUFunc_FromFuncAndData(
    loop_func8,
    func8,
    types8,
    3,  # number of supported input types
    3,  # number of input args
    1,  # number of output args
    PyUFunc_None,  # `identity` element, never mind this
    "_hypergeom_kurtosis_excess",  # function name
    ("_hypergeom_kurtosis_excess(r, n, N) -> computes "
     "kurtosis_excess of hypergeom distribution"),
    0  # unused
)
