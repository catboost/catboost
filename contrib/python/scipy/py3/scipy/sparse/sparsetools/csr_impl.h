/* This file is autogenerated by generate_sparsetools.py
 * Do not edit manually or check into VCS.
 */

static int get_thunk_case(int I_typenum, int T_typenum)
{
        if (0) {}
        else if (I_typenum == NPY_INT32) {
            if (T_typenum == -1) { return 0; }
            else if (T_typenum == NPY_BOOL) { return 1; }
            else if (T_typenum == NPY_BYTE) { return 2; }
            else if (T_typenum == NPY_UBYTE) { return 3; }
            else if (T_typenum == NPY_SHORT) { return 4; }
            else if (T_typenum == NPY_USHORT) { return 5; }
            else if (T_typenum == NPY_INT) { return 6; }
            else if (T_typenum == NPY_UINT) { return 7; }
            else if (T_typenum == NPY_LONG) { return 8; }
            else if (T_typenum == NPY_ULONG) { return 9; }
            else if (T_typenum == NPY_LONGLONG) { return 10; }
            else if (T_typenum == NPY_ULONGLONG) { return 11; }
            else if (T_typenum == NPY_FLOAT) { return 12; }
            else if (T_typenum == NPY_DOUBLE) { return 13; }
            else if (T_typenum == NPY_LONGDOUBLE) { return 14; }
            else if (T_typenum == NPY_CFLOAT) { return 15; }
            else if (T_typenum == NPY_CDOUBLE) { return 16; }
            else if (T_typenum == NPY_CLONGDOUBLE) { return 17; }
        }
        else if (I_typenum == NPY_INT64) {
            if (T_typenum == -1) { return 18; }
            else if (T_typenum == NPY_BOOL) { return 19; }
            else if (T_typenum == NPY_BYTE) { return 20; }
            else if (T_typenum == NPY_UBYTE) { return 21; }
            else if (T_typenum == NPY_SHORT) { return 22; }
            else if (T_typenum == NPY_USHORT) { return 23; }
            else if (T_typenum == NPY_INT) { return 24; }
            else if (T_typenum == NPY_UINT) { return 25; }
            else if (T_typenum == NPY_LONG) { return 26; }
            else if (T_typenum == NPY_ULONG) { return 27; }
            else if (T_typenum == NPY_LONGLONG) { return 28; }
            else if (T_typenum == NPY_ULONGLONG) { return 29; }
            else if (T_typenum == NPY_FLOAT) { return 30; }
            else if (T_typenum == NPY_DOUBLE) { return 31; }
            else if (T_typenum == NPY_LONGDOUBLE) { return 32; }
            else if (T_typenum == NPY_CFLOAT) { return 33; }
            else if (T_typenum == NPY_CDOUBLE) { return 34; }
            else if (T_typenum == NPY_CLONGDOUBLE) { return 35; }
        };
    return -1;
}

static PY_LONG_LONG csr_matmat_maxnnz_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 0:
            return csr_matmat_maxnnz(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5]);
        case 18:
            return csr_matmat_maxnnz(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5]);
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_matmat_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_matmat(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csr_matmat(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_byte*)a[10]);
            return 0;
        case 3:
            (void)csr_matmat(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 4:
            (void)csr_matmat(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_short*)a[10]);
            return 0;
        case 5:
            (void)csr_matmat(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 6:
            (void)csr_matmat(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_int*)a[10]);
            return 0;
        case 7:
            (void)csr_matmat(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_uint*)a[10]);
            return 0;
        case 8:
            (void)csr_matmat(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_long*)a[10]);
            return 0;
        case 9:
            (void)csr_matmat(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 10:
            (void)csr_matmat(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 11:
            (void)csr_matmat(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 12:
            (void)csr_matmat(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_float*)a[10]);
            return 0;
        case 13:
            (void)csr_matmat(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_double*)a[10]);
            return 0;
        case 14:
            (void)csr_matmat(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 15:
            (void)csr_matmat(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csr_matmat(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csr_matmat(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csr_matmat(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csr_matmat(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_byte*)a[10]);
            return 0;
        case 21:
            (void)csr_matmat(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 22:
            (void)csr_matmat(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_short*)a[10]);
            return 0;
        case 23:
            (void)csr_matmat(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 24:
            (void)csr_matmat(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_int*)a[10]);
            return 0;
        case 25:
            (void)csr_matmat(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_uint*)a[10]);
            return 0;
        case 26:
            (void)csr_matmat(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_long*)a[10]);
            return 0;
        case 27:
            (void)csr_matmat(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 28:
            (void)csr_matmat(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 29:
            (void)csr_matmat(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 30:
            (void)csr_matmat(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_float*)a[10]);
            return 0;
        case 31:
            (void)csr_matmat(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_double*)a[10]);
            return 0;
        case 32:
            (void)csr_matmat(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 33:
            (void)csr_matmat(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csr_matmat(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csr_matmat(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_diagonal_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_diagonal(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_bool_wrapper*)a[5], (npy_bool_wrapper*)a[6]);
            return 0;
        case 2:
            (void)csr_diagonal(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_byte*)a[5], (npy_byte*)a[6]);
            return 0;
        case 3:
            (void)csr_diagonal(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ubyte*)a[5], (npy_ubyte*)a[6]);
            return 0;
        case 4:
            (void)csr_diagonal(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_short*)a[5], (npy_short*)a[6]);
            return 0;
        case 5:
            (void)csr_diagonal(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ushort*)a[5], (npy_ushort*)a[6]);
            return 0;
        case 6:
            (void)csr_diagonal(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int*)a[5], (npy_int*)a[6]);
            return 0;
        case 7:
            (void)csr_diagonal(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_uint*)a[5], (npy_uint*)a[6]);
            return 0;
        case 8:
            (void)csr_diagonal(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_long*)a[5], (npy_long*)a[6]);
            return 0;
        case 9:
            (void)csr_diagonal(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ulong*)a[5], (npy_ulong*)a[6]);
            return 0;
        case 10:
            (void)csr_diagonal(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_longlong*)a[5], (npy_longlong*)a[6]);
            return 0;
        case 11:
            (void)csr_diagonal(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ulonglong*)a[5], (npy_ulonglong*)a[6]);
            return 0;
        case 12:
            (void)csr_diagonal(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_float*)a[5], (npy_float*)a[6]);
            return 0;
        case 13:
            (void)csr_diagonal(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_double*)a[5], (npy_double*)a[6]);
            return 0;
        case 14:
            (void)csr_diagonal(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_longdouble*)a[5], (npy_longdouble*)a[6]);
            return 0;
        case 15:
            (void)csr_diagonal(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_cfloat_wrapper*)a[5], (npy_cfloat_wrapper*)a[6]);
            return 0;
        case 16:
            (void)csr_diagonal(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_cdouble_wrapper*)a[5], (npy_cdouble_wrapper*)a[6]);
            return 0;
        case 17:
            (void)csr_diagonal(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_clongdouble_wrapper*)a[5], (npy_clongdouble_wrapper*)a[6]);
            return 0;
        case 19:
            (void)csr_diagonal(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_bool_wrapper*)a[5], (npy_bool_wrapper*)a[6]);
            return 0;
        case 20:
            (void)csr_diagonal(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_byte*)a[5], (npy_byte*)a[6]);
            return 0;
        case 21:
            (void)csr_diagonal(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ubyte*)a[5], (npy_ubyte*)a[6]);
            return 0;
        case 22:
            (void)csr_diagonal(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_short*)a[5], (npy_short*)a[6]);
            return 0;
        case 23:
            (void)csr_diagonal(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ushort*)a[5], (npy_ushort*)a[6]);
            return 0;
        case 24:
            (void)csr_diagonal(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int*)a[5], (npy_int*)a[6]);
            return 0;
        case 25:
            (void)csr_diagonal(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_uint*)a[5], (npy_uint*)a[6]);
            return 0;
        case 26:
            (void)csr_diagonal(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_long*)a[5], (npy_long*)a[6]);
            return 0;
        case 27:
            (void)csr_diagonal(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ulong*)a[5], (npy_ulong*)a[6]);
            return 0;
        case 28:
            (void)csr_diagonal(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_longlong*)a[5], (npy_longlong*)a[6]);
            return 0;
        case 29:
            (void)csr_diagonal(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ulonglong*)a[5], (npy_ulonglong*)a[6]);
            return 0;
        case 30:
            (void)csr_diagonal(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_float*)a[5], (npy_float*)a[6]);
            return 0;
        case 31:
            (void)csr_diagonal(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_double*)a[5], (npy_double*)a[6]);
            return 0;
        case 32:
            (void)csr_diagonal(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_longdouble*)a[5], (npy_longdouble*)a[6]);
            return 0;
        case 33:
            (void)csr_diagonal(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_cfloat_wrapper*)a[5], (npy_cfloat_wrapper*)a[6]);
            return 0;
        case 34:
            (void)csr_diagonal(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_cdouble_wrapper*)a[5], (npy_cdouble_wrapper*)a[6]);
            return 0;
        case 35:
            (void)csr_diagonal(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_clongdouble_wrapper*)a[5], (npy_clongdouble_wrapper*)a[6]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_tocsc_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_tocsc(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_bool_wrapper*)a[7]);
            return 0;
        case 2:
            (void)csr_tocsc(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_byte*)a[7]);
            return 0;
        case 3:
            (void)csr_tocsc(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_ubyte*)a[7]);
            return 0;
        case 4:
            (void)csr_tocsc(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_short*)a[7]);
            return 0;
        case 5:
            (void)csr_tocsc(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_ushort*)a[7]);
            return 0;
        case 6:
            (void)csr_tocsc(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_int*)a[7]);
            return 0;
        case 7:
            (void)csr_tocsc(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_uint*)a[7]);
            return 0;
        case 8:
            (void)csr_tocsc(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_long*)a[7]);
            return 0;
        case 9:
            (void)csr_tocsc(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_ulong*)a[7]);
            return 0;
        case 10:
            (void)csr_tocsc(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_longlong*)a[7]);
            return 0;
        case 11:
            (void)csr_tocsc(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_ulonglong*)a[7]);
            return 0;
        case 12:
            (void)csr_tocsc(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_float*)a[7]);
            return 0;
        case 13:
            (void)csr_tocsc(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_double*)a[7]);
            return 0;
        case 14:
            (void)csr_tocsc(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_longdouble*)a[7]);
            return 0;
        case 15:
            (void)csr_tocsc(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_cfloat_wrapper*)a[7]);
            return 0;
        case 16:
            (void)csr_tocsc(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_cdouble_wrapper*)a[7]);
            return 0;
        case 17:
            (void)csr_tocsc(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_clongdouble_wrapper*)a[7]);
            return 0;
        case 19:
            (void)csr_tocsc(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_bool_wrapper*)a[7]);
            return 0;
        case 20:
            (void)csr_tocsc(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_byte*)a[7]);
            return 0;
        case 21:
            (void)csr_tocsc(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_ubyte*)a[7]);
            return 0;
        case 22:
            (void)csr_tocsc(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_short*)a[7]);
            return 0;
        case 23:
            (void)csr_tocsc(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_ushort*)a[7]);
            return 0;
        case 24:
            (void)csr_tocsc(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_int*)a[7]);
            return 0;
        case 25:
            (void)csr_tocsc(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_uint*)a[7]);
            return 0;
        case 26:
            (void)csr_tocsc(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_long*)a[7]);
            return 0;
        case 27:
            (void)csr_tocsc(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_ulong*)a[7]);
            return 0;
        case 28:
            (void)csr_tocsc(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_longlong*)a[7]);
            return 0;
        case 29:
            (void)csr_tocsc(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_ulonglong*)a[7]);
            return 0;
        case 30:
            (void)csr_tocsc(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_float*)a[7]);
            return 0;
        case 31:
            (void)csr_tocsc(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_double*)a[7]);
            return 0;
        case 32:
            (void)csr_tocsc(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_longdouble*)a[7]);
            return 0;
        case 33:
            (void)csr_tocsc(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_cfloat_wrapper*)a[7]);
            return 0;
        case 34:
            (void)csr_tocsc(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_cdouble_wrapper*)a[7]);
            return 0;
        case 35:
            (void)csr_tocsc(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_clongdouble_wrapper*)a[7]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_tobsr_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_tobsr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (const npy_bool_wrapper*)a[6], (npy_int32*)a[7], (npy_int32*)a[8], (npy_bool_wrapper*)a[9]);
            return 0;
        case 2:
            (void)csr_tobsr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (const npy_byte*)a[6], (npy_int32*)a[7], (npy_int32*)a[8], (npy_byte*)a[9]);
            return 0;
        case 3:
            (void)csr_tobsr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (const npy_ubyte*)a[6], (npy_int32*)a[7], (npy_int32*)a[8], (npy_ubyte*)a[9]);
            return 0;
        case 4:
            (void)csr_tobsr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (const npy_short*)a[6], (npy_int32*)a[7], (npy_int32*)a[8], (npy_short*)a[9]);
            return 0;
        case 5:
            (void)csr_tobsr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (const npy_ushort*)a[6], (npy_int32*)a[7], (npy_int32*)a[8], (npy_ushort*)a[9]);
            return 0;
        case 6:
            (void)csr_tobsr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (const npy_int*)a[6], (npy_int32*)a[7], (npy_int32*)a[8], (npy_int*)a[9]);
            return 0;
        case 7:
            (void)csr_tobsr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (const npy_uint*)a[6], (npy_int32*)a[7], (npy_int32*)a[8], (npy_uint*)a[9]);
            return 0;
        case 8:
            (void)csr_tobsr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (const npy_long*)a[6], (npy_int32*)a[7], (npy_int32*)a[8], (npy_long*)a[9]);
            return 0;
        case 9:
            (void)csr_tobsr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (const npy_ulong*)a[6], (npy_int32*)a[7], (npy_int32*)a[8], (npy_ulong*)a[9]);
            return 0;
        case 10:
            (void)csr_tobsr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (const npy_longlong*)a[6], (npy_int32*)a[7], (npy_int32*)a[8], (npy_longlong*)a[9]);
            return 0;
        case 11:
            (void)csr_tobsr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (const npy_ulonglong*)a[6], (npy_int32*)a[7], (npy_int32*)a[8], (npy_ulonglong*)a[9]);
            return 0;
        case 12:
            (void)csr_tobsr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (const npy_float*)a[6], (npy_int32*)a[7], (npy_int32*)a[8], (npy_float*)a[9]);
            return 0;
        case 13:
            (void)csr_tobsr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (const npy_double*)a[6], (npy_int32*)a[7], (npy_int32*)a[8], (npy_double*)a[9]);
            return 0;
        case 14:
            (void)csr_tobsr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (const npy_longdouble*)a[6], (npy_int32*)a[7], (npy_int32*)a[8], (npy_longdouble*)a[9]);
            return 0;
        case 15:
            (void)csr_tobsr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (const npy_cfloat_wrapper*)a[6], (npy_int32*)a[7], (npy_int32*)a[8], (npy_cfloat_wrapper*)a[9]);
            return 0;
        case 16:
            (void)csr_tobsr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (const npy_cdouble_wrapper*)a[6], (npy_int32*)a[7], (npy_int32*)a[8], (npy_cdouble_wrapper*)a[9]);
            return 0;
        case 17:
            (void)csr_tobsr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (const npy_clongdouble_wrapper*)a[6], (npy_int32*)a[7], (npy_int32*)a[8], (npy_clongdouble_wrapper*)a[9]);
            return 0;
        case 19:
            (void)csr_tobsr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (const npy_bool_wrapper*)a[6], (npy_int64*)a[7], (npy_int64*)a[8], (npy_bool_wrapper*)a[9]);
            return 0;
        case 20:
            (void)csr_tobsr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (const npy_byte*)a[6], (npy_int64*)a[7], (npy_int64*)a[8], (npy_byte*)a[9]);
            return 0;
        case 21:
            (void)csr_tobsr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (const npy_ubyte*)a[6], (npy_int64*)a[7], (npy_int64*)a[8], (npy_ubyte*)a[9]);
            return 0;
        case 22:
            (void)csr_tobsr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (const npy_short*)a[6], (npy_int64*)a[7], (npy_int64*)a[8], (npy_short*)a[9]);
            return 0;
        case 23:
            (void)csr_tobsr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (const npy_ushort*)a[6], (npy_int64*)a[7], (npy_int64*)a[8], (npy_ushort*)a[9]);
            return 0;
        case 24:
            (void)csr_tobsr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (const npy_int*)a[6], (npy_int64*)a[7], (npy_int64*)a[8], (npy_int*)a[9]);
            return 0;
        case 25:
            (void)csr_tobsr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (const npy_uint*)a[6], (npy_int64*)a[7], (npy_int64*)a[8], (npy_uint*)a[9]);
            return 0;
        case 26:
            (void)csr_tobsr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (const npy_long*)a[6], (npy_int64*)a[7], (npy_int64*)a[8], (npy_long*)a[9]);
            return 0;
        case 27:
            (void)csr_tobsr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (const npy_ulong*)a[6], (npy_int64*)a[7], (npy_int64*)a[8], (npy_ulong*)a[9]);
            return 0;
        case 28:
            (void)csr_tobsr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (const npy_longlong*)a[6], (npy_int64*)a[7], (npy_int64*)a[8], (npy_longlong*)a[9]);
            return 0;
        case 29:
            (void)csr_tobsr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (const npy_ulonglong*)a[6], (npy_int64*)a[7], (npy_int64*)a[8], (npy_ulonglong*)a[9]);
            return 0;
        case 30:
            (void)csr_tobsr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (const npy_float*)a[6], (npy_int64*)a[7], (npy_int64*)a[8], (npy_float*)a[9]);
            return 0;
        case 31:
            (void)csr_tobsr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (const npy_double*)a[6], (npy_int64*)a[7], (npy_int64*)a[8], (npy_double*)a[9]);
            return 0;
        case 32:
            (void)csr_tobsr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (const npy_longdouble*)a[6], (npy_int64*)a[7], (npy_int64*)a[8], (npy_longdouble*)a[9]);
            return 0;
        case 33:
            (void)csr_tobsr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (const npy_cfloat_wrapper*)a[6], (npy_int64*)a[7], (npy_int64*)a[8], (npy_cfloat_wrapper*)a[9]);
            return 0;
        case 34:
            (void)csr_tobsr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (const npy_cdouble_wrapper*)a[6], (npy_int64*)a[7], (npy_int64*)a[8], (npy_cdouble_wrapper*)a[9]);
            return 0;
        case 35:
            (void)csr_tobsr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (const npy_clongdouble_wrapper*)a[6], (npy_int64*)a[7], (npy_int64*)a[8], (npy_clongdouble_wrapper*)a[9]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_todense_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_todense(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (npy_bool_wrapper*)a[5]);
            return 0;
        case 2:
            (void)csr_todense(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (npy_byte*)a[5]);
            return 0;
        case 3:
            (void)csr_todense(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (npy_ubyte*)a[5]);
            return 0;
        case 4:
            (void)csr_todense(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (npy_short*)a[5]);
            return 0;
        case 5:
            (void)csr_todense(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (npy_ushort*)a[5]);
            return 0;
        case 6:
            (void)csr_todense(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (npy_int*)a[5]);
            return 0;
        case 7:
            (void)csr_todense(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (npy_uint*)a[5]);
            return 0;
        case 8:
            (void)csr_todense(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (npy_long*)a[5]);
            return 0;
        case 9:
            (void)csr_todense(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (npy_ulong*)a[5]);
            return 0;
        case 10:
            (void)csr_todense(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (npy_longlong*)a[5]);
            return 0;
        case 11:
            (void)csr_todense(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (npy_ulonglong*)a[5]);
            return 0;
        case 12:
            (void)csr_todense(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (npy_float*)a[5]);
            return 0;
        case 13:
            (void)csr_todense(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (npy_double*)a[5]);
            return 0;
        case 14:
            (void)csr_todense(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (npy_longdouble*)a[5]);
            return 0;
        case 15:
            (void)csr_todense(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (npy_cfloat_wrapper*)a[5]);
            return 0;
        case 16:
            (void)csr_todense(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (npy_cdouble_wrapper*)a[5]);
            return 0;
        case 17:
            (void)csr_todense(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (npy_clongdouble_wrapper*)a[5]);
            return 0;
        case 19:
            (void)csr_todense(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (npy_bool_wrapper*)a[5]);
            return 0;
        case 20:
            (void)csr_todense(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (npy_byte*)a[5]);
            return 0;
        case 21:
            (void)csr_todense(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (npy_ubyte*)a[5]);
            return 0;
        case 22:
            (void)csr_todense(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (npy_short*)a[5]);
            return 0;
        case 23:
            (void)csr_todense(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (npy_ushort*)a[5]);
            return 0;
        case 24:
            (void)csr_todense(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (npy_int*)a[5]);
            return 0;
        case 25:
            (void)csr_todense(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (npy_uint*)a[5]);
            return 0;
        case 26:
            (void)csr_todense(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (npy_long*)a[5]);
            return 0;
        case 27:
            (void)csr_todense(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (npy_ulong*)a[5]);
            return 0;
        case 28:
            (void)csr_todense(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (npy_longlong*)a[5]);
            return 0;
        case 29:
            (void)csr_todense(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (npy_ulonglong*)a[5]);
            return 0;
        case 30:
            (void)csr_todense(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (npy_float*)a[5]);
            return 0;
        case 31:
            (void)csr_todense(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (npy_double*)a[5]);
            return 0;
        case 32:
            (void)csr_todense(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (npy_longdouble*)a[5]);
            return 0;
        case 33:
            (void)csr_todense(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (npy_cfloat_wrapper*)a[5]);
            return 0;
        case 34:
            (void)csr_todense(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (npy_cdouble_wrapper*)a[5]);
            return 0;
        case 35:
            (void)csr_todense(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (npy_clongdouble_wrapper*)a[5]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_matvec_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_matvec(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_bool_wrapper*)a[5], (npy_bool_wrapper*)a[6]);
            return 0;
        case 2:
            (void)csr_matvec(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_byte*)a[5], (npy_byte*)a[6]);
            return 0;
        case 3:
            (void)csr_matvec(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_ubyte*)a[5], (npy_ubyte*)a[6]);
            return 0;
        case 4:
            (void)csr_matvec(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_short*)a[5], (npy_short*)a[6]);
            return 0;
        case 5:
            (void)csr_matvec(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_ushort*)a[5], (npy_ushort*)a[6]);
            return 0;
        case 6:
            (void)csr_matvec(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int*)a[5], (npy_int*)a[6]);
            return 0;
        case 7:
            (void)csr_matvec(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_uint*)a[5], (npy_uint*)a[6]);
            return 0;
        case 8:
            (void)csr_matvec(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_long*)a[5], (npy_long*)a[6]);
            return 0;
        case 9:
            (void)csr_matvec(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_ulong*)a[5], (npy_ulong*)a[6]);
            return 0;
        case 10:
            (void)csr_matvec(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_longlong*)a[5], (npy_longlong*)a[6]);
            return 0;
        case 11:
            (void)csr_matvec(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_ulonglong*)a[5], (npy_ulonglong*)a[6]);
            return 0;
        case 12:
            (void)csr_matvec(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_float*)a[5], (npy_float*)a[6]);
            return 0;
        case 13:
            (void)csr_matvec(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_double*)a[5], (npy_double*)a[6]);
            return 0;
        case 14:
            (void)csr_matvec(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_longdouble*)a[5], (npy_longdouble*)a[6]);
            return 0;
        case 15:
            (void)csr_matvec(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_cfloat_wrapper*)a[5], (npy_cfloat_wrapper*)a[6]);
            return 0;
        case 16:
            (void)csr_matvec(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_cdouble_wrapper*)a[5], (npy_cdouble_wrapper*)a[6]);
            return 0;
        case 17:
            (void)csr_matvec(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_clongdouble_wrapper*)a[5], (npy_clongdouble_wrapper*)a[6]);
            return 0;
        case 19:
            (void)csr_matvec(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_bool_wrapper*)a[5], (npy_bool_wrapper*)a[6]);
            return 0;
        case 20:
            (void)csr_matvec(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_byte*)a[5], (npy_byte*)a[6]);
            return 0;
        case 21:
            (void)csr_matvec(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_ubyte*)a[5], (npy_ubyte*)a[6]);
            return 0;
        case 22:
            (void)csr_matvec(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_short*)a[5], (npy_short*)a[6]);
            return 0;
        case 23:
            (void)csr_matvec(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_ushort*)a[5], (npy_ushort*)a[6]);
            return 0;
        case 24:
            (void)csr_matvec(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int*)a[5], (npy_int*)a[6]);
            return 0;
        case 25:
            (void)csr_matvec(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_uint*)a[5], (npy_uint*)a[6]);
            return 0;
        case 26:
            (void)csr_matvec(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_long*)a[5], (npy_long*)a[6]);
            return 0;
        case 27:
            (void)csr_matvec(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_ulong*)a[5], (npy_ulong*)a[6]);
            return 0;
        case 28:
            (void)csr_matvec(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_longlong*)a[5], (npy_longlong*)a[6]);
            return 0;
        case 29:
            (void)csr_matvec(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_ulonglong*)a[5], (npy_ulonglong*)a[6]);
            return 0;
        case 30:
            (void)csr_matvec(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_float*)a[5], (npy_float*)a[6]);
            return 0;
        case 31:
            (void)csr_matvec(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_double*)a[5], (npy_double*)a[6]);
            return 0;
        case 32:
            (void)csr_matvec(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_longdouble*)a[5], (npy_longdouble*)a[6]);
            return 0;
        case 33:
            (void)csr_matvec(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_cfloat_wrapper*)a[5], (npy_cfloat_wrapper*)a[6]);
            return 0;
        case 34:
            (void)csr_matvec(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_cdouble_wrapper*)a[5], (npy_cdouble_wrapper*)a[6]);
            return 0;
        case 35:
            (void)csr_matvec(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_clongdouble_wrapper*)a[5], (npy_clongdouble_wrapper*)a[6]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_matvecs_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_matvecs(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_bool_wrapper*)a[5], (const npy_bool_wrapper*)a[6], (npy_bool_wrapper*)a[7]);
            return 0;
        case 2:
            (void)csr_matvecs(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_byte*)a[5], (const npy_byte*)a[6], (npy_byte*)a[7]);
            return 0;
        case 3:
            (void)csr_matvecs(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ubyte*)a[5], (const npy_ubyte*)a[6], (npy_ubyte*)a[7]);
            return 0;
        case 4:
            (void)csr_matvecs(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_short*)a[5], (const npy_short*)a[6], (npy_short*)a[7]);
            return 0;
        case 5:
            (void)csr_matvecs(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ushort*)a[5], (const npy_ushort*)a[6], (npy_ushort*)a[7]);
            return 0;
        case 6:
            (void)csr_matvecs(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int*)a[5], (const npy_int*)a[6], (npy_int*)a[7]);
            return 0;
        case 7:
            (void)csr_matvecs(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_uint*)a[5], (const npy_uint*)a[6], (npy_uint*)a[7]);
            return 0;
        case 8:
            (void)csr_matvecs(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_long*)a[5], (const npy_long*)a[6], (npy_long*)a[7]);
            return 0;
        case 9:
            (void)csr_matvecs(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ulong*)a[5], (const npy_ulong*)a[6], (npy_ulong*)a[7]);
            return 0;
        case 10:
            (void)csr_matvecs(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_longlong*)a[5], (const npy_longlong*)a[6], (npy_longlong*)a[7]);
            return 0;
        case 11:
            (void)csr_matvecs(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ulonglong*)a[5], (const npy_ulonglong*)a[6], (npy_ulonglong*)a[7]);
            return 0;
        case 12:
            (void)csr_matvecs(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_float*)a[5], (const npy_float*)a[6], (npy_float*)a[7]);
            return 0;
        case 13:
            (void)csr_matvecs(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_double*)a[5], (const npy_double*)a[6], (npy_double*)a[7]);
            return 0;
        case 14:
            (void)csr_matvecs(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_longdouble*)a[5], (const npy_longdouble*)a[6], (npy_longdouble*)a[7]);
            return 0;
        case 15:
            (void)csr_matvecs(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_cfloat_wrapper*)a[5], (const npy_cfloat_wrapper*)a[6], (npy_cfloat_wrapper*)a[7]);
            return 0;
        case 16:
            (void)csr_matvecs(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_cdouble_wrapper*)a[5], (const npy_cdouble_wrapper*)a[6], (npy_cdouble_wrapper*)a[7]);
            return 0;
        case 17:
            (void)csr_matvecs(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_clongdouble_wrapper*)a[5], (const npy_clongdouble_wrapper*)a[6], (npy_clongdouble_wrapper*)a[7]);
            return 0;
        case 19:
            (void)csr_matvecs(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_bool_wrapper*)a[5], (const npy_bool_wrapper*)a[6], (npy_bool_wrapper*)a[7]);
            return 0;
        case 20:
            (void)csr_matvecs(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_byte*)a[5], (const npy_byte*)a[6], (npy_byte*)a[7]);
            return 0;
        case 21:
            (void)csr_matvecs(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ubyte*)a[5], (const npy_ubyte*)a[6], (npy_ubyte*)a[7]);
            return 0;
        case 22:
            (void)csr_matvecs(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_short*)a[5], (const npy_short*)a[6], (npy_short*)a[7]);
            return 0;
        case 23:
            (void)csr_matvecs(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ushort*)a[5], (const npy_ushort*)a[6], (npy_ushort*)a[7]);
            return 0;
        case 24:
            (void)csr_matvecs(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int*)a[5], (const npy_int*)a[6], (npy_int*)a[7]);
            return 0;
        case 25:
            (void)csr_matvecs(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_uint*)a[5], (const npy_uint*)a[6], (npy_uint*)a[7]);
            return 0;
        case 26:
            (void)csr_matvecs(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_long*)a[5], (const npy_long*)a[6], (npy_long*)a[7]);
            return 0;
        case 27:
            (void)csr_matvecs(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ulong*)a[5], (const npy_ulong*)a[6], (npy_ulong*)a[7]);
            return 0;
        case 28:
            (void)csr_matvecs(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_longlong*)a[5], (const npy_longlong*)a[6], (npy_longlong*)a[7]);
            return 0;
        case 29:
            (void)csr_matvecs(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ulonglong*)a[5], (const npy_ulonglong*)a[6], (npy_ulonglong*)a[7]);
            return 0;
        case 30:
            (void)csr_matvecs(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_float*)a[5], (const npy_float*)a[6], (npy_float*)a[7]);
            return 0;
        case 31:
            (void)csr_matvecs(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_double*)a[5], (const npy_double*)a[6], (npy_double*)a[7]);
            return 0;
        case 32:
            (void)csr_matvecs(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_longdouble*)a[5], (const npy_longdouble*)a[6], (npy_longdouble*)a[7]);
            return 0;
        case 33:
            (void)csr_matvecs(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_cfloat_wrapper*)a[5], (const npy_cfloat_wrapper*)a[6], (npy_cfloat_wrapper*)a[7]);
            return 0;
        case 34:
            (void)csr_matvecs(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_cdouble_wrapper*)a[5], (const npy_cdouble_wrapper*)a[6], (npy_cdouble_wrapper*)a[7]);
            return 0;
        case 35:
            (void)csr_matvecs(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_clongdouble_wrapper*)a[5], (const npy_clongdouble_wrapper*)a[6], (npy_clongdouble_wrapper*)a[7]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_elmul_csr_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_elmul_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csr_elmul_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_byte*)a[10]);
            return 0;
        case 3:
            (void)csr_elmul_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 4:
            (void)csr_elmul_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_short*)a[10]);
            return 0;
        case 5:
            (void)csr_elmul_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 6:
            (void)csr_elmul_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_int*)a[10]);
            return 0;
        case 7:
            (void)csr_elmul_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_uint*)a[10]);
            return 0;
        case 8:
            (void)csr_elmul_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_long*)a[10]);
            return 0;
        case 9:
            (void)csr_elmul_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 10:
            (void)csr_elmul_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 11:
            (void)csr_elmul_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 12:
            (void)csr_elmul_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_float*)a[10]);
            return 0;
        case 13:
            (void)csr_elmul_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_double*)a[10]);
            return 0;
        case 14:
            (void)csr_elmul_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 15:
            (void)csr_elmul_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csr_elmul_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csr_elmul_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csr_elmul_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csr_elmul_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_byte*)a[10]);
            return 0;
        case 21:
            (void)csr_elmul_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 22:
            (void)csr_elmul_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_short*)a[10]);
            return 0;
        case 23:
            (void)csr_elmul_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 24:
            (void)csr_elmul_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_int*)a[10]);
            return 0;
        case 25:
            (void)csr_elmul_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_uint*)a[10]);
            return 0;
        case 26:
            (void)csr_elmul_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_long*)a[10]);
            return 0;
        case 27:
            (void)csr_elmul_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 28:
            (void)csr_elmul_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 29:
            (void)csr_elmul_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 30:
            (void)csr_elmul_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_float*)a[10]);
            return 0;
        case 31:
            (void)csr_elmul_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_double*)a[10]);
            return 0;
        case 32:
            (void)csr_elmul_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 33:
            (void)csr_elmul_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csr_elmul_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csr_elmul_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_eldiv_csr_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_eldiv_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csr_eldiv_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_byte*)a[10]);
            return 0;
        case 3:
            (void)csr_eldiv_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 4:
            (void)csr_eldiv_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_short*)a[10]);
            return 0;
        case 5:
            (void)csr_eldiv_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 6:
            (void)csr_eldiv_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_int*)a[10]);
            return 0;
        case 7:
            (void)csr_eldiv_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_uint*)a[10]);
            return 0;
        case 8:
            (void)csr_eldiv_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_long*)a[10]);
            return 0;
        case 9:
            (void)csr_eldiv_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 10:
            (void)csr_eldiv_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 11:
            (void)csr_eldiv_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 12:
            (void)csr_eldiv_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_float*)a[10]);
            return 0;
        case 13:
            (void)csr_eldiv_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_double*)a[10]);
            return 0;
        case 14:
            (void)csr_eldiv_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 15:
            (void)csr_eldiv_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csr_eldiv_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csr_eldiv_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csr_eldiv_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csr_eldiv_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_byte*)a[10]);
            return 0;
        case 21:
            (void)csr_eldiv_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 22:
            (void)csr_eldiv_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_short*)a[10]);
            return 0;
        case 23:
            (void)csr_eldiv_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 24:
            (void)csr_eldiv_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_int*)a[10]);
            return 0;
        case 25:
            (void)csr_eldiv_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_uint*)a[10]);
            return 0;
        case 26:
            (void)csr_eldiv_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_long*)a[10]);
            return 0;
        case 27:
            (void)csr_eldiv_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 28:
            (void)csr_eldiv_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 29:
            (void)csr_eldiv_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 30:
            (void)csr_eldiv_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_float*)a[10]);
            return 0;
        case 31:
            (void)csr_eldiv_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_double*)a[10]);
            return 0;
        case 32:
            (void)csr_eldiv_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 33:
            (void)csr_eldiv_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csr_eldiv_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csr_eldiv_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_plus_csr_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_plus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csr_plus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_byte*)a[10]);
            return 0;
        case 3:
            (void)csr_plus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 4:
            (void)csr_plus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_short*)a[10]);
            return 0;
        case 5:
            (void)csr_plus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 6:
            (void)csr_plus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_int*)a[10]);
            return 0;
        case 7:
            (void)csr_plus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_uint*)a[10]);
            return 0;
        case 8:
            (void)csr_plus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_long*)a[10]);
            return 0;
        case 9:
            (void)csr_plus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 10:
            (void)csr_plus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 11:
            (void)csr_plus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 12:
            (void)csr_plus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_float*)a[10]);
            return 0;
        case 13:
            (void)csr_plus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_double*)a[10]);
            return 0;
        case 14:
            (void)csr_plus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 15:
            (void)csr_plus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csr_plus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csr_plus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csr_plus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csr_plus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_byte*)a[10]);
            return 0;
        case 21:
            (void)csr_plus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 22:
            (void)csr_plus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_short*)a[10]);
            return 0;
        case 23:
            (void)csr_plus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 24:
            (void)csr_plus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_int*)a[10]);
            return 0;
        case 25:
            (void)csr_plus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_uint*)a[10]);
            return 0;
        case 26:
            (void)csr_plus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_long*)a[10]);
            return 0;
        case 27:
            (void)csr_plus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 28:
            (void)csr_plus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 29:
            (void)csr_plus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 30:
            (void)csr_plus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_float*)a[10]);
            return 0;
        case 31:
            (void)csr_plus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_double*)a[10]);
            return 0;
        case 32:
            (void)csr_plus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 33:
            (void)csr_plus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csr_plus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csr_plus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_minus_csr_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_minus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csr_minus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_byte*)a[10]);
            return 0;
        case 3:
            (void)csr_minus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 4:
            (void)csr_minus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_short*)a[10]);
            return 0;
        case 5:
            (void)csr_minus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 6:
            (void)csr_minus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_int*)a[10]);
            return 0;
        case 7:
            (void)csr_minus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_uint*)a[10]);
            return 0;
        case 8:
            (void)csr_minus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_long*)a[10]);
            return 0;
        case 9:
            (void)csr_minus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 10:
            (void)csr_minus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 11:
            (void)csr_minus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 12:
            (void)csr_minus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_float*)a[10]);
            return 0;
        case 13:
            (void)csr_minus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_double*)a[10]);
            return 0;
        case 14:
            (void)csr_minus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 15:
            (void)csr_minus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csr_minus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csr_minus_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csr_minus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csr_minus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_byte*)a[10]);
            return 0;
        case 21:
            (void)csr_minus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 22:
            (void)csr_minus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_short*)a[10]);
            return 0;
        case 23:
            (void)csr_minus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 24:
            (void)csr_minus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_int*)a[10]);
            return 0;
        case 25:
            (void)csr_minus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_uint*)a[10]);
            return 0;
        case 26:
            (void)csr_minus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_long*)a[10]);
            return 0;
        case 27:
            (void)csr_minus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 28:
            (void)csr_minus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 29:
            (void)csr_minus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 30:
            (void)csr_minus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_float*)a[10]);
            return 0;
        case 31:
            (void)csr_minus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_double*)a[10]);
            return 0;
        case 32:
            (void)csr_minus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 33:
            (void)csr_minus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csr_minus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csr_minus_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_maximum_csr_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_maximum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csr_maximum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_byte*)a[10]);
            return 0;
        case 3:
            (void)csr_maximum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 4:
            (void)csr_maximum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_short*)a[10]);
            return 0;
        case 5:
            (void)csr_maximum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 6:
            (void)csr_maximum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_int*)a[10]);
            return 0;
        case 7:
            (void)csr_maximum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_uint*)a[10]);
            return 0;
        case 8:
            (void)csr_maximum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_long*)a[10]);
            return 0;
        case 9:
            (void)csr_maximum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 10:
            (void)csr_maximum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 11:
            (void)csr_maximum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 12:
            (void)csr_maximum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_float*)a[10]);
            return 0;
        case 13:
            (void)csr_maximum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_double*)a[10]);
            return 0;
        case 14:
            (void)csr_maximum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 15:
            (void)csr_maximum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csr_maximum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csr_maximum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csr_maximum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csr_maximum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_byte*)a[10]);
            return 0;
        case 21:
            (void)csr_maximum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 22:
            (void)csr_maximum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_short*)a[10]);
            return 0;
        case 23:
            (void)csr_maximum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 24:
            (void)csr_maximum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_int*)a[10]);
            return 0;
        case 25:
            (void)csr_maximum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_uint*)a[10]);
            return 0;
        case 26:
            (void)csr_maximum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_long*)a[10]);
            return 0;
        case 27:
            (void)csr_maximum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 28:
            (void)csr_maximum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 29:
            (void)csr_maximum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 30:
            (void)csr_maximum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_float*)a[10]);
            return 0;
        case 31:
            (void)csr_maximum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_double*)a[10]);
            return 0;
        case 32:
            (void)csr_maximum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 33:
            (void)csr_maximum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csr_maximum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csr_maximum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_minimum_csr_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_minimum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csr_minimum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_byte*)a[10]);
            return 0;
        case 3:
            (void)csr_minimum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 4:
            (void)csr_minimum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_short*)a[10]);
            return 0;
        case 5:
            (void)csr_minimum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 6:
            (void)csr_minimum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_int*)a[10]);
            return 0;
        case 7:
            (void)csr_minimum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_uint*)a[10]);
            return 0;
        case 8:
            (void)csr_minimum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_long*)a[10]);
            return 0;
        case 9:
            (void)csr_minimum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 10:
            (void)csr_minimum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 11:
            (void)csr_minimum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 12:
            (void)csr_minimum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_float*)a[10]);
            return 0;
        case 13:
            (void)csr_minimum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_double*)a[10]);
            return 0;
        case 14:
            (void)csr_minimum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 15:
            (void)csr_minimum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csr_minimum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csr_minimum_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csr_minimum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csr_minimum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_byte*)a[10]);
            return 0;
        case 21:
            (void)csr_minimum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 22:
            (void)csr_minimum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_short*)a[10]);
            return 0;
        case 23:
            (void)csr_minimum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 24:
            (void)csr_minimum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_int*)a[10]);
            return 0;
        case 25:
            (void)csr_minimum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_uint*)a[10]);
            return 0;
        case 26:
            (void)csr_minimum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_long*)a[10]);
            return 0;
        case 27:
            (void)csr_minimum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 28:
            (void)csr_minimum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 29:
            (void)csr_minimum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 30:
            (void)csr_minimum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_float*)a[10]);
            return 0;
        case 31:
            (void)csr_minimum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_double*)a[10]);
            return 0;
        case 32:
            (void)csr_minimum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 33:
            (void)csr_minimum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csr_minimum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csr_minimum_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_ne_csr_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_ne_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csr_ne_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 3:
            (void)csr_ne_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 4:
            (void)csr_ne_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 5:
            (void)csr_ne_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 6:
            (void)csr_ne_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 7:
            (void)csr_ne_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 8:
            (void)csr_ne_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 9:
            (void)csr_ne_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 10:
            (void)csr_ne_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 11:
            (void)csr_ne_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 12:
            (void)csr_ne_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 13:
            (void)csr_ne_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 14:
            (void)csr_ne_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 15:
            (void)csr_ne_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csr_ne_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csr_ne_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csr_ne_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csr_ne_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 21:
            (void)csr_ne_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 22:
            (void)csr_ne_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 23:
            (void)csr_ne_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 24:
            (void)csr_ne_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 25:
            (void)csr_ne_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 26:
            (void)csr_ne_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 27:
            (void)csr_ne_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 28:
            (void)csr_ne_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 29:
            (void)csr_ne_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 30:
            (void)csr_ne_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 31:
            (void)csr_ne_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 32:
            (void)csr_ne_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 33:
            (void)csr_ne_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csr_ne_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csr_ne_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_lt_csr_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_lt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csr_lt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 3:
            (void)csr_lt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 4:
            (void)csr_lt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 5:
            (void)csr_lt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 6:
            (void)csr_lt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 7:
            (void)csr_lt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 8:
            (void)csr_lt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 9:
            (void)csr_lt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 10:
            (void)csr_lt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 11:
            (void)csr_lt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 12:
            (void)csr_lt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 13:
            (void)csr_lt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 14:
            (void)csr_lt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 15:
            (void)csr_lt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csr_lt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csr_lt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csr_lt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csr_lt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 21:
            (void)csr_lt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 22:
            (void)csr_lt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 23:
            (void)csr_lt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 24:
            (void)csr_lt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 25:
            (void)csr_lt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 26:
            (void)csr_lt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 27:
            (void)csr_lt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 28:
            (void)csr_lt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 29:
            (void)csr_lt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 30:
            (void)csr_lt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 31:
            (void)csr_lt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 32:
            (void)csr_lt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 33:
            (void)csr_lt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csr_lt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csr_lt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_gt_csr_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_gt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csr_gt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 3:
            (void)csr_gt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 4:
            (void)csr_gt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 5:
            (void)csr_gt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 6:
            (void)csr_gt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 7:
            (void)csr_gt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 8:
            (void)csr_gt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 9:
            (void)csr_gt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 10:
            (void)csr_gt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 11:
            (void)csr_gt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 12:
            (void)csr_gt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 13:
            (void)csr_gt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 14:
            (void)csr_gt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 15:
            (void)csr_gt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csr_gt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csr_gt_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csr_gt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csr_gt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 21:
            (void)csr_gt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 22:
            (void)csr_gt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 23:
            (void)csr_gt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 24:
            (void)csr_gt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 25:
            (void)csr_gt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 26:
            (void)csr_gt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 27:
            (void)csr_gt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 28:
            (void)csr_gt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 29:
            (void)csr_gt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 30:
            (void)csr_gt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 31:
            (void)csr_gt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 32:
            (void)csr_gt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 33:
            (void)csr_gt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csr_gt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csr_gt_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_le_csr_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_le_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csr_le_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 3:
            (void)csr_le_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 4:
            (void)csr_le_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 5:
            (void)csr_le_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 6:
            (void)csr_le_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 7:
            (void)csr_le_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 8:
            (void)csr_le_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 9:
            (void)csr_le_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 10:
            (void)csr_le_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 11:
            (void)csr_le_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 12:
            (void)csr_le_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 13:
            (void)csr_le_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 14:
            (void)csr_le_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 15:
            (void)csr_le_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csr_le_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csr_le_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csr_le_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csr_le_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 21:
            (void)csr_le_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 22:
            (void)csr_le_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 23:
            (void)csr_le_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 24:
            (void)csr_le_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 25:
            (void)csr_le_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 26:
            (void)csr_le_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 27:
            (void)csr_le_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 28:
            (void)csr_le_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 29:
            (void)csr_le_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 30:
            (void)csr_le_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 31:
            (void)csr_le_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 32:
            (void)csr_le_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 33:
            (void)csr_le_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csr_le_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csr_le_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_ge_csr_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_ge_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csr_ge_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 3:
            (void)csr_ge_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 4:
            (void)csr_ge_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 5:
            (void)csr_ge_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 6:
            (void)csr_ge_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 7:
            (void)csr_ge_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 8:
            (void)csr_ge_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 9:
            (void)csr_ge_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 10:
            (void)csr_ge_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 11:
            (void)csr_ge_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 12:
            (void)csr_ge_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 13:
            (void)csr_ge_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 14:
            (void)csr_ge_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 15:
            (void)csr_ge_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csr_ge_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csr_ge_csr(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csr_ge_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csr_ge_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 21:
            (void)csr_ge_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 22:
            (void)csr_ge_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 23:
            (void)csr_ge_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 24:
            (void)csr_ge_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 25:
            (void)csr_ge_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 26:
            (void)csr_ge_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 27:
            (void)csr_ge_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 28:
            (void)csr_ge_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 29:
            (void)csr_ge_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 30:
            (void)csr_ge_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 31:
            (void)csr_ge_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 32:
            (void)csr_ge_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 33:
            (void)csr_ge_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csr_ge_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csr_ge_csr(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_scale_rows_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_scale_rows(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_bool_wrapper*)a[4], (const npy_bool_wrapper*)a[5]);
            return 0;
        case 2:
            (void)csr_scale_rows(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_byte*)a[4], (const npy_byte*)a[5]);
            return 0;
        case 3:
            (void)csr_scale_rows(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_ubyte*)a[4], (const npy_ubyte*)a[5]);
            return 0;
        case 4:
            (void)csr_scale_rows(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_short*)a[4], (const npy_short*)a[5]);
            return 0;
        case 5:
            (void)csr_scale_rows(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_ushort*)a[4], (const npy_ushort*)a[5]);
            return 0;
        case 6:
            (void)csr_scale_rows(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_int*)a[4], (const npy_int*)a[5]);
            return 0;
        case 7:
            (void)csr_scale_rows(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_uint*)a[4], (const npy_uint*)a[5]);
            return 0;
        case 8:
            (void)csr_scale_rows(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_long*)a[4], (const npy_long*)a[5]);
            return 0;
        case 9:
            (void)csr_scale_rows(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_ulong*)a[4], (const npy_ulong*)a[5]);
            return 0;
        case 10:
            (void)csr_scale_rows(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_longlong*)a[4], (const npy_longlong*)a[5]);
            return 0;
        case 11:
            (void)csr_scale_rows(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_ulonglong*)a[4], (const npy_ulonglong*)a[5]);
            return 0;
        case 12:
            (void)csr_scale_rows(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_float*)a[4], (const npy_float*)a[5]);
            return 0;
        case 13:
            (void)csr_scale_rows(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_double*)a[4], (const npy_double*)a[5]);
            return 0;
        case 14:
            (void)csr_scale_rows(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_longdouble*)a[4], (const npy_longdouble*)a[5]);
            return 0;
        case 15:
            (void)csr_scale_rows(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_cfloat_wrapper*)a[4], (const npy_cfloat_wrapper*)a[5]);
            return 0;
        case 16:
            (void)csr_scale_rows(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_cdouble_wrapper*)a[4], (const npy_cdouble_wrapper*)a[5]);
            return 0;
        case 17:
            (void)csr_scale_rows(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_clongdouble_wrapper*)a[4], (const npy_clongdouble_wrapper*)a[5]);
            return 0;
        case 19:
            (void)csr_scale_rows(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_bool_wrapper*)a[4], (const npy_bool_wrapper*)a[5]);
            return 0;
        case 20:
            (void)csr_scale_rows(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_byte*)a[4], (const npy_byte*)a[5]);
            return 0;
        case 21:
            (void)csr_scale_rows(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_ubyte*)a[4], (const npy_ubyte*)a[5]);
            return 0;
        case 22:
            (void)csr_scale_rows(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_short*)a[4], (const npy_short*)a[5]);
            return 0;
        case 23:
            (void)csr_scale_rows(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_ushort*)a[4], (const npy_ushort*)a[5]);
            return 0;
        case 24:
            (void)csr_scale_rows(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_int*)a[4], (const npy_int*)a[5]);
            return 0;
        case 25:
            (void)csr_scale_rows(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_uint*)a[4], (const npy_uint*)a[5]);
            return 0;
        case 26:
            (void)csr_scale_rows(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_long*)a[4], (const npy_long*)a[5]);
            return 0;
        case 27:
            (void)csr_scale_rows(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_ulong*)a[4], (const npy_ulong*)a[5]);
            return 0;
        case 28:
            (void)csr_scale_rows(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_longlong*)a[4], (const npy_longlong*)a[5]);
            return 0;
        case 29:
            (void)csr_scale_rows(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_ulonglong*)a[4], (const npy_ulonglong*)a[5]);
            return 0;
        case 30:
            (void)csr_scale_rows(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_float*)a[4], (const npy_float*)a[5]);
            return 0;
        case 31:
            (void)csr_scale_rows(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_double*)a[4], (const npy_double*)a[5]);
            return 0;
        case 32:
            (void)csr_scale_rows(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_longdouble*)a[4], (const npy_longdouble*)a[5]);
            return 0;
        case 33:
            (void)csr_scale_rows(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_cfloat_wrapper*)a[4], (const npy_cfloat_wrapper*)a[5]);
            return 0;
        case 34:
            (void)csr_scale_rows(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_cdouble_wrapper*)a[4], (const npy_cdouble_wrapper*)a[5]);
            return 0;
        case 35:
            (void)csr_scale_rows(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_clongdouble_wrapper*)a[4], (const npy_clongdouble_wrapper*)a[5]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_scale_columns_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_scale_columns(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_bool_wrapper*)a[4], (const npy_bool_wrapper*)a[5]);
            return 0;
        case 2:
            (void)csr_scale_columns(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_byte*)a[4], (const npy_byte*)a[5]);
            return 0;
        case 3:
            (void)csr_scale_columns(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_ubyte*)a[4], (const npy_ubyte*)a[5]);
            return 0;
        case 4:
            (void)csr_scale_columns(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_short*)a[4], (const npy_short*)a[5]);
            return 0;
        case 5:
            (void)csr_scale_columns(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_ushort*)a[4], (const npy_ushort*)a[5]);
            return 0;
        case 6:
            (void)csr_scale_columns(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_int*)a[4], (const npy_int*)a[5]);
            return 0;
        case 7:
            (void)csr_scale_columns(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_uint*)a[4], (const npy_uint*)a[5]);
            return 0;
        case 8:
            (void)csr_scale_columns(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_long*)a[4], (const npy_long*)a[5]);
            return 0;
        case 9:
            (void)csr_scale_columns(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_ulong*)a[4], (const npy_ulong*)a[5]);
            return 0;
        case 10:
            (void)csr_scale_columns(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_longlong*)a[4], (const npy_longlong*)a[5]);
            return 0;
        case 11:
            (void)csr_scale_columns(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_ulonglong*)a[4], (const npy_ulonglong*)a[5]);
            return 0;
        case 12:
            (void)csr_scale_columns(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_float*)a[4], (const npy_float*)a[5]);
            return 0;
        case 13:
            (void)csr_scale_columns(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_double*)a[4], (const npy_double*)a[5]);
            return 0;
        case 14:
            (void)csr_scale_columns(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_longdouble*)a[4], (const npy_longdouble*)a[5]);
            return 0;
        case 15:
            (void)csr_scale_columns(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_cfloat_wrapper*)a[4], (const npy_cfloat_wrapper*)a[5]);
            return 0;
        case 16:
            (void)csr_scale_columns(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_cdouble_wrapper*)a[4], (const npy_cdouble_wrapper*)a[5]);
            return 0;
        case 17:
            (void)csr_scale_columns(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (npy_clongdouble_wrapper*)a[4], (const npy_clongdouble_wrapper*)a[5]);
            return 0;
        case 19:
            (void)csr_scale_columns(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_bool_wrapper*)a[4], (const npy_bool_wrapper*)a[5]);
            return 0;
        case 20:
            (void)csr_scale_columns(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_byte*)a[4], (const npy_byte*)a[5]);
            return 0;
        case 21:
            (void)csr_scale_columns(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_ubyte*)a[4], (const npy_ubyte*)a[5]);
            return 0;
        case 22:
            (void)csr_scale_columns(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_short*)a[4], (const npy_short*)a[5]);
            return 0;
        case 23:
            (void)csr_scale_columns(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_ushort*)a[4], (const npy_ushort*)a[5]);
            return 0;
        case 24:
            (void)csr_scale_columns(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_int*)a[4], (const npy_int*)a[5]);
            return 0;
        case 25:
            (void)csr_scale_columns(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_uint*)a[4], (const npy_uint*)a[5]);
            return 0;
        case 26:
            (void)csr_scale_columns(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_long*)a[4], (const npy_long*)a[5]);
            return 0;
        case 27:
            (void)csr_scale_columns(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_ulong*)a[4], (const npy_ulong*)a[5]);
            return 0;
        case 28:
            (void)csr_scale_columns(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_longlong*)a[4], (const npy_longlong*)a[5]);
            return 0;
        case 29:
            (void)csr_scale_columns(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_ulonglong*)a[4], (const npy_ulonglong*)a[5]);
            return 0;
        case 30:
            (void)csr_scale_columns(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_float*)a[4], (const npy_float*)a[5]);
            return 0;
        case 31:
            (void)csr_scale_columns(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_double*)a[4], (const npy_double*)a[5]);
            return 0;
        case 32:
            (void)csr_scale_columns(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_longdouble*)a[4], (const npy_longdouble*)a[5]);
            return 0;
        case 33:
            (void)csr_scale_columns(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_cfloat_wrapper*)a[4], (const npy_cfloat_wrapper*)a[5]);
            return 0;
        case 34:
            (void)csr_scale_columns(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_cdouble_wrapper*)a[4], (const npy_cdouble_wrapper*)a[5]);
            return 0;
        case 35:
            (void)csr_scale_columns(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (npy_clongdouble_wrapper*)a[4], (const npy_clongdouble_wrapper*)a[5]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_sort_indices_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_sort_indices(*(const npy_int32*)a[0], (const npy_int32*)a[1], (npy_int32*)a[2], (npy_bool_wrapper*)a[3]);
            return 0;
        case 2:
            (void)csr_sort_indices(*(const npy_int32*)a[0], (const npy_int32*)a[1], (npy_int32*)a[2], (npy_byte*)a[3]);
            return 0;
        case 3:
            (void)csr_sort_indices(*(const npy_int32*)a[0], (const npy_int32*)a[1], (npy_int32*)a[2], (npy_ubyte*)a[3]);
            return 0;
        case 4:
            (void)csr_sort_indices(*(const npy_int32*)a[0], (const npy_int32*)a[1], (npy_int32*)a[2], (npy_short*)a[3]);
            return 0;
        case 5:
            (void)csr_sort_indices(*(const npy_int32*)a[0], (const npy_int32*)a[1], (npy_int32*)a[2], (npy_ushort*)a[3]);
            return 0;
        case 6:
            (void)csr_sort_indices(*(const npy_int32*)a[0], (const npy_int32*)a[1], (npy_int32*)a[2], (npy_int*)a[3]);
            return 0;
        case 7:
            (void)csr_sort_indices(*(const npy_int32*)a[0], (const npy_int32*)a[1], (npy_int32*)a[2], (npy_uint*)a[3]);
            return 0;
        case 8:
            (void)csr_sort_indices(*(const npy_int32*)a[0], (const npy_int32*)a[1], (npy_int32*)a[2], (npy_long*)a[3]);
            return 0;
        case 9:
            (void)csr_sort_indices(*(const npy_int32*)a[0], (const npy_int32*)a[1], (npy_int32*)a[2], (npy_ulong*)a[3]);
            return 0;
        case 10:
            (void)csr_sort_indices(*(const npy_int32*)a[0], (const npy_int32*)a[1], (npy_int32*)a[2], (npy_longlong*)a[3]);
            return 0;
        case 11:
            (void)csr_sort_indices(*(const npy_int32*)a[0], (const npy_int32*)a[1], (npy_int32*)a[2], (npy_ulonglong*)a[3]);
            return 0;
        case 12:
            (void)csr_sort_indices(*(const npy_int32*)a[0], (const npy_int32*)a[1], (npy_int32*)a[2], (npy_float*)a[3]);
            return 0;
        case 13:
            (void)csr_sort_indices(*(const npy_int32*)a[0], (const npy_int32*)a[1], (npy_int32*)a[2], (npy_double*)a[3]);
            return 0;
        case 14:
            (void)csr_sort_indices(*(const npy_int32*)a[0], (const npy_int32*)a[1], (npy_int32*)a[2], (npy_longdouble*)a[3]);
            return 0;
        case 15:
            (void)csr_sort_indices(*(const npy_int32*)a[0], (const npy_int32*)a[1], (npy_int32*)a[2], (npy_cfloat_wrapper*)a[3]);
            return 0;
        case 16:
            (void)csr_sort_indices(*(const npy_int32*)a[0], (const npy_int32*)a[1], (npy_int32*)a[2], (npy_cdouble_wrapper*)a[3]);
            return 0;
        case 17:
            (void)csr_sort_indices(*(const npy_int32*)a[0], (const npy_int32*)a[1], (npy_int32*)a[2], (npy_clongdouble_wrapper*)a[3]);
            return 0;
        case 19:
            (void)csr_sort_indices(*(const npy_int64*)a[0], (const npy_int64*)a[1], (npy_int64*)a[2], (npy_bool_wrapper*)a[3]);
            return 0;
        case 20:
            (void)csr_sort_indices(*(const npy_int64*)a[0], (const npy_int64*)a[1], (npy_int64*)a[2], (npy_byte*)a[3]);
            return 0;
        case 21:
            (void)csr_sort_indices(*(const npy_int64*)a[0], (const npy_int64*)a[1], (npy_int64*)a[2], (npy_ubyte*)a[3]);
            return 0;
        case 22:
            (void)csr_sort_indices(*(const npy_int64*)a[0], (const npy_int64*)a[1], (npy_int64*)a[2], (npy_short*)a[3]);
            return 0;
        case 23:
            (void)csr_sort_indices(*(const npy_int64*)a[0], (const npy_int64*)a[1], (npy_int64*)a[2], (npy_ushort*)a[3]);
            return 0;
        case 24:
            (void)csr_sort_indices(*(const npy_int64*)a[0], (const npy_int64*)a[1], (npy_int64*)a[2], (npy_int*)a[3]);
            return 0;
        case 25:
            (void)csr_sort_indices(*(const npy_int64*)a[0], (const npy_int64*)a[1], (npy_int64*)a[2], (npy_uint*)a[3]);
            return 0;
        case 26:
            (void)csr_sort_indices(*(const npy_int64*)a[0], (const npy_int64*)a[1], (npy_int64*)a[2], (npy_long*)a[3]);
            return 0;
        case 27:
            (void)csr_sort_indices(*(const npy_int64*)a[0], (const npy_int64*)a[1], (npy_int64*)a[2], (npy_ulong*)a[3]);
            return 0;
        case 28:
            (void)csr_sort_indices(*(const npy_int64*)a[0], (const npy_int64*)a[1], (npy_int64*)a[2], (npy_longlong*)a[3]);
            return 0;
        case 29:
            (void)csr_sort_indices(*(const npy_int64*)a[0], (const npy_int64*)a[1], (npy_int64*)a[2], (npy_ulonglong*)a[3]);
            return 0;
        case 30:
            (void)csr_sort_indices(*(const npy_int64*)a[0], (const npy_int64*)a[1], (npy_int64*)a[2], (npy_float*)a[3]);
            return 0;
        case 31:
            (void)csr_sort_indices(*(const npy_int64*)a[0], (const npy_int64*)a[1], (npy_int64*)a[2], (npy_double*)a[3]);
            return 0;
        case 32:
            (void)csr_sort_indices(*(const npy_int64*)a[0], (const npy_int64*)a[1], (npy_int64*)a[2], (npy_longdouble*)a[3]);
            return 0;
        case 33:
            (void)csr_sort_indices(*(const npy_int64*)a[0], (const npy_int64*)a[1], (npy_int64*)a[2], (npy_cfloat_wrapper*)a[3]);
            return 0;
        case 34:
            (void)csr_sort_indices(*(const npy_int64*)a[0], (const npy_int64*)a[1], (npy_int64*)a[2], (npy_cdouble_wrapper*)a[3]);
            return 0;
        case 35:
            (void)csr_sort_indices(*(const npy_int64*)a[0], (const npy_int64*)a[1], (npy_int64*)a[2], (npy_clongdouble_wrapper*)a[3]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_eliminate_zeros_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_eliminate_zeros(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_bool_wrapper*)a[4]);
            return 0;
        case 2:
            (void)csr_eliminate_zeros(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_byte*)a[4]);
            return 0;
        case 3:
            (void)csr_eliminate_zeros(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_ubyte*)a[4]);
            return 0;
        case 4:
            (void)csr_eliminate_zeros(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_short*)a[4]);
            return 0;
        case 5:
            (void)csr_eliminate_zeros(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_ushort*)a[4]);
            return 0;
        case 6:
            (void)csr_eliminate_zeros(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_int*)a[4]);
            return 0;
        case 7:
            (void)csr_eliminate_zeros(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_uint*)a[4]);
            return 0;
        case 8:
            (void)csr_eliminate_zeros(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_long*)a[4]);
            return 0;
        case 9:
            (void)csr_eliminate_zeros(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_ulong*)a[4]);
            return 0;
        case 10:
            (void)csr_eliminate_zeros(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_longlong*)a[4]);
            return 0;
        case 11:
            (void)csr_eliminate_zeros(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_ulonglong*)a[4]);
            return 0;
        case 12:
            (void)csr_eliminate_zeros(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_float*)a[4]);
            return 0;
        case 13:
            (void)csr_eliminate_zeros(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_double*)a[4]);
            return 0;
        case 14:
            (void)csr_eliminate_zeros(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_longdouble*)a[4]);
            return 0;
        case 15:
            (void)csr_eliminate_zeros(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_cfloat_wrapper*)a[4]);
            return 0;
        case 16:
            (void)csr_eliminate_zeros(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_cdouble_wrapper*)a[4]);
            return 0;
        case 17:
            (void)csr_eliminate_zeros(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_clongdouble_wrapper*)a[4]);
            return 0;
        case 19:
            (void)csr_eliminate_zeros(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_bool_wrapper*)a[4]);
            return 0;
        case 20:
            (void)csr_eliminate_zeros(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_byte*)a[4]);
            return 0;
        case 21:
            (void)csr_eliminate_zeros(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_ubyte*)a[4]);
            return 0;
        case 22:
            (void)csr_eliminate_zeros(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_short*)a[4]);
            return 0;
        case 23:
            (void)csr_eliminate_zeros(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_ushort*)a[4]);
            return 0;
        case 24:
            (void)csr_eliminate_zeros(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_int*)a[4]);
            return 0;
        case 25:
            (void)csr_eliminate_zeros(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_uint*)a[4]);
            return 0;
        case 26:
            (void)csr_eliminate_zeros(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_long*)a[4]);
            return 0;
        case 27:
            (void)csr_eliminate_zeros(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_ulong*)a[4]);
            return 0;
        case 28:
            (void)csr_eliminate_zeros(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_longlong*)a[4]);
            return 0;
        case 29:
            (void)csr_eliminate_zeros(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_ulonglong*)a[4]);
            return 0;
        case 30:
            (void)csr_eliminate_zeros(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_float*)a[4]);
            return 0;
        case 31:
            (void)csr_eliminate_zeros(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_double*)a[4]);
            return 0;
        case 32:
            (void)csr_eliminate_zeros(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_longdouble*)a[4]);
            return 0;
        case 33:
            (void)csr_eliminate_zeros(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_cfloat_wrapper*)a[4]);
            return 0;
        case 34:
            (void)csr_eliminate_zeros(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_cdouble_wrapper*)a[4]);
            return 0;
        case 35:
            (void)csr_eliminate_zeros(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_clongdouble_wrapper*)a[4]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_sum_duplicates_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_sum_duplicates(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_bool_wrapper*)a[4]);
            return 0;
        case 2:
            (void)csr_sum_duplicates(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_byte*)a[4]);
            return 0;
        case 3:
            (void)csr_sum_duplicates(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_ubyte*)a[4]);
            return 0;
        case 4:
            (void)csr_sum_duplicates(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_short*)a[4]);
            return 0;
        case 5:
            (void)csr_sum_duplicates(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_ushort*)a[4]);
            return 0;
        case 6:
            (void)csr_sum_duplicates(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_int*)a[4]);
            return 0;
        case 7:
            (void)csr_sum_duplicates(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_uint*)a[4]);
            return 0;
        case 8:
            (void)csr_sum_duplicates(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_long*)a[4]);
            return 0;
        case 9:
            (void)csr_sum_duplicates(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_ulong*)a[4]);
            return 0;
        case 10:
            (void)csr_sum_duplicates(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_longlong*)a[4]);
            return 0;
        case 11:
            (void)csr_sum_duplicates(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_ulonglong*)a[4]);
            return 0;
        case 12:
            (void)csr_sum_duplicates(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_float*)a[4]);
            return 0;
        case 13:
            (void)csr_sum_duplicates(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_double*)a[4]);
            return 0;
        case 14:
            (void)csr_sum_duplicates(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_longdouble*)a[4]);
            return 0;
        case 15:
            (void)csr_sum_duplicates(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_cfloat_wrapper*)a[4]);
            return 0;
        case 16:
            (void)csr_sum_duplicates(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_cdouble_wrapper*)a[4]);
            return 0;
        case 17:
            (void)csr_sum_duplicates(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (npy_int32*)a[2], (npy_int32*)a[3], (npy_clongdouble_wrapper*)a[4]);
            return 0;
        case 19:
            (void)csr_sum_duplicates(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_bool_wrapper*)a[4]);
            return 0;
        case 20:
            (void)csr_sum_duplicates(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_byte*)a[4]);
            return 0;
        case 21:
            (void)csr_sum_duplicates(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_ubyte*)a[4]);
            return 0;
        case 22:
            (void)csr_sum_duplicates(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_short*)a[4]);
            return 0;
        case 23:
            (void)csr_sum_duplicates(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_ushort*)a[4]);
            return 0;
        case 24:
            (void)csr_sum_duplicates(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_int*)a[4]);
            return 0;
        case 25:
            (void)csr_sum_duplicates(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_uint*)a[4]);
            return 0;
        case 26:
            (void)csr_sum_duplicates(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_long*)a[4]);
            return 0;
        case 27:
            (void)csr_sum_duplicates(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_ulong*)a[4]);
            return 0;
        case 28:
            (void)csr_sum_duplicates(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_longlong*)a[4]);
            return 0;
        case 29:
            (void)csr_sum_duplicates(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_ulonglong*)a[4]);
            return 0;
        case 30:
            (void)csr_sum_duplicates(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_float*)a[4]);
            return 0;
        case 31:
            (void)csr_sum_duplicates(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_double*)a[4]);
            return 0;
        case 32:
            (void)csr_sum_duplicates(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_longdouble*)a[4]);
            return 0;
        case 33:
            (void)csr_sum_duplicates(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_cfloat_wrapper*)a[4]);
            return 0;
        case 34:
            (void)csr_sum_duplicates(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_cdouble_wrapper*)a[4]);
            return 0;
        case 35:
            (void)csr_sum_duplicates(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (npy_int64*)a[2], (npy_int64*)a[3], (npy_clongdouble_wrapper*)a[4]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG get_csr_submatrix_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)get_csr_submatrix(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], *(const npy_int32*)a[5], *(const npy_int32*)a[6], *(const npy_int32*)a[7], *(const npy_int32*)a[8], (std::vector<npy_int32>*)a[9], (std::vector<npy_int32>*)a[10], (std::vector<npy_bool_wrapper>*)a[11]);
            return 0;
        case 2:
            (void)get_csr_submatrix(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], *(const npy_int32*)a[5], *(const npy_int32*)a[6], *(const npy_int32*)a[7], *(const npy_int32*)a[8], (std::vector<npy_int32>*)a[9], (std::vector<npy_int32>*)a[10], (std::vector<npy_byte>*)a[11]);
            return 0;
        case 3:
            (void)get_csr_submatrix(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], *(const npy_int32*)a[5], *(const npy_int32*)a[6], *(const npy_int32*)a[7], *(const npy_int32*)a[8], (std::vector<npy_int32>*)a[9], (std::vector<npy_int32>*)a[10], (std::vector<npy_ubyte>*)a[11]);
            return 0;
        case 4:
            (void)get_csr_submatrix(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], *(const npy_int32*)a[5], *(const npy_int32*)a[6], *(const npy_int32*)a[7], *(const npy_int32*)a[8], (std::vector<npy_int32>*)a[9], (std::vector<npy_int32>*)a[10], (std::vector<npy_short>*)a[11]);
            return 0;
        case 5:
            (void)get_csr_submatrix(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], *(const npy_int32*)a[5], *(const npy_int32*)a[6], *(const npy_int32*)a[7], *(const npy_int32*)a[8], (std::vector<npy_int32>*)a[9], (std::vector<npy_int32>*)a[10], (std::vector<npy_ushort>*)a[11]);
            return 0;
        case 6:
            (void)get_csr_submatrix(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], *(const npy_int32*)a[5], *(const npy_int32*)a[6], *(const npy_int32*)a[7], *(const npy_int32*)a[8], (std::vector<npy_int32>*)a[9], (std::vector<npy_int32>*)a[10], (std::vector<npy_int>*)a[11]);
            return 0;
        case 7:
            (void)get_csr_submatrix(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], *(const npy_int32*)a[5], *(const npy_int32*)a[6], *(const npy_int32*)a[7], *(const npy_int32*)a[8], (std::vector<npy_int32>*)a[9], (std::vector<npy_int32>*)a[10], (std::vector<npy_uint>*)a[11]);
            return 0;
        case 8:
            (void)get_csr_submatrix(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], *(const npy_int32*)a[5], *(const npy_int32*)a[6], *(const npy_int32*)a[7], *(const npy_int32*)a[8], (std::vector<npy_int32>*)a[9], (std::vector<npy_int32>*)a[10], (std::vector<npy_long>*)a[11]);
            return 0;
        case 9:
            (void)get_csr_submatrix(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], *(const npy_int32*)a[5], *(const npy_int32*)a[6], *(const npy_int32*)a[7], *(const npy_int32*)a[8], (std::vector<npy_int32>*)a[9], (std::vector<npy_int32>*)a[10], (std::vector<npy_ulong>*)a[11]);
            return 0;
        case 10:
            (void)get_csr_submatrix(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], *(const npy_int32*)a[5], *(const npy_int32*)a[6], *(const npy_int32*)a[7], *(const npy_int32*)a[8], (std::vector<npy_int32>*)a[9], (std::vector<npy_int32>*)a[10], (std::vector<npy_longlong>*)a[11]);
            return 0;
        case 11:
            (void)get_csr_submatrix(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], *(const npy_int32*)a[5], *(const npy_int32*)a[6], *(const npy_int32*)a[7], *(const npy_int32*)a[8], (std::vector<npy_int32>*)a[9], (std::vector<npy_int32>*)a[10], (std::vector<npy_ulonglong>*)a[11]);
            return 0;
        case 12:
            (void)get_csr_submatrix(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], *(const npy_int32*)a[5], *(const npy_int32*)a[6], *(const npy_int32*)a[7], *(const npy_int32*)a[8], (std::vector<npy_int32>*)a[9], (std::vector<npy_int32>*)a[10], (std::vector<npy_float>*)a[11]);
            return 0;
        case 13:
            (void)get_csr_submatrix(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], *(const npy_int32*)a[5], *(const npy_int32*)a[6], *(const npy_int32*)a[7], *(const npy_int32*)a[8], (std::vector<npy_int32>*)a[9], (std::vector<npy_int32>*)a[10], (std::vector<npy_double>*)a[11]);
            return 0;
        case 14:
            (void)get_csr_submatrix(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], *(const npy_int32*)a[5], *(const npy_int32*)a[6], *(const npy_int32*)a[7], *(const npy_int32*)a[8], (std::vector<npy_int32>*)a[9], (std::vector<npy_int32>*)a[10], (std::vector<npy_longdouble>*)a[11]);
            return 0;
        case 15:
            (void)get_csr_submatrix(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], *(const npy_int32*)a[5], *(const npy_int32*)a[6], *(const npy_int32*)a[7], *(const npy_int32*)a[8], (std::vector<npy_int32>*)a[9], (std::vector<npy_int32>*)a[10], (std::vector<npy_cfloat_wrapper>*)a[11]);
            return 0;
        case 16:
            (void)get_csr_submatrix(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], *(const npy_int32*)a[5], *(const npy_int32*)a[6], *(const npy_int32*)a[7], *(const npy_int32*)a[8], (std::vector<npy_int32>*)a[9], (std::vector<npy_int32>*)a[10], (std::vector<npy_cdouble_wrapper>*)a[11]);
            return 0;
        case 17:
            (void)get_csr_submatrix(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], *(const npy_int32*)a[5], *(const npy_int32*)a[6], *(const npy_int32*)a[7], *(const npy_int32*)a[8], (std::vector<npy_int32>*)a[9], (std::vector<npy_int32>*)a[10], (std::vector<npy_clongdouble_wrapper>*)a[11]);
            return 0;
        case 19:
            (void)get_csr_submatrix(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], *(const npy_int64*)a[5], *(const npy_int64*)a[6], *(const npy_int64*)a[7], *(const npy_int64*)a[8], (std::vector<npy_int64>*)a[9], (std::vector<npy_int64>*)a[10], (std::vector<npy_bool_wrapper>*)a[11]);
            return 0;
        case 20:
            (void)get_csr_submatrix(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], *(const npy_int64*)a[5], *(const npy_int64*)a[6], *(const npy_int64*)a[7], *(const npy_int64*)a[8], (std::vector<npy_int64>*)a[9], (std::vector<npy_int64>*)a[10], (std::vector<npy_byte>*)a[11]);
            return 0;
        case 21:
            (void)get_csr_submatrix(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], *(const npy_int64*)a[5], *(const npy_int64*)a[6], *(const npy_int64*)a[7], *(const npy_int64*)a[8], (std::vector<npy_int64>*)a[9], (std::vector<npy_int64>*)a[10], (std::vector<npy_ubyte>*)a[11]);
            return 0;
        case 22:
            (void)get_csr_submatrix(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], *(const npy_int64*)a[5], *(const npy_int64*)a[6], *(const npy_int64*)a[7], *(const npy_int64*)a[8], (std::vector<npy_int64>*)a[9], (std::vector<npy_int64>*)a[10], (std::vector<npy_short>*)a[11]);
            return 0;
        case 23:
            (void)get_csr_submatrix(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], *(const npy_int64*)a[5], *(const npy_int64*)a[6], *(const npy_int64*)a[7], *(const npy_int64*)a[8], (std::vector<npy_int64>*)a[9], (std::vector<npy_int64>*)a[10], (std::vector<npy_ushort>*)a[11]);
            return 0;
        case 24:
            (void)get_csr_submatrix(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], *(const npy_int64*)a[5], *(const npy_int64*)a[6], *(const npy_int64*)a[7], *(const npy_int64*)a[8], (std::vector<npy_int64>*)a[9], (std::vector<npy_int64>*)a[10], (std::vector<npy_int>*)a[11]);
            return 0;
        case 25:
            (void)get_csr_submatrix(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], *(const npy_int64*)a[5], *(const npy_int64*)a[6], *(const npy_int64*)a[7], *(const npy_int64*)a[8], (std::vector<npy_int64>*)a[9], (std::vector<npy_int64>*)a[10], (std::vector<npy_uint>*)a[11]);
            return 0;
        case 26:
            (void)get_csr_submatrix(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], *(const npy_int64*)a[5], *(const npy_int64*)a[6], *(const npy_int64*)a[7], *(const npy_int64*)a[8], (std::vector<npy_int64>*)a[9], (std::vector<npy_int64>*)a[10], (std::vector<npy_long>*)a[11]);
            return 0;
        case 27:
            (void)get_csr_submatrix(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], *(const npy_int64*)a[5], *(const npy_int64*)a[6], *(const npy_int64*)a[7], *(const npy_int64*)a[8], (std::vector<npy_int64>*)a[9], (std::vector<npy_int64>*)a[10], (std::vector<npy_ulong>*)a[11]);
            return 0;
        case 28:
            (void)get_csr_submatrix(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], *(const npy_int64*)a[5], *(const npy_int64*)a[6], *(const npy_int64*)a[7], *(const npy_int64*)a[8], (std::vector<npy_int64>*)a[9], (std::vector<npy_int64>*)a[10], (std::vector<npy_longlong>*)a[11]);
            return 0;
        case 29:
            (void)get_csr_submatrix(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], *(const npy_int64*)a[5], *(const npy_int64*)a[6], *(const npy_int64*)a[7], *(const npy_int64*)a[8], (std::vector<npy_int64>*)a[9], (std::vector<npy_int64>*)a[10], (std::vector<npy_ulonglong>*)a[11]);
            return 0;
        case 30:
            (void)get_csr_submatrix(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], *(const npy_int64*)a[5], *(const npy_int64*)a[6], *(const npy_int64*)a[7], *(const npy_int64*)a[8], (std::vector<npy_int64>*)a[9], (std::vector<npy_int64>*)a[10], (std::vector<npy_float>*)a[11]);
            return 0;
        case 31:
            (void)get_csr_submatrix(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], *(const npy_int64*)a[5], *(const npy_int64*)a[6], *(const npy_int64*)a[7], *(const npy_int64*)a[8], (std::vector<npy_int64>*)a[9], (std::vector<npy_int64>*)a[10], (std::vector<npy_double>*)a[11]);
            return 0;
        case 32:
            (void)get_csr_submatrix(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], *(const npy_int64*)a[5], *(const npy_int64*)a[6], *(const npy_int64*)a[7], *(const npy_int64*)a[8], (std::vector<npy_int64>*)a[9], (std::vector<npy_int64>*)a[10], (std::vector<npy_longdouble>*)a[11]);
            return 0;
        case 33:
            (void)get_csr_submatrix(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], *(const npy_int64*)a[5], *(const npy_int64*)a[6], *(const npy_int64*)a[7], *(const npy_int64*)a[8], (std::vector<npy_int64>*)a[9], (std::vector<npy_int64>*)a[10], (std::vector<npy_cfloat_wrapper>*)a[11]);
            return 0;
        case 34:
            (void)get_csr_submatrix(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], *(const npy_int64*)a[5], *(const npy_int64*)a[6], *(const npy_int64*)a[7], *(const npy_int64*)a[8], (std::vector<npy_int64>*)a[9], (std::vector<npy_int64>*)a[10], (std::vector<npy_cdouble_wrapper>*)a[11]);
            return 0;
        case 35:
            (void)get_csr_submatrix(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], *(const npy_int64*)a[5], *(const npy_int64*)a[6], *(const npy_int64*)a[7], *(const npy_int64*)a[8], (std::vector<npy_int64>*)a[9], (std::vector<npy_int64>*)a[10], (std::vector<npy_clongdouble_wrapper>*)a[11]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_row_index_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_row_index(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (npy_int32*)a[5], (npy_bool_wrapper*)a[6]);
            return 0;
        case 2:
            (void)csr_row_index(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (npy_int32*)a[5], (npy_byte*)a[6]);
            return 0;
        case 3:
            (void)csr_row_index(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (npy_int32*)a[5], (npy_ubyte*)a[6]);
            return 0;
        case 4:
            (void)csr_row_index(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (npy_int32*)a[5], (npy_short*)a[6]);
            return 0;
        case 5:
            (void)csr_row_index(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (npy_int32*)a[5], (npy_ushort*)a[6]);
            return 0;
        case 6:
            (void)csr_row_index(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (npy_int32*)a[5], (npy_int*)a[6]);
            return 0;
        case 7:
            (void)csr_row_index(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (npy_int32*)a[5], (npy_uint*)a[6]);
            return 0;
        case 8:
            (void)csr_row_index(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (npy_int32*)a[5], (npy_long*)a[6]);
            return 0;
        case 9:
            (void)csr_row_index(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (npy_int32*)a[5], (npy_ulong*)a[6]);
            return 0;
        case 10:
            (void)csr_row_index(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (npy_int32*)a[5], (npy_longlong*)a[6]);
            return 0;
        case 11:
            (void)csr_row_index(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (npy_int32*)a[5], (npy_ulonglong*)a[6]);
            return 0;
        case 12:
            (void)csr_row_index(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (npy_int32*)a[5], (npy_float*)a[6]);
            return 0;
        case 13:
            (void)csr_row_index(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (npy_int32*)a[5], (npy_double*)a[6]);
            return 0;
        case 14:
            (void)csr_row_index(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (npy_int32*)a[5], (npy_longdouble*)a[6]);
            return 0;
        case 15:
            (void)csr_row_index(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (npy_int32*)a[5], (npy_cfloat_wrapper*)a[6]);
            return 0;
        case 16:
            (void)csr_row_index(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (npy_int32*)a[5], (npy_cdouble_wrapper*)a[6]);
            return 0;
        case 17:
            (void)csr_row_index(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (npy_int32*)a[5], (npy_clongdouble_wrapper*)a[6]);
            return 0;
        case 19:
            (void)csr_row_index(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (npy_int64*)a[5], (npy_bool_wrapper*)a[6]);
            return 0;
        case 20:
            (void)csr_row_index(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (npy_int64*)a[5], (npy_byte*)a[6]);
            return 0;
        case 21:
            (void)csr_row_index(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (npy_int64*)a[5], (npy_ubyte*)a[6]);
            return 0;
        case 22:
            (void)csr_row_index(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (npy_int64*)a[5], (npy_short*)a[6]);
            return 0;
        case 23:
            (void)csr_row_index(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (npy_int64*)a[5], (npy_ushort*)a[6]);
            return 0;
        case 24:
            (void)csr_row_index(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (npy_int64*)a[5], (npy_int*)a[6]);
            return 0;
        case 25:
            (void)csr_row_index(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (npy_int64*)a[5], (npy_uint*)a[6]);
            return 0;
        case 26:
            (void)csr_row_index(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (npy_int64*)a[5], (npy_long*)a[6]);
            return 0;
        case 27:
            (void)csr_row_index(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (npy_int64*)a[5], (npy_ulong*)a[6]);
            return 0;
        case 28:
            (void)csr_row_index(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (npy_int64*)a[5], (npy_longlong*)a[6]);
            return 0;
        case 29:
            (void)csr_row_index(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (npy_int64*)a[5], (npy_ulonglong*)a[6]);
            return 0;
        case 30:
            (void)csr_row_index(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (npy_int64*)a[5], (npy_float*)a[6]);
            return 0;
        case 31:
            (void)csr_row_index(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (npy_int64*)a[5], (npy_double*)a[6]);
            return 0;
        case 32:
            (void)csr_row_index(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (npy_int64*)a[5], (npy_longdouble*)a[6]);
            return 0;
        case 33:
            (void)csr_row_index(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (npy_int64*)a[5], (npy_cfloat_wrapper*)a[6]);
            return 0;
        case 34:
            (void)csr_row_index(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (npy_int64*)a[5], (npy_cdouble_wrapper*)a[6]);
            return 0;
        case 35:
            (void)csr_row_index(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (npy_int64*)a[5], (npy_clongdouble_wrapper*)a[6]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_row_slice_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_row_slice(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_bool_wrapper*)a[5], (npy_int32*)a[6], (npy_bool_wrapper*)a[7]);
            return 0;
        case 2:
            (void)csr_row_slice(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_byte*)a[5], (npy_int32*)a[6], (npy_byte*)a[7]);
            return 0;
        case 3:
            (void)csr_row_slice(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ubyte*)a[5], (npy_int32*)a[6], (npy_ubyte*)a[7]);
            return 0;
        case 4:
            (void)csr_row_slice(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_short*)a[5], (npy_int32*)a[6], (npy_short*)a[7]);
            return 0;
        case 5:
            (void)csr_row_slice(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ushort*)a[5], (npy_int32*)a[6], (npy_ushort*)a[7]);
            return 0;
        case 6:
            (void)csr_row_slice(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int*)a[5], (npy_int32*)a[6], (npy_int*)a[7]);
            return 0;
        case 7:
            (void)csr_row_slice(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_uint*)a[5], (npy_int32*)a[6], (npy_uint*)a[7]);
            return 0;
        case 8:
            (void)csr_row_slice(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_long*)a[5], (npy_int32*)a[6], (npy_long*)a[7]);
            return 0;
        case 9:
            (void)csr_row_slice(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ulong*)a[5], (npy_int32*)a[6], (npy_ulong*)a[7]);
            return 0;
        case 10:
            (void)csr_row_slice(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_longlong*)a[5], (npy_int32*)a[6], (npy_longlong*)a[7]);
            return 0;
        case 11:
            (void)csr_row_slice(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ulonglong*)a[5], (npy_int32*)a[6], (npy_ulonglong*)a[7]);
            return 0;
        case 12:
            (void)csr_row_slice(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_float*)a[5], (npy_int32*)a[6], (npy_float*)a[7]);
            return 0;
        case 13:
            (void)csr_row_slice(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_double*)a[5], (npy_int32*)a[6], (npy_double*)a[7]);
            return 0;
        case 14:
            (void)csr_row_slice(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_longdouble*)a[5], (npy_int32*)a[6], (npy_longdouble*)a[7]);
            return 0;
        case 15:
            (void)csr_row_slice(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_cfloat_wrapper*)a[5], (npy_int32*)a[6], (npy_cfloat_wrapper*)a[7]);
            return 0;
        case 16:
            (void)csr_row_slice(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_cdouble_wrapper*)a[5], (npy_int32*)a[6], (npy_cdouble_wrapper*)a[7]);
            return 0;
        case 17:
            (void)csr_row_slice(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_clongdouble_wrapper*)a[5], (npy_int32*)a[6], (npy_clongdouble_wrapper*)a[7]);
            return 0;
        case 19:
            (void)csr_row_slice(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_bool_wrapper*)a[5], (npy_int64*)a[6], (npy_bool_wrapper*)a[7]);
            return 0;
        case 20:
            (void)csr_row_slice(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_byte*)a[5], (npy_int64*)a[6], (npy_byte*)a[7]);
            return 0;
        case 21:
            (void)csr_row_slice(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ubyte*)a[5], (npy_int64*)a[6], (npy_ubyte*)a[7]);
            return 0;
        case 22:
            (void)csr_row_slice(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_short*)a[5], (npy_int64*)a[6], (npy_short*)a[7]);
            return 0;
        case 23:
            (void)csr_row_slice(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ushort*)a[5], (npy_int64*)a[6], (npy_ushort*)a[7]);
            return 0;
        case 24:
            (void)csr_row_slice(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int*)a[5], (npy_int64*)a[6], (npy_int*)a[7]);
            return 0;
        case 25:
            (void)csr_row_slice(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_uint*)a[5], (npy_int64*)a[6], (npy_uint*)a[7]);
            return 0;
        case 26:
            (void)csr_row_slice(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_long*)a[5], (npy_int64*)a[6], (npy_long*)a[7]);
            return 0;
        case 27:
            (void)csr_row_slice(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ulong*)a[5], (npy_int64*)a[6], (npy_ulong*)a[7]);
            return 0;
        case 28:
            (void)csr_row_slice(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_longlong*)a[5], (npy_int64*)a[6], (npy_longlong*)a[7]);
            return 0;
        case 29:
            (void)csr_row_slice(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ulonglong*)a[5], (npy_int64*)a[6], (npy_ulonglong*)a[7]);
            return 0;
        case 30:
            (void)csr_row_slice(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_float*)a[5], (npy_int64*)a[6], (npy_float*)a[7]);
            return 0;
        case 31:
            (void)csr_row_slice(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_double*)a[5], (npy_int64*)a[6], (npy_double*)a[7]);
            return 0;
        case 32:
            (void)csr_row_slice(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_longdouble*)a[5], (npy_int64*)a[6], (npy_longdouble*)a[7]);
            return 0;
        case 33:
            (void)csr_row_slice(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_cfloat_wrapper*)a[5], (npy_int64*)a[6], (npy_cfloat_wrapper*)a[7]);
            return 0;
        case 34:
            (void)csr_row_slice(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_cdouble_wrapper*)a[5], (npy_int64*)a[6], (npy_cdouble_wrapper*)a[7]);
            return 0;
        case 35:
            (void)csr_row_slice(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_clongdouble_wrapper*)a[5], (npy_int64*)a[6], (npy_clongdouble_wrapper*)a[7]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_column_index1_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 0:
            (void)csr_column_index1(*(const npy_int32*)a[0], (const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (npy_int32*)a[6], (npy_int32*)a[7]);
            return 0;
        case 18:
            (void)csr_column_index1(*(const npy_int64*)a[0], (const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (npy_int64*)a[6], (npy_int64*)a[7]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_column_index2_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_column_index2((const npy_int32*)a[0], (const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (npy_int32*)a[5], (npy_bool_wrapper*)a[6]);
            return 0;
        case 2:
            (void)csr_column_index2((const npy_int32*)a[0], (const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (npy_int32*)a[5], (npy_byte*)a[6]);
            return 0;
        case 3:
            (void)csr_column_index2((const npy_int32*)a[0], (const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (npy_int32*)a[5], (npy_ubyte*)a[6]);
            return 0;
        case 4:
            (void)csr_column_index2((const npy_int32*)a[0], (const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (npy_int32*)a[5], (npy_short*)a[6]);
            return 0;
        case 5:
            (void)csr_column_index2((const npy_int32*)a[0], (const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (npy_int32*)a[5], (npy_ushort*)a[6]);
            return 0;
        case 6:
            (void)csr_column_index2((const npy_int32*)a[0], (const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (npy_int32*)a[5], (npy_int*)a[6]);
            return 0;
        case 7:
            (void)csr_column_index2((const npy_int32*)a[0], (const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (npy_int32*)a[5], (npy_uint*)a[6]);
            return 0;
        case 8:
            (void)csr_column_index2((const npy_int32*)a[0], (const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (npy_int32*)a[5], (npy_long*)a[6]);
            return 0;
        case 9:
            (void)csr_column_index2((const npy_int32*)a[0], (const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (npy_int32*)a[5], (npy_ulong*)a[6]);
            return 0;
        case 10:
            (void)csr_column_index2((const npy_int32*)a[0], (const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (npy_int32*)a[5], (npy_longlong*)a[6]);
            return 0;
        case 11:
            (void)csr_column_index2((const npy_int32*)a[0], (const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (npy_int32*)a[5], (npy_ulonglong*)a[6]);
            return 0;
        case 12:
            (void)csr_column_index2((const npy_int32*)a[0], (const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (npy_int32*)a[5], (npy_float*)a[6]);
            return 0;
        case 13:
            (void)csr_column_index2((const npy_int32*)a[0], (const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (npy_int32*)a[5], (npy_double*)a[6]);
            return 0;
        case 14:
            (void)csr_column_index2((const npy_int32*)a[0], (const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (npy_int32*)a[5], (npy_longdouble*)a[6]);
            return 0;
        case 15:
            (void)csr_column_index2((const npy_int32*)a[0], (const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (npy_int32*)a[5], (npy_cfloat_wrapper*)a[6]);
            return 0;
        case 16:
            (void)csr_column_index2((const npy_int32*)a[0], (const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (npy_int32*)a[5], (npy_cdouble_wrapper*)a[6]);
            return 0;
        case 17:
            (void)csr_column_index2((const npy_int32*)a[0], (const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (npy_int32*)a[5], (npy_clongdouble_wrapper*)a[6]);
            return 0;
        case 19:
            (void)csr_column_index2((const npy_int64*)a[0], (const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (npy_int64*)a[5], (npy_bool_wrapper*)a[6]);
            return 0;
        case 20:
            (void)csr_column_index2((const npy_int64*)a[0], (const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (npy_int64*)a[5], (npy_byte*)a[6]);
            return 0;
        case 21:
            (void)csr_column_index2((const npy_int64*)a[0], (const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (npy_int64*)a[5], (npy_ubyte*)a[6]);
            return 0;
        case 22:
            (void)csr_column_index2((const npy_int64*)a[0], (const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (npy_int64*)a[5], (npy_short*)a[6]);
            return 0;
        case 23:
            (void)csr_column_index2((const npy_int64*)a[0], (const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (npy_int64*)a[5], (npy_ushort*)a[6]);
            return 0;
        case 24:
            (void)csr_column_index2((const npy_int64*)a[0], (const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (npy_int64*)a[5], (npy_int*)a[6]);
            return 0;
        case 25:
            (void)csr_column_index2((const npy_int64*)a[0], (const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (npy_int64*)a[5], (npy_uint*)a[6]);
            return 0;
        case 26:
            (void)csr_column_index2((const npy_int64*)a[0], (const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (npy_int64*)a[5], (npy_long*)a[6]);
            return 0;
        case 27:
            (void)csr_column_index2((const npy_int64*)a[0], (const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (npy_int64*)a[5], (npy_ulong*)a[6]);
            return 0;
        case 28:
            (void)csr_column_index2((const npy_int64*)a[0], (const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (npy_int64*)a[5], (npy_longlong*)a[6]);
            return 0;
        case 29:
            (void)csr_column_index2((const npy_int64*)a[0], (const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (npy_int64*)a[5], (npy_ulonglong*)a[6]);
            return 0;
        case 30:
            (void)csr_column_index2((const npy_int64*)a[0], (const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (npy_int64*)a[5], (npy_float*)a[6]);
            return 0;
        case 31:
            (void)csr_column_index2((const npy_int64*)a[0], (const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (npy_int64*)a[5], (npy_double*)a[6]);
            return 0;
        case 32:
            (void)csr_column_index2((const npy_int64*)a[0], (const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (npy_int64*)a[5], (npy_longdouble*)a[6]);
            return 0;
        case 33:
            (void)csr_column_index2((const npy_int64*)a[0], (const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (npy_int64*)a[5], (npy_cfloat_wrapper*)a[6]);
            return 0;
        case 34:
            (void)csr_column_index2((const npy_int64*)a[0], (const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (npy_int64*)a[5], (npy_cdouble_wrapper*)a[6]);
            return 0;
        case 35:
            (void)csr_column_index2((const npy_int64*)a[0], (const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (npy_int64*)a[5], (npy_clongdouble_wrapper*)a[6]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_sample_values_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_sample_values(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], *(const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int32*)a[7], (npy_bool_wrapper*)a[8]);
            return 0;
        case 2:
            (void)csr_sample_values(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], *(const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int32*)a[7], (npy_byte*)a[8]);
            return 0;
        case 3:
            (void)csr_sample_values(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], *(const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int32*)a[7], (npy_ubyte*)a[8]);
            return 0;
        case 4:
            (void)csr_sample_values(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], *(const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int32*)a[7], (npy_short*)a[8]);
            return 0;
        case 5:
            (void)csr_sample_values(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], *(const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int32*)a[7], (npy_ushort*)a[8]);
            return 0;
        case 6:
            (void)csr_sample_values(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], *(const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int32*)a[7], (npy_int*)a[8]);
            return 0;
        case 7:
            (void)csr_sample_values(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], *(const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int32*)a[7], (npy_uint*)a[8]);
            return 0;
        case 8:
            (void)csr_sample_values(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], *(const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int32*)a[7], (npy_long*)a[8]);
            return 0;
        case 9:
            (void)csr_sample_values(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], *(const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int32*)a[7], (npy_ulong*)a[8]);
            return 0;
        case 10:
            (void)csr_sample_values(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], *(const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int32*)a[7], (npy_longlong*)a[8]);
            return 0;
        case 11:
            (void)csr_sample_values(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], *(const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int32*)a[7], (npy_ulonglong*)a[8]);
            return 0;
        case 12:
            (void)csr_sample_values(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], *(const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int32*)a[7], (npy_float*)a[8]);
            return 0;
        case 13:
            (void)csr_sample_values(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], *(const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int32*)a[7], (npy_double*)a[8]);
            return 0;
        case 14:
            (void)csr_sample_values(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], *(const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int32*)a[7], (npy_longdouble*)a[8]);
            return 0;
        case 15:
            (void)csr_sample_values(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], *(const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int32*)a[7], (npy_cfloat_wrapper*)a[8]);
            return 0;
        case 16:
            (void)csr_sample_values(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], *(const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int32*)a[7], (npy_cdouble_wrapper*)a[8]);
            return 0;
        case 17:
            (void)csr_sample_values(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], *(const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int32*)a[7], (npy_clongdouble_wrapper*)a[8]);
            return 0;
        case 19:
            (void)csr_sample_values(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], *(const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int64*)a[7], (npy_bool_wrapper*)a[8]);
            return 0;
        case 20:
            (void)csr_sample_values(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], *(const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int64*)a[7], (npy_byte*)a[8]);
            return 0;
        case 21:
            (void)csr_sample_values(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], *(const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int64*)a[7], (npy_ubyte*)a[8]);
            return 0;
        case 22:
            (void)csr_sample_values(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], *(const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int64*)a[7], (npy_short*)a[8]);
            return 0;
        case 23:
            (void)csr_sample_values(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], *(const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int64*)a[7], (npy_ushort*)a[8]);
            return 0;
        case 24:
            (void)csr_sample_values(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], *(const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int64*)a[7], (npy_int*)a[8]);
            return 0;
        case 25:
            (void)csr_sample_values(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], *(const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int64*)a[7], (npy_uint*)a[8]);
            return 0;
        case 26:
            (void)csr_sample_values(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], *(const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int64*)a[7], (npy_long*)a[8]);
            return 0;
        case 27:
            (void)csr_sample_values(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], *(const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int64*)a[7], (npy_ulong*)a[8]);
            return 0;
        case 28:
            (void)csr_sample_values(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], *(const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int64*)a[7], (npy_longlong*)a[8]);
            return 0;
        case 29:
            (void)csr_sample_values(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], *(const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int64*)a[7], (npy_ulonglong*)a[8]);
            return 0;
        case 30:
            (void)csr_sample_values(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], *(const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int64*)a[7], (npy_float*)a[8]);
            return 0;
        case 31:
            (void)csr_sample_values(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], *(const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int64*)a[7], (npy_double*)a[8]);
            return 0;
        case 32:
            (void)csr_sample_values(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], *(const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int64*)a[7], (npy_longdouble*)a[8]);
            return 0;
        case 33:
            (void)csr_sample_values(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], *(const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int64*)a[7], (npy_cfloat_wrapper*)a[8]);
            return 0;
        case 34:
            (void)csr_sample_values(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], *(const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int64*)a[7], (npy_cdouble_wrapper*)a[8]);
            return 0;
        case 35:
            (void)csr_sample_values(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], *(const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int64*)a[7], (npy_clongdouble_wrapper*)a[8]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_count_blocks_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 0:
            return csr_count_blocks(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], *(const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5]);
        case 18:
            return csr_count_blocks(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], *(const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5]);
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_sample_offsets_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 0:
            return csr_sample_offsets(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], *(const npy_int32*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (npy_int32*)a[7]);
        case 18:
            return csr_sample_offsets(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], *(const npy_int64*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (npy_int64*)a[7]);
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_hstack_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csr_hstack(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_bool_wrapper*)a[5], (npy_int32*)a[6], (npy_int32*)a[7], (npy_bool_wrapper*)a[8]);
            return 0;
        case 2:
            (void)csr_hstack(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_byte*)a[5], (npy_int32*)a[6], (npy_int32*)a[7], (npy_byte*)a[8]);
            return 0;
        case 3:
            (void)csr_hstack(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ubyte*)a[5], (npy_int32*)a[6], (npy_int32*)a[7], (npy_ubyte*)a[8]);
            return 0;
        case 4:
            (void)csr_hstack(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_short*)a[5], (npy_int32*)a[6], (npy_int32*)a[7], (npy_short*)a[8]);
            return 0;
        case 5:
            (void)csr_hstack(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ushort*)a[5], (npy_int32*)a[6], (npy_int32*)a[7], (npy_ushort*)a[8]);
            return 0;
        case 6:
            (void)csr_hstack(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int*)a[5], (npy_int32*)a[6], (npy_int32*)a[7], (npy_int*)a[8]);
            return 0;
        case 7:
            (void)csr_hstack(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_uint*)a[5], (npy_int32*)a[6], (npy_int32*)a[7], (npy_uint*)a[8]);
            return 0;
        case 8:
            (void)csr_hstack(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_long*)a[5], (npy_int32*)a[6], (npy_int32*)a[7], (npy_long*)a[8]);
            return 0;
        case 9:
            (void)csr_hstack(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ulong*)a[5], (npy_int32*)a[6], (npy_int32*)a[7], (npy_ulong*)a[8]);
            return 0;
        case 10:
            (void)csr_hstack(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_longlong*)a[5], (npy_int32*)a[6], (npy_int32*)a[7], (npy_longlong*)a[8]);
            return 0;
        case 11:
            (void)csr_hstack(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ulonglong*)a[5], (npy_int32*)a[6], (npy_int32*)a[7], (npy_ulonglong*)a[8]);
            return 0;
        case 12:
            (void)csr_hstack(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_float*)a[5], (npy_int32*)a[6], (npy_int32*)a[7], (npy_float*)a[8]);
            return 0;
        case 13:
            (void)csr_hstack(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_double*)a[5], (npy_int32*)a[6], (npy_int32*)a[7], (npy_double*)a[8]);
            return 0;
        case 14:
            (void)csr_hstack(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_longdouble*)a[5], (npy_int32*)a[6], (npy_int32*)a[7], (npy_longdouble*)a[8]);
            return 0;
        case 15:
            (void)csr_hstack(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_cfloat_wrapper*)a[5], (npy_int32*)a[6], (npy_int32*)a[7], (npy_cfloat_wrapper*)a[8]);
            return 0;
        case 16:
            (void)csr_hstack(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_cdouble_wrapper*)a[5], (npy_int32*)a[6], (npy_int32*)a[7], (npy_cdouble_wrapper*)a[8]);
            return 0;
        case 17:
            (void)csr_hstack(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_clongdouble_wrapper*)a[5], (npy_int32*)a[6], (npy_int32*)a[7], (npy_clongdouble_wrapper*)a[8]);
            return 0;
        case 19:
            (void)csr_hstack(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_bool_wrapper*)a[5], (npy_int64*)a[6], (npy_int64*)a[7], (npy_bool_wrapper*)a[8]);
            return 0;
        case 20:
            (void)csr_hstack(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_byte*)a[5], (npy_int64*)a[6], (npy_int64*)a[7], (npy_byte*)a[8]);
            return 0;
        case 21:
            (void)csr_hstack(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ubyte*)a[5], (npy_int64*)a[6], (npy_int64*)a[7], (npy_ubyte*)a[8]);
            return 0;
        case 22:
            (void)csr_hstack(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_short*)a[5], (npy_int64*)a[6], (npy_int64*)a[7], (npy_short*)a[8]);
            return 0;
        case 23:
            (void)csr_hstack(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ushort*)a[5], (npy_int64*)a[6], (npy_int64*)a[7], (npy_ushort*)a[8]);
            return 0;
        case 24:
            (void)csr_hstack(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int*)a[5], (npy_int64*)a[6], (npy_int64*)a[7], (npy_int*)a[8]);
            return 0;
        case 25:
            (void)csr_hstack(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_uint*)a[5], (npy_int64*)a[6], (npy_int64*)a[7], (npy_uint*)a[8]);
            return 0;
        case 26:
            (void)csr_hstack(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_long*)a[5], (npy_int64*)a[6], (npy_int64*)a[7], (npy_long*)a[8]);
            return 0;
        case 27:
            (void)csr_hstack(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ulong*)a[5], (npy_int64*)a[6], (npy_int64*)a[7], (npy_ulong*)a[8]);
            return 0;
        case 28:
            (void)csr_hstack(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_longlong*)a[5], (npy_int64*)a[6], (npy_int64*)a[7], (npy_longlong*)a[8]);
            return 0;
        case 29:
            (void)csr_hstack(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ulonglong*)a[5], (npy_int64*)a[6], (npy_int64*)a[7], (npy_ulonglong*)a[8]);
            return 0;
        case 30:
            (void)csr_hstack(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_float*)a[5], (npy_int64*)a[6], (npy_int64*)a[7], (npy_float*)a[8]);
            return 0;
        case 31:
            (void)csr_hstack(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_double*)a[5], (npy_int64*)a[6], (npy_int64*)a[7], (npy_double*)a[8]);
            return 0;
        case 32:
            (void)csr_hstack(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_longdouble*)a[5], (npy_int64*)a[6], (npy_int64*)a[7], (npy_longdouble*)a[8]);
            return 0;
        case 33:
            (void)csr_hstack(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_cfloat_wrapper*)a[5], (npy_int64*)a[6], (npy_int64*)a[7], (npy_cfloat_wrapper*)a[8]);
            return 0;
        case 34:
            (void)csr_hstack(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_cdouble_wrapper*)a[5], (npy_int64*)a[6], (npy_int64*)a[7], (npy_cdouble_wrapper*)a[8]);
            return 0;
        case 35:
            (void)csr_hstack(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_clongdouble_wrapper*)a[5], (npy_int64*)a[6], (npy_int64*)a[7], (npy_clongdouble_wrapper*)a[8]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG expandptr_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 0:
            (void)expandptr(*(const npy_int32*)a[0], (const npy_int32*)a[1], (npy_int32*)a[2]);
            return 0;
        case 18:
            (void)expandptr(*(const npy_int64*)a[0], (const npy_int64*)a[1], (npy_int64*)a[2]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG test_throw_error_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 0:
            return test_throw_error();
        case 18:
            return test_throw_error();
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_has_sorted_indices_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 0:
            return csr_has_sorted_indices(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2]);
        case 18:
            return csr_has_sorted_indices(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2]);
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csr_has_canonical_format_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 0:
            return csr_has_canonical_format(*(const npy_int32*)a[0], (const npy_int32*)a[1], (const npy_int32*)a[2]);
        case 18:
            return csr_has_canonical_format(*(const npy_int64*)a[0], (const npy_int64*)a[1], (const npy_int64*)a[2]);
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_matmat_maxnnz_method(PyObject *self, PyObject *args)
{
    return call_thunk('l', "iiIIII", csr_matmat_maxnnz_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_matmat_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*T", csr_matmat_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_diagonal_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiiIIT*T", csr_diagonal_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_tocsc_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIIT*I*I*T", csr_tocsc_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_tobsr_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiiiIIT*I*I*T", csr_tobsr_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_todense_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIIT*T", csr_todense_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_matvec_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITT*T", csr_matvec_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_matvecs_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiiIITT*T", csr_matvecs_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_elmul_csr_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*T", csr_elmul_csr_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_eldiv_csr_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*T", csr_eldiv_csr_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_plus_csr_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*T", csr_plus_csr_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_minus_csr_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*T", csr_minus_csr_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_maximum_csr_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*T", csr_maximum_csr_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_minimum_csr_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*T", csr_minimum_csr_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_ne_csr_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*B", csr_ne_csr_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_lt_csr_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*B", csr_lt_csr_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_gt_csr_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*B", csr_gt_csr_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_le_csr_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*B", csr_le_csr_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_ge_csr_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*B", csr_ge_csr_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_scale_rows_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiII*TT", csr_scale_rows_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_scale_columns_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiII*TT", csr_scale_columns_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_sort_indices_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iI*I*T", csr_sort_indices_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_eliminate_zeros_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "ii*I*I*T", csr_eliminate_zeros_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_sum_duplicates_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "ii*I*I*T", csr_sum_duplicates_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
get_csr_submatrix_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITiiii*V*V*W", get_csr_submatrix_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_row_index_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iIIIT*I*T", csr_row_index_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_row_slice_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiiIIT*I*T", csr_row_slice_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_column_index1_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iIiiII*I*I", csr_column_index1_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_column_index2_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "IIiIT*I*T", csr_column_index2_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_sample_values_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITiII*T", csr_sample_values_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_count_blocks_method(PyObject *self, PyObject *args)
{
    return call_thunk('i', "iiiiII", csr_count_blocks_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_sample_offsets_method(PyObject *self, PyObject *args)
{
    return call_thunk('i', "iiIIiII*I", csr_sample_offsets_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_hstack_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIIIT*I*I*T", csr_hstack_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
expandptr_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iI*I", expandptr_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
test_throw_error_method(PyObject *self, PyObject *args)
{
    return call_thunk('i', "", test_throw_error_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_has_sorted_indices_method(PyObject *self, PyObject *args)
{
    return call_thunk('i', "iII", csr_has_sorted_indices_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csr_has_canonical_format_method(PyObject *self, PyObject *args)
{
    return call_thunk('i', "iII", csr_has_canonical_format_thunk, args);
}
