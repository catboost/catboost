/* This file is autogenerated by generate_sparsetools.py
 * Do not edit manually or check into VCS.
 */

static int get_thunk_case(int I_typenum, int T_typenum)
{
        if (0) {}
        else if (I_typenum == NPY_INT32) {
            if (T_typenum == -1) { return 0; }
            else if (T_typenum == NPY_BOOL) { return 1; }
            else if (T_typenum == NPY_BYTE) { return 2; }
            else if (T_typenum == NPY_UBYTE) { return 3; }
            else if (T_typenum == NPY_SHORT) { return 4; }
            else if (T_typenum == NPY_USHORT) { return 5; }
            else if (T_typenum == NPY_INT) { return 6; }
            else if (T_typenum == NPY_UINT) { return 7; }
            else if (T_typenum == NPY_LONG) { return 8; }
            else if (T_typenum == NPY_ULONG) { return 9; }
            else if (T_typenum == NPY_LONGLONG) { return 10; }
            else if (T_typenum == NPY_ULONGLONG) { return 11; }
            else if (T_typenum == NPY_FLOAT) { return 12; }
            else if (T_typenum == NPY_DOUBLE) { return 13; }
            else if (T_typenum == NPY_LONGDOUBLE) { return 14; }
            else if (T_typenum == NPY_CFLOAT) { return 15; }
            else if (T_typenum == NPY_CDOUBLE) { return 16; }
            else if (T_typenum == NPY_CLONGDOUBLE) { return 17; }
        }
        else if (I_typenum == NPY_INT64) {
            if (T_typenum == -1) { return 18; }
            else if (T_typenum == NPY_BOOL) { return 19; }
            else if (T_typenum == NPY_BYTE) { return 20; }
            else if (T_typenum == NPY_UBYTE) { return 21; }
            else if (T_typenum == NPY_SHORT) { return 22; }
            else if (T_typenum == NPY_USHORT) { return 23; }
            else if (T_typenum == NPY_INT) { return 24; }
            else if (T_typenum == NPY_UINT) { return 25; }
            else if (T_typenum == NPY_LONG) { return 26; }
            else if (T_typenum == NPY_ULONG) { return 27; }
            else if (T_typenum == NPY_LONGLONG) { return 28; }
            else if (T_typenum == NPY_ULONGLONG) { return 29; }
            else if (T_typenum == NPY_FLOAT) { return 30; }
            else if (T_typenum == NPY_DOUBLE) { return 31; }
            else if (T_typenum == NPY_LONGDOUBLE) { return 32; }
            else if (T_typenum == NPY_CFLOAT) { return 33; }
            else if (T_typenum == NPY_CDOUBLE) { return 34; }
            else if (T_typenum == NPY_CLONGDOUBLE) { return 35; }
        };
    return -1;
}

static PY_LONG_LONG csc_diagonal_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csc_diagonal<npy_int32,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_bool_wrapper*)a[5], (npy_bool_wrapper*)a[6]);
            return 0;
        case 2:
            (void)csc_diagonal<npy_int32,npy_byte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_byte*)a[5], (npy_byte*)a[6]);
            return 0;
        case 3:
            (void)csc_diagonal<npy_int32,npy_ubyte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ubyte*)a[5], (npy_ubyte*)a[6]);
            return 0;
        case 4:
            (void)csc_diagonal<npy_int32,npy_short>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_short*)a[5], (npy_short*)a[6]);
            return 0;
        case 5:
            (void)csc_diagonal<npy_int32,npy_ushort>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ushort*)a[5], (npy_ushort*)a[6]);
            return 0;
        case 6:
            (void)csc_diagonal<npy_int32,npy_int>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int*)a[5], (npy_int*)a[6]);
            return 0;
        case 7:
            (void)csc_diagonal<npy_int32,npy_uint>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_uint*)a[5], (npy_uint*)a[6]);
            return 0;
        case 8:
            (void)csc_diagonal<npy_int32,npy_long>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_long*)a[5], (npy_long*)a[6]);
            return 0;
        case 9:
            (void)csc_diagonal<npy_int32,npy_ulong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ulong*)a[5], (npy_ulong*)a[6]);
            return 0;
        case 10:
            (void)csc_diagonal<npy_int32,npy_longlong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_longlong*)a[5], (npy_longlong*)a[6]);
            return 0;
        case 11:
            (void)csc_diagonal<npy_int32,npy_ulonglong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ulonglong*)a[5], (npy_ulonglong*)a[6]);
            return 0;
        case 12:
            (void)csc_diagonal<npy_int32,npy_float>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_float*)a[5], (npy_float*)a[6]);
            return 0;
        case 13:
            (void)csc_diagonal<npy_int32,npy_double>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_double*)a[5], (npy_double*)a[6]);
            return 0;
        case 14:
            (void)csc_diagonal<npy_int32,npy_longdouble>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_longdouble*)a[5], (npy_longdouble*)a[6]);
            return 0;
        case 15:
            (void)csc_diagonal<npy_int32,npy_cfloat_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_cfloat_wrapper*)a[5], (npy_cfloat_wrapper*)a[6]);
            return 0;
        case 16:
            (void)csc_diagonal<npy_int32,npy_cdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_cdouble_wrapper*)a[5], (npy_cdouble_wrapper*)a[6]);
            return 0;
        case 17:
            (void)csc_diagonal<npy_int32,npy_clongdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_clongdouble_wrapper*)a[5], (npy_clongdouble_wrapper*)a[6]);
            return 0;
        case 19:
            (void)csc_diagonal<npy_int64,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_bool_wrapper*)a[5], (npy_bool_wrapper*)a[6]);
            return 0;
        case 20:
            (void)csc_diagonal<npy_int64,npy_byte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_byte*)a[5], (npy_byte*)a[6]);
            return 0;
        case 21:
            (void)csc_diagonal<npy_int64,npy_ubyte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ubyte*)a[5], (npy_ubyte*)a[6]);
            return 0;
        case 22:
            (void)csc_diagonal<npy_int64,npy_short>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_short*)a[5], (npy_short*)a[6]);
            return 0;
        case 23:
            (void)csc_diagonal<npy_int64,npy_ushort>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ushort*)a[5], (npy_ushort*)a[6]);
            return 0;
        case 24:
            (void)csc_diagonal<npy_int64,npy_int>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int*)a[5], (npy_int*)a[6]);
            return 0;
        case 25:
            (void)csc_diagonal<npy_int64,npy_uint>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_uint*)a[5], (npy_uint*)a[6]);
            return 0;
        case 26:
            (void)csc_diagonal<npy_int64,npy_long>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_long*)a[5], (npy_long*)a[6]);
            return 0;
        case 27:
            (void)csc_diagonal<npy_int64,npy_ulong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ulong*)a[5], (npy_ulong*)a[6]);
            return 0;
        case 28:
            (void)csc_diagonal<npy_int64,npy_longlong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_longlong*)a[5], (npy_longlong*)a[6]);
            return 0;
        case 29:
            (void)csc_diagonal<npy_int64,npy_ulonglong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ulonglong*)a[5], (npy_ulonglong*)a[6]);
            return 0;
        case 30:
            (void)csc_diagonal<npy_int64,npy_float>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_float*)a[5], (npy_float*)a[6]);
            return 0;
        case 31:
            (void)csc_diagonal<npy_int64,npy_double>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_double*)a[5], (npy_double*)a[6]);
            return 0;
        case 32:
            (void)csc_diagonal<npy_int64,npy_longdouble>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_longdouble*)a[5], (npy_longdouble*)a[6]);
            return 0;
        case 33:
            (void)csc_diagonal<npy_int64,npy_cfloat_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_cfloat_wrapper*)a[5], (npy_cfloat_wrapper*)a[6]);
            return 0;
        case 34:
            (void)csc_diagonal<npy_int64,npy_cdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_cdouble_wrapper*)a[5], (npy_cdouble_wrapper*)a[6]);
            return 0;
        case 35:
            (void)csc_diagonal<npy_int64,npy_clongdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_clongdouble_wrapper*)a[5], (npy_clongdouble_wrapper*)a[6]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csc_tocsr_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csc_tocsr<npy_int32,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_bool_wrapper*)a[7]);
            return 0;
        case 2:
            (void)csc_tocsr<npy_int32,npy_byte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_byte*)a[7]);
            return 0;
        case 3:
            (void)csc_tocsr<npy_int32,npy_ubyte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_ubyte*)a[7]);
            return 0;
        case 4:
            (void)csc_tocsr<npy_int32,npy_short>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_short*)a[7]);
            return 0;
        case 5:
            (void)csc_tocsr<npy_int32,npy_ushort>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_ushort*)a[7]);
            return 0;
        case 6:
            (void)csc_tocsr<npy_int32,npy_int>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_int*)a[7]);
            return 0;
        case 7:
            (void)csc_tocsr<npy_int32,npy_uint>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_uint*)a[7]);
            return 0;
        case 8:
            (void)csc_tocsr<npy_int32,npy_long>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_long*)a[7]);
            return 0;
        case 9:
            (void)csc_tocsr<npy_int32,npy_ulong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_ulong*)a[7]);
            return 0;
        case 10:
            (void)csc_tocsr<npy_int32,npy_longlong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_longlong*)a[7]);
            return 0;
        case 11:
            (void)csc_tocsr<npy_int32,npy_ulonglong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_ulonglong*)a[7]);
            return 0;
        case 12:
            (void)csc_tocsr<npy_int32,npy_float>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_float*)a[7]);
            return 0;
        case 13:
            (void)csc_tocsr<npy_int32,npy_double>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_double*)a[7]);
            return 0;
        case 14:
            (void)csc_tocsr<npy_int32,npy_longdouble>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_longdouble*)a[7]);
            return 0;
        case 15:
            (void)csc_tocsr<npy_int32,npy_cfloat_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_cfloat_wrapper*)a[7]);
            return 0;
        case 16:
            (void)csc_tocsr<npy_int32,npy_cdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_cdouble_wrapper*)a[7]);
            return 0;
        case 17:
            (void)csc_tocsr<npy_int32,npy_clongdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (npy_int32*)a[5], (npy_int32*)a[6], (npy_clongdouble_wrapper*)a[7]);
            return 0;
        case 19:
            (void)csc_tocsr<npy_int64,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_bool_wrapper*)a[7]);
            return 0;
        case 20:
            (void)csc_tocsr<npy_int64,npy_byte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_byte*)a[7]);
            return 0;
        case 21:
            (void)csc_tocsr<npy_int64,npy_ubyte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_ubyte*)a[7]);
            return 0;
        case 22:
            (void)csc_tocsr<npy_int64,npy_short>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_short*)a[7]);
            return 0;
        case 23:
            (void)csc_tocsr<npy_int64,npy_ushort>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_ushort*)a[7]);
            return 0;
        case 24:
            (void)csc_tocsr<npy_int64,npy_int>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_int*)a[7]);
            return 0;
        case 25:
            (void)csc_tocsr<npy_int64,npy_uint>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_uint*)a[7]);
            return 0;
        case 26:
            (void)csc_tocsr<npy_int64,npy_long>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_long*)a[7]);
            return 0;
        case 27:
            (void)csc_tocsr<npy_int64,npy_ulong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_ulong*)a[7]);
            return 0;
        case 28:
            (void)csc_tocsr<npy_int64,npy_longlong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_longlong*)a[7]);
            return 0;
        case 29:
            (void)csc_tocsr<npy_int64,npy_ulonglong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_ulonglong*)a[7]);
            return 0;
        case 30:
            (void)csc_tocsr<npy_int64,npy_float>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_float*)a[7]);
            return 0;
        case 31:
            (void)csc_tocsr<npy_int64,npy_double>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_double*)a[7]);
            return 0;
        case 32:
            (void)csc_tocsr<npy_int64,npy_longdouble>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_longdouble*)a[7]);
            return 0;
        case 33:
            (void)csc_tocsr<npy_int64,npy_cfloat_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_cfloat_wrapper*)a[7]);
            return 0;
        case 34:
            (void)csc_tocsr<npy_int64,npy_cdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_cdouble_wrapper*)a[7]);
            return 0;
        case 35:
            (void)csc_tocsr<npy_int64,npy_clongdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (npy_int64*)a[5], (npy_int64*)a[6], (npy_clongdouble_wrapper*)a[7]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csc_matmat_pass1_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 0:
            (void)csc_matmat_pass1<npy_int32>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int32*)a[5], (npy_int32*)a[6]);
            return 0;
        case 18:
            (void)csc_matmat_pass1<npy_int64>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int64*)a[5], (npy_int64*)a[6]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csc_matmat_pass2_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csc_matmat_pass2<npy_int32,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csc_matmat_pass2<npy_int32,npy_byte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_byte*)a[10]);
            return 0;
        case 3:
            (void)csc_matmat_pass2<npy_int32,npy_ubyte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 4:
            (void)csc_matmat_pass2<npy_int32,npy_short>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_short*)a[10]);
            return 0;
        case 5:
            (void)csc_matmat_pass2<npy_int32,npy_ushort>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 6:
            (void)csc_matmat_pass2<npy_int32,npy_int>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_int*)a[10]);
            return 0;
        case 7:
            (void)csc_matmat_pass2<npy_int32,npy_uint>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_uint*)a[10]);
            return 0;
        case 8:
            (void)csc_matmat_pass2<npy_int32,npy_long>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_long*)a[10]);
            return 0;
        case 9:
            (void)csc_matmat_pass2<npy_int32,npy_ulong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 10:
            (void)csc_matmat_pass2<npy_int32,npy_longlong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 11:
            (void)csc_matmat_pass2<npy_int32,npy_ulonglong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 12:
            (void)csc_matmat_pass2<npy_int32,npy_float>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_float*)a[10]);
            return 0;
        case 13:
            (void)csc_matmat_pass2<npy_int32,npy_double>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_double*)a[10]);
            return 0;
        case 14:
            (void)csc_matmat_pass2<npy_int32,npy_longdouble>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 15:
            (void)csc_matmat_pass2<npy_int32,npy_cfloat_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csc_matmat_pass2<npy_int32,npy_cdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csc_matmat_pass2<npy_int32,npy_clongdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csc_matmat_pass2<npy_int64,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csc_matmat_pass2<npy_int64,npy_byte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_byte*)a[10]);
            return 0;
        case 21:
            (void)csc_matmat_pass2<npy_int64,npy_ubyte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 22:
            (void)csc_matmat_pass2<npy_int64,npy_short>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_short*)a[10]);
            return 0;
        case 23:
            (void)csc_matmat_pass2<npy_int64,npy_ushort>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 24:
            (void)csc_matmat_pass2<npy_int64,npy_int>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_int*)a[10]);
            return 0;
        case 25:
            (void)csc_matmat_pass2<npy_int64,npy_uint>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_uint*)a[10]);
            return 0;
        case 26:
            (void)csc_matmat_pass2<npy_int64,npy_long>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_long*)a[10]);
            return 0;
        case 27:
            (void)csc_matmat_pass2<npy_int64,npy_ulong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 28:
            (void)csc_matmat_pass2<npy_int64,npy_longlong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 29:
            (void)csc_matmat_pass2<npy_int64,npy_ulonglong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 30:
            (void)csc_matmat_pass2<npy_int64,npy_float>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_float*)a[10]);
            return 0;
        case 31:
            (void)csc_matmat_pass2<npy_int64,npy_double>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_double*)a[10]);
            return 0;
        case 32:
            (void)csc_matmat_pass2<npy_int64,npy_longdouble>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 33:
            (void)csc_matmat_pass2<npy_int64,npy_cfloat_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csc_matmat_pass2<npy_int64,npy_cdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csc_matmat_pass2<npy_int64,npy_clongdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csc_matvec_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csc_matvec<npy_int32,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_bool_wrapper*)a[5], (npy_bool_wrapper*)a[6]);
            return 0;
        case 2:
            (void)csc_matvec<npy_int32,npy_byte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_byte*)a[5], (npy_byte*)a[6]);
            return 0;
        case 3:
            (void)csc_matvec<npy_int32,npy_ubyte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_ubyte*)a[5], (npy_ubyte*)a[6]);
            return 0;
        case 4:
            (void)csc_matvec<npy_int32,npy_short>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_short*)a[5], (npy_short*)a[6]);
            return 0;
        case 5:
            (void)csc_matvec<npy_int32,npy_ushort>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_ushort*)a[5], (npy_ushort*)a[6]);
            return 0;
        case 6:
            (void)csc_matvec<npy_int32,npy_int>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int*)a[5], (npy_int*)a[6]);
            return 0;
        case 7:
            (void)csc_matvec<npy_int32,npy_uint>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_uint*)a[5], (npy_uint*)a[6]);
            return 0;
        case 8:
            (void)csc_matvec<npy_int32,npy_long>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_long*)a[5], (npy_long*)a[6]);
            return 0;
        case 9:
            (void)csc_matvec<npy_int32,npy_ulong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_ulong*)a[5], (npy_ulong*)a[6]);
            return 0;
        case 10:
            (void)csc_matvec<npy_int32,npy_longlong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_longlong*)a[5], (npy_longlong*)a[6]);
            return 0;
        case 11:
            (void)csc_matvec<npy_int32,npy_ulonglong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_ulonglong*)a[5], (npy_ulonglong*)a[6]);
            return 0;
        case 12:
            (void)csc_matvec<npy_int32,npy_float>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_float*)a[5], (npy_float*)a[6]);
            return 0;
        case 13:
            (void)csc_matvec<npy_int32,npy_double>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_double*)a[5], (npy_double*)a[6]);
            return 0;
        case 14:
            (void)csc_matvec<npy_int32,npy_longdouble>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_longdouble*)a[5], (npy_longdouble*)a[6]);
            return 0;
        case 15:
            (void)csc_matvec<npy_int32,npy_cfloat_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_cfloat_wrapper*)a[5], (npy_cfloat_wrapper*)a[6]);
            return 0;
        case 16:
            (void)csc_matvec<npy_int32,npy_cdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_cdouble_wrapper*)a[5], (npy_cdouble_wrapper*)a[6]);
            return 0;
        case 17:
            (void)csc_matvec<npy_int32,npy_clongdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_clongdouble_wrapper*)a[5], (npy_clongdouble_wrapper*)a[6]);
            return 0;
        case 19:
            (void)csc_matvec<npy_int64,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_bool_wrapper*)a[5], (npy_bool_wrapper*)a[6]);
            return 0;
        case 20:
            (void)csc_matvec<npy_int64,npy_byte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_byte*)a[5], (npy_byte*)a[6]);
            return 0;
        case 21:
            (void)csc_matvec<npy_int64,npy_ubyte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_ubyte*)a[5], (npy_ubyte*)a[6]);
            return 0;
        case 22:
            (void)csc_matvec<npy_int64,npy_short>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_short*)a[5], (npy_short*)a[6]);
            return 0;
        case 23:
            (void)csc_matvec<npy_int64,npy_ushort>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_ushort*)a[5], (npy_ushort*)a[6]);
            return 0;
        case 24:
            (void)csc_matvec<npy_int64,npy_int>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int*)a[5], (npy_int*)a[6]);
            return 0;
        case 25:
            (void)csc_matvec<npy_int64,npy_uint>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_uint*)a[5], (npy_uint*)a[6]);
            return 0;
        case 26:
            (void)csc_matvec<npy_int64,npy_long>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_long*)a[5], (npy_long*)a[6]);
            return 0;
        case 27:
            (void)csc_matvec<npy_int64,npy_ulong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_ulong*)a[5], (npy_ulong*)a[6]);
            return 0;
        case 28:
            (void)csc_matvec<npy_int64,npy_longlong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_longlong*)a[5], (npy_longlong*)a[6]);
            return 0;
        case 29:
            (void)csc_matvec<npy_int64,npy_ulonglong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_ulonglong*)a[5], (npy_ulonglong*)a[6]);
            return 0;
        case 30:
            (void)csc_matvec<npy_int64,npy_float>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_float*)a[5], (npy_float*)a[6]);
            return 0;
        case 31:
            (void)csc_matvec<npy_int64,npy_double>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_double*)a[5], (npy_double*)a[6]);
            return 0;
        case 32:
            (void)csc_matvec<npy_int64,npy_longdouble>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_longdouble*)a[5], (npy_longdouble*)a[6]);
            return 0;
        case 33:
            (void)csc_matvec<npy_int64,npy_cfloat_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_cfloat_wrapper*)a[5], (npy_cfloat_wrapper*)a[6]);
            return 0;
        case 34:
            (void)csc_matvec<npy_int64,npy_cdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_cdouble_wrapper*)a[5], (npy_cdouble_wrapper*)a[6]);
            return 0;
        case 35:
            (void)csc_matvec<npy_int64,npy_clongdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_clongdouble_wrapper*)a[5], (npy_clongdouble_wrapper*)a[6]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csc_matvecs_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csc_matvecs<npy_int32,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_bool_wrapper*)a[5], (const npy_bool_wrapper*)a[6], (npy_bool_wrapper*)a[7]);
            return 0;
        case 2:
            (void)csc_matvecs<npy_int32,npy_byte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_byte*)a[5], (const npy_byte*)a[6], (npy_byte*)a[7]);
            return 0;
        case 3:
            (void)csc_matvecs<npy_int32,npy_ubyte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ubyte*)a[5], (const npy_ubyte*)a[6], (npy_ubyte*)a[7]);
            return 0;
        case 4:
            (void)csc_matvecs<npy_int32,npy_short>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_short*)a[5], (const npy_short*)a[6], (npy_short*)a[7]);
            return 0;
        case 5:
            (void)csc_matvecs<npy_int32,npy_ushort>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ushort*)a[5], (const npy_ushort*)a[6], (npy_ushort*)a[7]);
            return 0;
        case 6:
            (void)csc_matvecs<npy_int32,npy_int>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_int*)a[5], (const npy_int*)a[6], (npy_int*)a[7]);
            return 0;
        case 7:
            (void)csc_matvecs<npy_int32,npy_uint>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_uint*)a[5], (const npy_uint*)a[6], (npy_uint*)a[7]);
            return 0;
        case 8:
            (void)csc_matvecs<npy_int32,npy_long>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_long*)a[5], (const npy_long*)a[6], (npy_long*)a[7]);
            return 0;
        case 9:
            (void)csc_matvecs<npy_int32,npy_ulong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ulong*)a[5], (const npy_ulong*)a[6], (npy_ulong*)a[7]);
            return 0;
        case 10:
            (void)csc_matvecs<npy_int32,npy_longlong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_longlong*)a[5], (const npy_longlong*)a[6], (npy_longlong*)a[7]);
            return 0;
        case 11:
            (void)csc_matvecs<npy_int32,npy_ulonglong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_ulonglong*)a[5], (const npy_ulonglong*)a[6], (npy_ulonglong*)a[7]);
            return 0;
        case 12:
            (void)csc_matvecs<npy_int32,npy_float>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_float*)a[5], (const npy_float*)a[6], (npy_float*)a[7]);
            return 0;
        case 13:
            (void)csc_matvecs<npy_int32,npy_double>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_double*)a[5], (const npy_double*)a[6], (npy_double*)a[7]);
            return 0;
        case 14:
            (void)csc_matvecs<npy_int32,npy_longdouble>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_longdouble*)a[5], (const npy_longdouble*)a[6], (npy_longdouble*)a[7]);
            return 0;
        case 15:
            (void)csc_matvecs<npy_int32,npy_cfloat_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_cfloat_wrapper*)a[5], (const npy_cfloat_wrapper*)a[6], (npy_cfloat_wrapper*)a[7]);
            return 0;
        case 16:
            (void)csc_matvecs<npy_int32,npy_cdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_cdouble_wrapper*)a[5], (const npy_cdouble_wrapper*)a[6], (npy_cdouble_wrapper*)a[7]);
            return 0;
        case 17:
            (void)csc_matvecs<npy_int32,npy_clongdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], *(const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int32*)a[4], (const npy_clongdouble_wrapper*)a[5], (const npy_clongdouble_wrapper*)a[6], (npy_clongdouble_wrapper*)a[7]);
            return 0;
        case 19:
            (void)csc_matvecs<npy_int64,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_bool_wrapper*)a[5], (const npy_bool_wrapper*)a[6], (npy_bool_wrapper*)a[7]);
            return 0;
        case 20:
            (void)csc_matvecs<npy_int64,npy_byte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_byte*)a[5], (const npy_byte*)a[6], (npy_byte*)a[7]);
            return 0;
        case 21:
            (void)csc_matvecs<npy_int64,npy_ubyte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ubyte*)a[5], (const npy_ubyte*)a[6], (npy_ubyte*)a[7]);
            return 0;
        case 22:
            (void)csc_matvecs<npy_int64,npy_short>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_short*)a[5], (const npy_short*)a[6], (npy_short*)a[7]);
            return 0;
        case 23:
            (void)csc_matvecs<npy_int64,npy_ushort>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ushort*)a[5], (const npy_ushort*)a[6], (npy_ushort*)a[7]);
            return 0;
        case 24:
            (void)csc_matvecs<npy_int64,npy_int>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_int*)a[5], (const npy_int*)a[6], (npy_int*)a[7]);
            return 0;
        case 25:
            (void)csc_matvecs<npy_int64,npy_uint>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_uint*)a[5], (const npy_uint*)a[6], (npy_uint*)a[7]);
            return 0;
        case 26:
            (void)csc_matvecs<npy_int64,npy_long>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_long*)a[5], (const npy_long*)a[6], (npy_long*)a[7]);
            return 0;
        case 27:
            (void)csc_matvecs<npy_int64,npy_ulong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ulong*)a[5], (const npy_ulong*)a[6], (npy_ulong*)a[7]);
            return 0;
        case 28:
            (void)csc_matvecs<npy_int64,npy_longlong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_longlong*)a[5], (const npy_longlong*)a[6], (npy_longlong*)a[7]);
            return 0;
        case 29:
            (void)csc_matvecs<npy_int64,npy_ulonglong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_ulonglong*)a[5], (const npy_ulonglong*)a[6], (npy_ulonglong*)a[7]);
            return 0;
        case 30:
            (void)csc_matvecs<npy_int64,npy_float>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_float*)a[5], (const npy_float*)a[6], (npy_float*)a[7]);
            return 0;
        case 31:
            (void)csc_matvecs<npy_int64,npy_double>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_double*)a[5], (const npy_double*)a[6], (npy_double*)a[7]);
            return 0;
        case 32:
            (void)csc_matvecs<npy_int64,npy_longdouble>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_longdouble*)a[5], (const npy_longdouble*)a[6], (npy_longdouble*)a[7]);
            return 0;
        case 33:
            (void)csc_matvecs<npy_int64,npy_cfloat_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_cfloat_wrapper*)a[5], (const npy_cfloat_wrapper*)a[6], (npy_cfloat_wrapper*)a[7]);
            return 0;
        case 34:
            (void)csc_matvecs<npy_int64,npy_cdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_cdouble_wrapper*)a[5], (const npy_cdouble_wrapper*)a[6], (npy_cdouble_wrapper*)a[7]);
            return 0;
        case 35:
            (void)csc_matvecs<npy_int64,npy_clongdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], *(const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int64*)a[4], (const npy_clongdouble_wrapper*)a[5], (const npy_clongdouble_wrapper*)a[6], (npy_clongdouble_wrapper*)a[7]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csc_elmul_csc_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csc_elmul_csc<npy_int32,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csc_elmul_csc<npy_int32,npy_byte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_byte*)a[10]);
            return 0;
        case 3:
            (void)csc_elmul_csc<npy_int32,npy_ubyte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 4:
            (void)csc_elmul_csc<npy_int32,npy_short>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_short*)a[10]);
            return 0;
        case 5:
            (void)csc_elmul_csc<npy_int32,npy_ushort>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 6:
            (void)csc_elmul_csc<npy_int32,npy_int>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_int*)a[10]);
            return 0;
        case 7:
            (void)csc_elmul_csc<npy_int32,npy_uint>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_uint*)a[10]);
            return 0;
        case 8:
            (void)csc_elmul_csc<npy_int32,npy_long>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_long*)a[10]);
            return 0;
        case 9:
            (void)csc_elmul_csc<npy_int32,npy_ulong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 10:
            (void)csc_elmul_csc<npy_int32,npy_longlong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 11:
            (void)csc_elmul_csc<npy_int32,npy_ulonglong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 12:
            (void)csc_elmul_csc<npy_int32,npy_float>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_float*)a[10]);
            return 0;
        case 13:
            (void)csc_elmul_csc<npy_int32,npy_double>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_double*)a[10]);
            return 0;
        case 14:
            (void)csc_elmul_csc<npy_int32,npy_longdouble>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 15:
            (void)csc_elmul_csc<npy_int32,npy_cfloat_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csc_elmul_csc<npy_int32,npy_cdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csc_elmul_csc<npy_int32,npy_clongdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csc_elmul_csc<npy_int64,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csc_elmul_csc<npy_int64,npy_byte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_byte*)a[10]);
            return 0;
        case 21:
            (void)csc_elmul_csc<npy_int64,npy_ubyte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 22:
            (void)csc_elmul_csc<npy_int64,npy_short>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_short*)a[10]);
            return 0;
        case 23:
            (void)csc_elmul_csc<npy_int64,npy_ushort>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 24:
            (void)csc_elmul_csc<npy_int64,npy_int>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_int*)a[10]);
            return 0;
        case 25:
            (void)csc_elmul_csc<npy_int64,npy_uint>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_uint*)a[10]);
            return 0;
        case 26:
            (void)csc_elmul_csc<npy_int64,npy_long>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_long*)a[10]);
            return 0;
        case 27:
            (void)csc_elmul_csc<npy_int64,npy_ulong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 28:
            (void)csc_elmul_csc<npy_int64,npy_longlong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 29:
            (void)csc_elmul_csc<npy_int64,npy_ulonglong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 30:
            (void)csc_elmul_csc<npy_int64,npy_float>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_float*)a[10]);
            return 0;
        case 31:
            (void)csc_elmul_csc<npy_int64,npy_double>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_double*)a[10]);
            return 0;
        case 32:
            (void)csc_elmul_csc<npy_int64,npy_longdouble>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 33:
            (void)csc_elmul_csc<npy_int64,npy_cfloat_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csc_elmul_csc<npy_int64,npy_cdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csc_elmul_csc<npy_int64,npy_clongdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csc_eldiv_csc_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csc_eldiv_csc<npy_int32,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csc_eldiv_csc<npy_int32,npy_byte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_byte*)a[10]);
            return 0;
        case 3:
            (void)csc_eldiv_csc<npy_int32,npy_ubyte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 4:
            (void)csc_eldiv_csc<npy_int32,npy_short>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_short*)a[10]);
            return 0;
        case 5:
            (void)csc_eldiv_csc<npy_int32,npy_ushort>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 6:
            (void)csc_eldiv_csc<npy_int32,npy_int>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_int*)a[10]);
            return 0;
        case 7:
            (void)csc_eldiv_csc<npy_int32,npy_uint>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_uint*)a[10]);
            return 0;
        case 8:
            (void)csc_eldiv_csc<npy_int32,npy_long>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_long*)a[10]);
            return 0;
        case 9:
            (void)csc_eldiv_csc<npy_int32,npy_ulong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 10:
            (void)csc_eldiv_csc<npy_int32,npy_longlong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 11:
            (void)csc_eldiv_csc<npy_int32,npy_ulonglong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 12:
            (void)csc_eldiv_csc<npy_int32,npy_float>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_float*)a[10]);
            return 0;
        case 13:
            (void)csc_eldiv_csc<npy_int32,npy_double>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_double*)a[10]);
            return 0;
        case 14:
            (void)csc_eldiv_csc<npy_int32,npy_longdouble>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 15:
            (void)csc_eldiv_csc<npy_int32,npy_cfloat_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csc_eldiv_csc<npy_int32,npy_cdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csc_eldiv_csc<npy_int32,npy_clongdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csc_eldiv_csc<npy_int64,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csc_eldiv_csc<npy_int64,npy_byte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_byte*)a[10]);
            return 0;
        case 21:
            (void)csc_eldiv_csc<npy_int64,npy_ubyte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 22:
            (void)csc_eldiv_csc<npy_int64,npy_short>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_short*)a[10]);
            return 0;
        case 23:
            (void)csc_eldiv_csc<npy_int64,npy_ushort>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 24:
            (void)csc_eldiv_csc<npy_int64,npy_int>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_int*)a[10]);
            return 0;
        case 25:
            (void)csc_eldiv_csc<npy_int64,npy_uint>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_uint*)a[10]);
            return 0;
        case 26:
            (void)csc_eldiv_csc<npy_int64,npy_long>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_long*)a[10]);
            return 0;
        case 27:
            (void)csc_eldiv_csc<npy_int64,npy_ulong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 28:
            (void)csc_eldiv_csc<npy_int64,npy_longlong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 29:
            (void)csc_eldiv_csc<npy_int64,npy_ulonglong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 30:
            (void)csc_eldiv_csc<npy_int64,npy_float>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_float*)a[10]);
            return 0;
        case 31:
            (void)csc_eldiv_csc<npy_int64,npy_double>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_double*)a[10]);
            return 0;
        case 32:
            (void)csc_eldiv_csc<npy_int64,npy_longdouble>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 33:
            (void)csc_eldiv_csc<npy_int64,npy_cfloat_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csc_eldiv_csc<npy_int64,npy_cdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csc_eldiv_csc<npy_int64,npy_clongdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csc_plus_csc_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csc_plus_csc<npy_int32,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csc_plus_csc<npy_int32,npy_byte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_byte*)a[10]);
            return 0;
        case 3:
            (void)csc_plus_csc<npy_int32,npy_ubyte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 4:
            (void)csc_plus_csc<npy_int32,npy_short>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_short*)a[10]);
            return 0;
        case 5:
            (void)csc_plus_csc<npy_int32,npy_ushort>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 6:
            (void)csc_plus_csc<npy_int32,npy_int>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_int*)a[10]);
            return 0;
        case 7:
            (void)csc_plus_csc<npy_int32,npy_uint>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_uint*)a[10]);
            return 0;
        case 8:
            (void)csc_plus_csc<npy_int32,npy_long>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_long*)a[10]);
            return 0;
        case 9:
            (void)csc_plus_csc<npy_int32,npy_ulong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 10:
            (void)csc_plus_csc<npy_int32,npy_longlong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 11:
            (void)csc_plus_csc<npy_int32,npy_ulonglong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 12:
            (void)csc_plus_csc<npy_int32,npy_float>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_float*)a[10]);
            return 0;
        case 13:
            (void)csc_plus_csc<npy_int32,npy_double>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_double*)a[10]);
            return 0;
        case 14:
            (void)csc_plus_csc<npy_int32,npy_longdouble>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 15:
            (void)csc_plus_csc<npy_int32,npy_cfloat_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csc_plus_csc<npy_int32,npy_cdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csc_plus_csc<npy_int32,npy_clongdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csc_plus_csc<npy_int64,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csc_plus_csc<npy_int64,npy_byte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_byte*)a[10]);
            return 0;
        case 21:
            (void)csc_plus_csc<npy_int64,npy_ubyte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 22:
            (void)csc_plus_csc<npy_int64,npy_short>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_short*)a[10]);
            return 0;
        case 23:
            (void)csc_plus_csc<npy_int64,npy_ushort>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 24:
            (void)csc_plus_csc<npy_int64,npy_int>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_int*)a[10]);
            return 0;
        case 25:
            (void)csc_plus_csc<npy_int64,npy_uint>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_uint*)a[10]);
            return 0;
        case 26:
            (void)csc_plus_csc<npy_int64,npy_long>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_long*)a[10]);
            return 0;
        case 27:
            (void)csc_plus_csc<npy_int64,npy_ulong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 28:
            (void)csc_plus_csc<npy_int64,npy_longlong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 29:
            (void)csc_plus_csc<npy_int64,npy_ulonglong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 30:
            (void)csc_plus_csc<npy_int64,npy_float>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_float*)a[10]);
            return 0;
        case 31:
            (void)csc_plus_csc<npy_int64,npy_double>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_double*)a[10]);
            return 0;
        case 32:
            (void)csc_plus_csc<npy_int64,npy_longdouble>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 33:
            (void)csc_plus_csc<npy_int64,npy_cfloat_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csc_plus_csc<npy_int64,npy_cdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csc_plus_csc<npy_int64,npy_clongdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csc_minus_csc_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csc_minus_csc<npy_int32,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csc_minus_csc<npy_int32,npy_byte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_byte*)a[10]);
            return 0;
        case 3:
            (void)csc_minus_csc<npy_int32,npy_ubyte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 4:
            (void)csc_minus_csc<npy_int32,npy_short>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_short*)a[10]);
            return 0;
        case 5:
            (void)csc_minus_csc<npy_int32,npy_ushort>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 6:
            (void)csc_minus_csc<npy_int32,npy_int>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_int*)a[10]);
            return 0;
        case 7:
            (void)csc_minus_csc<npy_int32,npy_uint>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_uint*)a[10]);
            return 0;
        case 8:
            (void)csc_minus_csc<npy_int32,npy_long>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_long*)a[10]);
            return 0;
        case 9:
            (void)csc_minus_csc<npy_int32,npy_ulong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 10:
            (void)csc_minus_csc<npy_int32,npy_longlong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 11:
            (void)csc_minus_csc<npy_int32,npy_ulonglong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 12:
            (void)csc_minus_csc<npy_int32,npy_float>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_float*)a[10]);
            return 0;
        case 13:
            (void)csc_minus_csc<npy_int32,npy_double>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_double*)a[10]);
            return 0;
        case 14:
            (void)csc_minus_csc<npy_int32,npy_longdouble>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 15:
            (void)csc_minus_csc<npy_int32,npy_cfloat_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csc_minus_csc<npy_int32,npy_cdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csc_minus_csc<npy_int32,npy_clongdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csc_minus_csc<npy_int64,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csc_minus_csc<npy_int64,npy_byte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_byte*)a[10]);
            return 0;
        case 21:
            (void)csc_minus_csc<npy_int64,npy_ubyte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 22:
            (void)csc_minus_csc<npy_int64,npy_short>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_short*)a[10]);
            return 0;
        case 23:
            (void)csc_minus_csc<npy_int64,npy_ushort>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 24:
            (void)csc_minus_csc<npy_int64,npy_int>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_int*)a[10]);
            return 0;
        case 25:
            (void)csc_minus_csc<npy_int64,npy_uint>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_uint*)a[10]);
            return 0;
        case 26:
            (void)csc_minus_csc<npy_int64,npy_long>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_long*)a[10]);
            return 0;
        case 27:
            (void)csc_minus_csc<npy_int64,npy_ulong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 28:
            (void)csc_minus_csc<npy_int64,npy_longlong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 29:
            (void)csc_minus_csc<npy_int64,npy_ulonglong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 30:
            (void)csc_minus_csc<npy_int64,npy_float>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_float*)a[10]);
            return 0;
        case 31:
            (void)csc_minus_csc<npy_int64,npy_double>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_double*)a[10]);
            return 0;
        case 32:
            (void)csc_minus_csc<npy_int64,npy_longdouble>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 33:
            (void)csc_minus_csc<npy_int64,npy_cfloat_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csc_minus_csc<npy_int64,npy_cdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csc_minus_csc<npy_int64,npy_clongdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csc_maximum_csc_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csc_maximum_csc<npy_int32,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csc_maximum_csc<npy_int32,npy_byte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_byte*)a[10]);
            return 0;
        case 3:
            (void)csc_maximum_csc<npy_int32,npy_ubyte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 4:
            (void)csc_maximum_csc<npy_int32,npy_short>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_short*)a[10]);
            return 0;
        case 5:
            (void)csc_maximum_csc<npy_int32,npy_ushort>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 6:
            (void)csc_maximum_csc<npy_int32,npy_int>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_int*)a[10]);
            return 0;
        case 7:
            (void)csc_maximum_csc<npy_int32,npy_uint>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_uint*)a[10]);
            return 0;
        case 8:
            (void)csc_maximum_csc<npy_int32,npy_long>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_long*)a[10]);
            return 0;
        case 9:
            (void)csc_maximum_csc<npy_int32,npy_ulong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 10:
            (void)csc_maximum_csc<npy_int32,npy_longlong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 11:
            (void)csc_maximum_csc<npy_int32,npy_ulonglong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 12:
            (void)csc_maximum_csc<npy_int32,npy_float>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_float*)a[10]);
            return 0;
        case 13:
            (void)csc_maximum_csc<npy_int32,npy_double>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_double*)a[10]);
            return 0;
        case 14:
            (void)csc_maximum_csc<npy_int32,npy_longdouble>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 15:
            (void)csc_maximum_csc<npy_int32,npy_cfloat_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csc_maximum_csc<npy_int32,npy_cdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csc_maximum_csc<npy_int32,npy_clongdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csc_maximum_csc<npy_int64,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csc_maximum_csc<npy_int64,npy_byte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_byte*)a[10]);
            return 0;
        case 21:
            (void)csc_maximum_csc<npy_int64,npy_ubyte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 22:
            (void)csc_maximum_csc<npy_int64,npy_short>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_short*)a[10]);
            return 0;
        case 23:
            (void)csc_maximum_csc<npy_int64,npy_ushort>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 24:
            (void)csc_maximum_csc<npy_int64,npy_int>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_int*)a[10]);
            return 0;
        case 25:
            (void)csc_maximum_csc<npy_int64,npy_uint>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_uint*)a[10]);
            return 0;
        case 26:
            (void)csc_maximum_csc<npy_int64,npy_long>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_long*)a[10]);
            return 0;
        case 27:
            (void)csc_maximum_csc<npy_int64,npy_ulong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 28:
            (void)csc_maximum_csc<npy_int64,npy_longlong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 29:
            (void)csc_maximum_csc<npy_int64,npy_ulonglong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 30:
            (void)csc_maximum_csc<npy_int64,npy_float>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_float*)a[10]);
            return 0;
        case 31:
            (void)csc_maximum_csc<npy_int64,npy_double>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_double*)a[10]);
            return 0;
        case 32:
            (void)csc_maximum_csc<npy_int64,npy_longdouble>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 33:
            (void)csc_maximum_csc<npy_int64,npy_cfloat_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csc_maximum_csc<npy_int64,npy_cdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csc_maximum_csc<npy_int64,npy_clongdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csc_minimum_csc_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csc_minimum_csc<npy_int32,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csc_minimum_csc<npy_int32,npy_byte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_byte*)a[10]);
            return 0;
        case 3:
            (void)csc_minimum_csc<npy_int32,npy_ubyte>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 4:
            (void)csc_minimum_csc<npy_int32,npy_short>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_short*)a[10]);
            return 0;
        case 5:
            (void)csc_minimum_csc<npy_int32,npy_ushort>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 6:
            (void)csc_minimum_csc<npy_int32,npy_int>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_int*)a[10]);
            return 0;
        case 7:
            (void)csc_minimum_csc<npy_int32,npy_uint>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_uint*)a[10]);
            return 0;
        case 8:
            (void)csc_minimum_csc<npy_int32,npy_long>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_long*)a[10]);
            return 0;
        case 9:
            (void)csc_minimum_csc<npy_int32,npy_ulong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 10:
            (void)csc_minimum_csc<npy_int32,npy_longlong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 11:
            (void)csc_minimum_csc<npy_int32,npy_ulonglong>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 12:
            (void)csc_minimum_csc<npy_int32,npy_float>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_float*)a[10]);
            return 0;
        case 13:
            (void)csc_minimum_csc<npy_int32,npy_double>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_double*)a[10]);
            return 0;
        case 14:
            (void)csc_minimum_csc<npy_int32,npy_longdouble>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 15:
            (void)csc_minimum_csc<npy_int32,npy_cfloat_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csc_minimum_csc<npy_int32,npy_cdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csc_minimum_csc<npy_int32,npy_clongdouble_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csc_minimum_csc<npy_int64,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csc_minimum_csc<npy_int64,npy_byte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_byte*)a[10]);
            return 0;
        case 21:
            (void)csc_minimum_csc<npy_int64,npy_ubyte>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ubyte*)a[10]);
            return 0;
        case 22:
            (void)csc_minimum_csc<npy_int64,npy_short>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_short*)a[10]);
            return 0;
        case 23:
            (void)csc_minimum_csc<npy_int64,npy_ushort>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ushort*)a[10]);
            return 0;
        case 24:
            (void)csc_minimum_csc<npy_int64,npy_int>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_int*)a[10]);
            return 0;
        case 25:
            (void)csc_minimum_csc<npy_int64,npy_uint>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_uint*)a[10]);
            return 0;
        case 26:
            (void)csc_minimum_csc<npy_int64,npy_long>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_long*)a[10]);
            return 0;
        case 27:
            (void)csc_minimum_csc<npy_int64,npy_ulong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulong*)a[10]);
            return 0;
        case 28:
            (void)csc_minimum_csc<npy_int64,npy_longlong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longlong*)a[10]);
            return 0;
        case 29:
            (void)csc_minimum_csc<npy_int64,npy_ulonglong>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_ulonglong*)a[10]);
            return 0;
        case 30:
            (void)csc_minimum_csc<npy_int64,npy_float>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_float*)a[10]);
            return 0;
        case 31:
            (void)csc_minimum_csc<npy_int64,npy_double>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_double*)a[10]);
            return 0;
        case 32:
            (void)csc_minimum_csc<npy_int64,npy_longdouble>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_longdouble*)a[10]);
            return 0;
        case 33:
            (void)csc_minimum_csc<npy_int64,npy_cfloat_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cfloat_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csc_minimum_csc<npy_int64,npy_cdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_cdouble_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csc_minimum_csc<npy_int64,npy_clongdouble_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_clongdouble_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csc_ne_csc_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csc_ne_csc<npy_int32,npy_bool_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csc_ne_csc<npy_int32,npy_byte,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 3:
            (void)csc_ne_csc<npy_int32,npy_ubyte,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 4:
            (void)csc_ne_csc<npy_int32,npy_short,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 5:
            (void)csc_ne_csc<npy_int32,npy_ushort,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 6:
            (void)csc_ne_csc<npy_int32,npy_int,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 7:
            (void)csc_ne_csc<npy_int32,npy_uint,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 8:
            (void)csc_ne_csc<npy_int32,npy_long,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 9:
            (void)csc_ne_csc<npy_int32,npy_ulong,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 10:
            (void)csc_ne_csc<npy_int32,npy_longlong,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 11:
            (void)csc_ne_csc<npy_int32,npy_ulonglong,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 12:
            (void)csc_ne_csc<npy_int32,npy_float,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 13:
            (void)csc_ne_csc<npy_int32,npy_double,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 14:
            (void)csc_ne_csc<npy_int32,npy_longdouble,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 15:
            (void)csc_ne_csc<npy_int32,npy_cfloat_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csc_ne_csc<npy_int32,npy_cdouble_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csc_ne_csc<npy_int32,npy_clongdouble_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csc_ne_csc<npy_int64,npy_bool_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csc_ne_csc<npy_int64,npy_byte,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 21:
            (void)csc_ne_csc<npy_int64,npy_ubyte,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 22:
            (void)csc_ne_csc<npy_int64,npy_short,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 23:
            (void)csc_ne_csc<npy_int64,npy_ushort,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 24:
            (void)csc_ne_csc<npy_int64,npy_int,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 25:
            (void)csc_ne_csc<npy_int64,npy_uint,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 26:
            (void)csc_ne_csc<npy_int64,npy_long,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 27:
            (void)csc_ne_csc<npy_int64,npy_ulong,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 28:
            (void)csc_ne_csc<npy_int64,npy_longlong,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 29:
            (void)csc_ne_csc<npy_int64,npy_ulonglong,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 30:
            (void)csc_ne_csc<npy_int64,npy_float,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 31:
            (void)csc_ne_csc<npy_int64,npy_double,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 32:
            (void)csc_ne_csc<npy_int64,npy_longdouble,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 33:
            (void)csc_ne_csc<npy_int64,npy_cfloat_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csc_ne_csc<npy_int64,npy_cdouble_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csc_ne_csc<npy_int64,npy_clongdouble_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csc_lt_csc_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csc_lt_csc<npy_int32,npy_bool_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csc_lt_csc<npy_int32,npy_byte,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 3:
            (void)csc_lt_csc<npy_int32,npy_ubyte,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 4:
            (void)csc_lt_csc<npy_int32,npy_short,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 5:
            (void)csc_lt_csc<npy_int32,npy_ushort,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 6:
            (void)csc_lt_csc<npy_int32,npy_int,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 7:
            (void)csc_lt_csc<npy_int32,npy_uint,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 8:
            (void)csc_lt_csc<npy_int32,npy_long,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 9:
            (void)csc_lt_csc<npy_int32,npy_ulong,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 10:
            (void)csc_lt_csc<npy_int32,npy_longlong,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 11:
            (void)csc_lt_csc<npy_int32,npy_ulonglong,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 12:
            (void)csc_lt_csc<npy_int32,npy_float,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 13:
            (void)csc_lt_csc<npy_int32,npy_double,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 14:
            (void)csc_lt_csc<npy_int32,npy_longdouble,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 15:
            (void)csc_lt_csc<npy_int32,npy_cfloat_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csc_lt_csc<npy_int32,npy_cdouble_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csc_lt_csc<npy_int32,npy_clongdouble_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csc_lt_csc<npy_int64,npy_bool_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csc_lt_csc<npy_int64,npy_byte,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 21:
            (void)csc_lt_csc<npy_int64,npy_ubyte,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 22:
            (void)csc_lt_csc<npy_int64,npy_short,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 23:
            (void)csc_lt_csc<npy_int64,npy_ushort,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 24:
            (void)csc_lt_csc<npy_int64,npy_int,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 25:
            (void)csc_lt_csc<npy_int64,npy_uint,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 26:
            (void)csc_lt_csc<npy_int64,npy_long,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 27:
            (void)csc_lt_csc<npy_int64,npy_ulong,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 28:
            (void)csc_lt_csc<npy_int64,npy_longlong,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 29:
            (void)csc_lt_csc<npy_int64,npy_ulonglong,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 30:
            (void)csc_lt_csc<npy_int64,npy_float,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 31:
            (void)csc_lt_csc<npy_int64,npy_double,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 32:
            (void)csc_lt_csc<npy_int64,npy_longdouble,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 33:
            (void)csc_lt_csc<npy_int64,npy_cfloat_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csc_lt_csc<npy_int64,npy_cdouble_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csc_lt_csc<npy_int64,npy_clongdouble_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csc_gt_csc_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csc_gt_csc<npy_int32,npy_bool_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csc_gt_csc<npy_int32,npy_byte,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 3:
            (void)csc_gt_csc<npy_int32,npy_ubyte,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 4:
            (void)csc_gt_csc<npy_int32,npy_short,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 5:
            (void)csc_gt_csc<npy_int32,npy_ushort,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 6:
            (void)csc_gt_csc<npy_int32,npy_int,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 7:
            (void)csc_gt_csc<npy_int32,npy_uint,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 8:
            (void)csc_gt_csc<npy_int32,npy_long,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 9:
            (void)csc_gt_csc<npy_int32,npy_ulong,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 10:
            (void)csc_gt_csc<npy_int32,npy_longlong,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 11:
            (void)csc_gt_csc<npy_int32,npy_ulonglong,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 12:
            (void)csc_gt_csc<npy_int32,npy_float,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 13:
            (void)csc_gt_csc<npy_int32,npy_double,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 14:
            (void)csc_gt_csc<npy_int32,npy_longdouble,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 15:
            (void)csc_gt_csc<npy_int32,npy_cfloat_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csc_gt_csc<npy_int32,npy_cdouble_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csc_gt_csc<npy_int32,npy_clongdouble_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csc_gt_csc<npy_int64,npy_bool_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csc_gt_csc<npy_int64,npy_byte,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 21:
            (void)csc_gt_csc<npy_int64,npy_ubyte,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 22:
            (void)csc_gt_csc<npy_int64,npy_short,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 23:
            (void)csc_gt_csc<npy_int64,npy_ushort,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 24:
            (void)csc_gt_csc<npy_int64,npy_int,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 25:
            (void)csc_gt_csc<npy_int64,npy_uint,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 26:
            (void)csc_gt_csc<npy_int64,npy_long,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 27:
            (void)csc_gt_csc<npy_int64,npy_ulong,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 28:
            (void)csc_gt_csc<npy_int64,npy_longlong,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 29:
            (void)csc_gt_csc<npy_int64,npy_ulonglong,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 30:
            (void)csc_gt_csc<npy_int64,npy_float,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 31:
            (void)csc_gt_csc<npy_int64,npy_double,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 32:
            (void)csc_gt_csc<npy_int64,npy_longdouble,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 33:
            (void)csc_gt_csc<npy_int64,npy_cfloat_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csc_gt_csc<npy_int64,npy_cdouble_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csc_gt_csc<npy_int64,npy_clongdouble_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csc_le_csc_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csc_le_csc<npy_int32,npy_bool_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csc_le_csc<npy_int32,npy_byte,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 3:
            (void)csc_le_csc<npy_int32,npy_ubyte,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 4:
            (void)csc_le_csc<npy_int32,npy_short,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 5:
            (void)csc_le_csc<npy_int32,npy_ushort,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 6:
            (void)csc_le_csc<npy_int32,npy_int,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 7:
            (void)csc_le_csc<npy_int32,npy_uint,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 8:
            (void)csc_le_csc<npy_int32,npy_long,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 9:
            (void)csc_le_csc<npy_int32,npy_ulong,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 10:
            (void)csc_le_csc<npy_int32,npy_longlong,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 11:
            (void)csc_le_csc<npy_int32,npy_ulonglong,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 12:
            (void)csc_le_csc<npy_int32,npy_float,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 13:
            (void)csc_le_csc<npy_int32,npy_double,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 14:
            (void)csc_le_csc<npy_int32,npy_longdouble,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 15:
            (void)csc_le_csc<npy_int32,npy_cfloat_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csc_le_csc<npy_int32,npy_cdouble_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csc_le_csc<npy_int32,npy_clongdouble_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csc_le_csc<npy_int64,npy_bool_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csc_le_csc<npy_int64,npy_byte,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 21:
            (void)csc_le_csc<npy_int64,npy_ubyte,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 22:
            (void)csc_le_csc<npy_int64,npy_short,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 23:
            (void)csc_le_csc<npy_int64,npy_ushort,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 24:
            (void)csc_le_csc<npy_int64,npy_int,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 25:
            (void)csc_le_csc<npy_int64,npy_uint,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 26:
            (void)csc_le_csc<npy_int64,npy_long,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 27:
            (void)csc_le_csc<npy_int64,npy_ulong,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 28:
            (void)csc_le_csc<npy_int64,npy_longlong,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 29:
            (void)csc_le_csc<npy_int64,npy_ulonglong,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 30:
            (void)csc_le_csc<npy_int64,npy_float,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 31:
            (void)csc_le_csc<npy_int64,npy_double,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 32:
            (void)csc_le_csc<npy_int64,npy_longdouble,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 33:
            (void)csc_le_csc<npy_int64,npy_cfloat_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csc_le_csc<npy_int64,npy_cdouble_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csc_le_csc<npy_int64,npy_clongdouble_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

static PY_LONG_LONG csc_ge_csc_thunk(int I_typenum, int T_typenum, void **a)
{
    int j = get_thunk_case(I_typenum, T_typenum);
    switch (j) {
        case 1:
            (void)csc_ge_csc<npy_int32,npy_bool_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_bool_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 2:
            (void)csc_ge_csc<npy_int32,npy_byte,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_byte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_byte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 3:
            (void)csc_ge_csc<npy_int32,npy_ubyte,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ubyte*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ubyte*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 4:
            (void)csc_ge_csc<npy_int32,npy_short,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_short*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_short*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 5:
            (void)csc_ge_csc<npy_int32,npy_ushort,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ushort*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ushort*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 6:
            (void)csc_ge_csc<npy_int32,npy_int,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_int*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_int*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 7:
            (void)csc_ge_csc<npy_int32,npy_uint,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_uint*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_uint*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 8:
            (void)csc_ge_csc<npy_int32,npy_long,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_long*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_long*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 9:
            (void)csc_ge_csc<npy_int32,npy_ulong,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 10:
            (void)csc_ge_csc<npy_int32,npy_longlong,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longlong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longlong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 11:
            (void)csc_ge_csc<npy_int32,npy_ulonglong,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_ulonglong*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_ulonglong*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 12:
            (void)csc_ge_csc<npy_int32,npy_float,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_float*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_float*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 13:
            (void)csc_ge_csc<npy_int32,npy_double,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_double*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_double*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 14:
            (void)csc_ge_csc<npy_int32,npy_longdouble,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_longdouble*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_longdouble*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 15:
            (void)csc_ge_csc<npy_int32,npy_cfloat_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 16:
            (void)csc_ge_csc<npy_int32,npy_cdouble_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 17:
            (void)csc_ge_csc<npy_int32,npy_clongdouble_wrapper,npy_bool_wrapper>(*(const npy_int32*)a[0], *(const npy_int32*)a[1], (const npy_int32*)a[2], (const npy_int32*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int32*)a[5], (const npy_int32*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int32*)a[8], (npy_int32*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 19:
            (void)csc_ge_csc<npy_int64,npy_bool_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_bool_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_bool_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 20:
            (void)csc_ge_csc<npy_int64,npy_byte,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_byte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_byte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 21:
            (void)csc_ge_csc<npy_int64,npy_ubyte,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ubyte*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ubyte*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 22:
            (void)csc_ge_csc<npy_int64,npy_short,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_short*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_short*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 23:
            (void)csc_ge_csc<npy_int64,npy_ushort,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ushort*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ushort*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 24:
            (void)csc_ge_csc<npy_int64,npy_int,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_int*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_int*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 25:
            (void)csc_ge_csc<npy_int64,npy_uint,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_uint*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_uint*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 26:
            (void)csc_ge_csc<npy_int64,npy_long,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_long*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_long*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 27:
            (void)csc_ge_csc<npy_int64,npy_ulong,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 28:
            (void)csc_ge_csc<npy_int64,npy_longlong,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longlong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longlong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 29:
            (void)csc_ge_csc<npy_int64,npy_ulonglong,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_ulonglong*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_ulonglong*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 30:
            (void)csc_ge_csc<npy_int64,npy_float,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_float*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_float*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 31:
            (void)csc_ge_csc<npy_int64,npy_double,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_double*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_double*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 32:
            (void)csc_ge_csc<npy_int64,npy_longdouble,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_longdouble*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_longdouble*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 33:
            (void)csc_ge_csc<npy_int64,npy_cfloat_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cfloat_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cfloat_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 34:
            (void)csc_ge_csc<npy_int64,npy_cdouble_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_cdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_cdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
        case 35:
            (void)csc_ge_csc<npy_int64,npy_clongdouble_wrapper,npy_bool_wrapper>(*(const npy_int64*)a[0], *(const npy_int64*)a[1], (const npy_int64*)a[2], (const npy_int64*)a[3], (const npy_clongdouble_wrapper*)a[4], (const npy_int64*)a[5], (const npy_int64*)a[6], (const npy_clongdouble_wrapper*)a[7], (npy_int64*)a[8], (npy_int64*)a[9], (npy_bool_wrapper*)a[10]);
            return 0;
    default:
        throw std::runtime_error("internal error: invalid argument typenums");
    }
}

NPY_VISIBILITY_HIDDEN PyObject *
csc_diagonal_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiiIIT*T", csc_diagonal_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csc_tocsr_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIIT*I*I*T", csc_tocsr_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csc_matmat_pass1_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIIII*I", csc_matmat_pass1_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csc_matmat_pass2_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*T", csc_matmat_pass2_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csc_matvec_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITT*T", csc_matvec_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csc_matvecs_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiiIITT*T", csc_matvecs_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csc_elmul_csc_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*T", csc_elmul_csc_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csc_eldiv_csc_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*T", csc_eldiv_csc_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csc_plus_csc_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*T", csc_plus_csc_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csc_minus_csc_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*T", csc_minus_csc_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csc_maximum_csc_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*T", csc_maximum_csc_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csc_minimum_csc_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*T", csc_minimum_csc_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csc_ne_csc_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*B", csc_ne_csc_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csc_lt_csc_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*B", csc_lt_csc_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csc_gt_csc_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*B", csc_gt_csc_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csc_le_csc_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*B", csc_le_csc_thunk, args);
}

NPY_VISIBILITY_HIDDEN PyObject *
csc_ge_csc_method(PyObject *self, PyObject *args)
{
    return call_thunk('v', "iiIITIIT*I*I*B", csc_ge_csc_thunk, args);
}
