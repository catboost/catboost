# Generated by devtools/yamaker from nixpkgs 21.11.

LIBRARY()



VERSION(13.0.1)

ORIGINAL_SOURCE(https://github.com/llvm/llvm-project/archive/llvmorg-13.0.1.tar.gz)

LICENSE(
    Apache-2.0 AND
    Apache-2.0 WITH LLVM-exception AND
    Intel-LLVM-SGA AND
    MIT AND
    NCSA
)

LICENSE_TEXTS(.yandex_meta/licenses.list.txt)

ADDINCL(
    GLOBAL contrib/libs/cxxsupp/openmp
)

NO_COMPILER_WARNINGS()

NO_UTIL()

NO_LTO()

CFLAGS(
    -fno-exceptions
    -DKMP_USE_MONITOR=1
)

IF (SANITIZER_TYPE == thread)
    NO_SANITIZE()
    CFLAGS(
        -fPIC
    )
ENDIF()

IF (SANITIZER_TYPE == memory)
    NO_SANITIZE()
    CFLAGS(
        -fPIC
    )
ENDIF()

# The KMP_DEBUG define enables OpenMP debugging support, including tracing (controlled by environment variables)
# and debug asserts. The upstream version unconditionally enables KMP_DEBUG for Debug/RelWithDebInfo builds.
# Instead, we make this opt-in via a `ymake` variable to avoid accidentally releasing a relwithdebinfo binary
# with KMP_DEBUG enabled. Note that the `ymake` variable is called OPENMP_DEBUG for clarity, since no one
# really knows what KMP is.
IF (OPENMP_DEBUG)
    CFLAGS(
        -DKMP_DEBUG=1
    )
ENDIF()

SRCS(
    kmp_affinity.cpp
    kmp_alloc.cpp
    kmp_atomic.cpp
    kmp_barrier.cpp
    kmp_cancel.cpp
    kmp_csupport.cpp
    kmp_debug.cpp
    kmp_dispatch.cpp
    kmp_environment.cpp
    kmp_error.cpp
    kmp_ftn_cdecl.cpp
    kmp_ftn_extra.cpp
    kmp_global.cpp
    kmp_gsupport.cpp
    kmp_i18n.cpp
    kmp_io.cpp
    kmp_itt.cpp
    kmp_lock.cpp
    kmp_runtime.cpp
    kmp_sched.cpp
    kmp_settings.cpp
    kmp_str.cpp
    kmp_taskdeps.cpp
    kmp_tasking.cpp
    kmp_threadprivate.cpp
    kmp_utility.cpp
    kmp_version.cpp
    kmp_wait_release.cpp
    ompt-general.cpp
    z_Linux_asm.S
    z_Linux_util.cpp
)

END()
