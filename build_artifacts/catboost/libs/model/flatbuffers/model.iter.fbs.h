// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MODEL_NCATBOOSTFBS_ITER_H_
#define FLATBUFFERS_GENERATED_MODEL_NCATBOOSTFBS_ITER_H_

#include "model.fbs.h"
#include "contrib/libs/flatbuffers/include/flatbuffers/flatbuffers_iter.h"

#include "catboost/libs/model/flatbuffers/features.iter.fbs.h"
#include "catboost/libs/model/flatbuffers/ctr_data.iter.fbs.h"
#include "catboost/libs/helpers/flatbuffers/guid.iter.fbs.h"

namespace NCatBoostFbs {
namespace iter {

template <typename Iter>
struct TKeyValue;

template <typename Iter>
struct TModelTrees;

template <typename Iter>
struct TModelCore;

template <typename Iter>
struct TKeyValue FLATBUFFERS_FINAL_CLASS : private yandex::maps::flatbuffers_iter::Table<Iter> {
  enum {
    VT_KEY = 4,
    VT_VALUE = 6
  };

  using yandex::maps::flatbuffers_iter::Table<Iter>::Table;
  std::optional<yandex::maps::flatbuffers_iter::String<Iter>> Key() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::String<Iter>>(VT_KEY);
  }
  bool KeyCompareLessThan(const std::optional<TKeyValue<Iter>>& o) const {
    return Key() < o->Key();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(Key()->str().c_str(), val);
  }
  std::optional<yandex::maps::flatbuffers_iter::String<Iter>> Value() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::String<Iter>>(VT_VALUE);
  }
  bool Verify(yandex::maps::flatbuffers_iter::Verifier<Iter> &verifier) const {
    return this->VerifyTableStart(verifier) &&
           this->template VerifyOffsetRequired<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_KEY) &&
           verifier.Verify(Key()) &&
           this->template VerifyOffsetRequired<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_VALUE) &&
           verifier.Verify(Value()) &&
           verifier.EndTable();
  }
};

template <typename Iter>
struct TModelTrees FLATBUFFERS_FINAL_CLASS : private yandex::maps::flatbuffers_iter::Table<Iter> {
  enum {
    VT_APPROXDIMENSION = 4,
    VT_TREESPLITS = 6,
    VT_TREESIZES = 8,
    VT_TREESTARTOFFSETS = 10,
    VT_CATFEATURES = 12,
    VT_FLOATFEATURES = 14,
    VT_ONEHOTFEATURES = 16,
    VT_CTRFEATURES = 18,
    VT_LEAFVALUES = 20,
    VT_LEAFWEIGHTS = 22,
    VT_NONSYMMETRICSTEPNODES = 24,
    VT_NONSYMMETRICNODEIDTOLEAFID = 26,
    VT_TEXTFEATURES = 28,
    VT_ESTIMATEDFEATURES = 30,
    VT_SCALE = 32,
    VT_BIAS = 34,
    VT_MULTIBIAS = 36,
    VT_REPACKEDBINS = 38,
    VT_EMBEDDINGFEATURES = 40
  };

  using yandex::maps::flatbuffers_iter::Table<Iter>::Table;
  int32_t ApproxDimension() const {
    return this->template GetField<int32_t>(VT_APPROXDIMENSION, 0);
  }
  std::optional<yandex::maps::flatbuffers_iter::Vector<int32_t, Iter>> TreeSplits() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::Vector<int32_t, Iter>>(VT_TREESPLITS);
  }
  std::optional<yandex::maps::flatbuffers_iter::Vector<int32_t, Iter>> TreeSizes() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::Vector<int32_t, Iter>>(VT_TREESIZES);
  }
  std::optional<yandex::maps::flatbuffers_iter::Vector<int32_t, Iter>> TreeStartOffsets() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::Vector<int32_t, Iter>>(VT_TREESTARTOFFSETS);
  }
  std::optional<yandex::maps::flatbuffers_iter::Vector<yandex::maps::flatbuffers_iter::Offset<TCatFeature<Iter>>, Iter>> CatFeatures() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::Vector<yandex::maps::flatbuffers_iter::Offset<TCatFeature<Iter>>, Iter>>(VT_CATFEATURES);
  }
  std::optional<yandex::maps::flatbuffers_iter::Vector<yandex::maps::flatbuffers_iter::Offset<TFloatFeature<Iter>>, Iter>> FloatFeatures() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::Vector<yandex::maps::flatbuffers_iter::Offset<TFloatFeature<Iter>>, Iter>>(VT_FLOATFEATURES);
  }
  std::optional<yandex::maps::flatbuffers_iter::Vector<yandex::maps::flatbuffers_iter::Offset<TOneHotFeature<Iter>>, Iter>> OneHotFeatures() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::Vector<yandex::maps::flatbuffers_iter::Offset<TOneHotFeature<Iter>>, Iter>>(VT_ONEHOTFEATURES);
  }
  std::optional<yandex::maps::flatbuffers_iter::Vector<yandex::maps::flatbuffers_iter::Offset<TCtrFeature<Iter>>, Iter>> CtrFeatures() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::Vector<yandex::maps::flatbuffers_iter::Offset<TCtrFeature<Iter>>, Iter>>(VT_CTRFEATURES);
  }
  std::optional<yandex::maps::flatbuffers_iter::Vector<double, Iter>> LeafValues() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::Vector<double, Iter>>(VT_LEAFVALUES);
  }
  std::optional<yandex::maps::flatbuffers_iter::Vector<double, Iter>> LeafWeights() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::Vector<double, Iter>>(VT_LEAFWEIGHTS);
  }
  std::optional<yandex::maps::flatbuffers_iter::Vector<TNonSymmetricTreeStepNode, Iter>> NonSymmetricStepNodes() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::Vector<TNonSymmetricTreeStepNode, Iter>>(VT_NONSYMMETRICSTEPNODES);
  }
  std::optional<yandex::maps::flatbuffers_iter::Vector<uint32_t, Iter>> NonSymmetricNodeIdToLeafId() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::Vector<uint32_t, Iter>>(VT_NONSYMMETRICNODEIDTOLEAFID);
  }
  std::optional<yandex::maps::flatbuffers_iter::Vector<yandex::maps::flatbuffers_iter::Offset<TTextFeature<Iter>>, Iter>> TextFeatures() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::Vector<yandex::maps::flatbuffers_iter::Offset<TTextFeature<Iter>>, Iter>>(VT_TEXTFEATURES);
  }
  std::optional<yandex::maps::flatbuffers_iter::Vector<yandex::maps::flatbuffers_iter::Offset<TEstimatedFeature<Iter>>, Iter>> EstimatedFeatures() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::Vector<yandex::maps::flatbuffers_iter::Offset<TEstimatedFeature<Iter>>, Iter>>(VT_ESTIMATEDFEATURES);
  }
  double Scale() const {
    return this->template GetField<double>(VT_SCALE, 1.0);
  }
  double Bias() const {
    return this->template GetField<double>(VT_BIAS, 0.0);
  }
  std::optional<yandex::maps::flatbuffers_iter::Vector<double, Iter>> MultiBias() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::Vector<double, Iter>>(VT_MULTIBIAS);
  }
  std::optional<yandex::maps::flatbuffers_iter::Vector<TRepackedBin, Iter>> RepackedBins() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::Vector<TRepackedBin, Iter>>(VT_REPACKEDBINS);
  }
  std::optional<yandex::maps::flatbuffers_iter::Vector<yandex::maps::flatbuffers_iter::Offset<TEmbeddingFeature<Iter>>, Iter>> EmbeddingFeatures() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::Vector<yandex::maps::flatbuffers_iter::Offset<TEmbeddingFeature<Iter>>, Iter>>(VT_EMBEDDINGFEATURES);
  }
  bool Verify(yandex::maps::flatbuffers_iter::Verifier<Iter> &verifier) const {
    return this->VerifyTableStart(verifier) &&
           this->template VerifyField<int32_t>(verifier, VT_APPROXDIMENSION, 4) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_TREESPLITS) &&
           verifier.Verify(TreeSplits()) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_TREESIZES) &&
           verifier.Verify(TreeSizes()) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_TREESTARTOFFSETS) &&
           verifier.Verify(TreeStartOffsets()) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_CATFEATURES) &&
           verifier.Verify(CatFeatures()) &&
           verifier.VerifyVectorOfTables(CatFeatures()) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_FLOATFEATURES) &&
           verifier.Verify(FloatFeatures()) &&
           verifier.VerifyVectorOfTables(FloatFeatures()) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_ONEHOTFEATURES) &&
           verifier.Verify(OneHotFeatures()) &&
           verifier.VerifyVectorOfTables(OneHotFeatures()) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_CTRFEATURES) &&
           verifier.Verify(CtrFeatures()) &&
           verifier.VerifyVectorOfTables(CtrFeatures()) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_LEAFVALUES) &&
           verifier.Verify(LeafValues()) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_LEAFWEIGHTS) &&
           verifier.Verify(LeafWeights()) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_NONSYMMETRICSTEPNODES) &&
           verifier.Verify(NonSymmetricStepNodes()) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_NONSYMMETRICNODEIDTOLEAFID) &&
           verifier.Verify(NonSymmetricNodeIdToLeafId()) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_TEXTFEATURES) &&
           verifier.Verify(TextFeatures()) &&
           verifier.VerifyVectorOfTables(TextFeatures()) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_ESTIMATEDFEATURES) &&
           verifier.Verify(EstimatedFeatures()) &&
           verifier.VerifyVectorOfTables(EstimatedFeatures()) &&
           this->template VerifyField<double>(verifier, VT_SCALE, 8) &&
           this->template VerifyField<double>(verifier, VT_BIAS, 8) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_MULTIBIAS) &&
           verifier.Verify(MultiBias()) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_REPACKEDBINS) &&
           verifier.Verify(RepackedBins()) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_EMBEDDINGFEATURES) &&
           verifier.Verify(EmbeddingFeatures()) &&
           verifier.VerifyVectorOfTables(EmbeddingFeatures()) &&
           verifier.EndTable();
  }
};

template <typename Iter>
struct TModelCore FLATBUFFERS_FINAL_CLASS : private yandex::maps::flatbuffers_iter::Table<Iter> {
  enum {
    VT_FORMATVERSION = 4,
    VT_MODELTREES = 6,
    VT_INFOMAP = 8,
    VT_MODELPARTIDS = 10
  };

  using yandex::maps::flatbuffers_iter::Table<Iter>::Table;
  std::optional<yandex::maps::flatbuffers_iter::String<Iter>> FormatVersion() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::String<Iter>>(VT_FORMATVERSION);
  }
  std::optional<TModelTrees<Iter>> ModelTrees() const {
    return this->template GetPointer<TModelTrees<Iter>>(VT_MODELTREES);
  }
  std::optional<yandex::maps::flatbuffers_iter::Vector<yandex::maps::flatbuffers_iter::Offset<TKeyValue<Iter>>, Iter>> InfoMap() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::Vector<yandex::maps::flatbuffers_iter::Offset<TKeyValue<Iter>>, Iter>>(VT_INFOMAP);
  }
  std::optional<yandex::maps::flatbuffers_iter::Vector<yandex::maps::flatbuffers_iter::Offset<yandex::maps::flatbuffers_iter::String<Iter>>, Iter>> ModelPartIds() const {
    return this->template GetPointer<yandex::maps::flatbuffers_iter::Vector<yandex::maps::flatbuffers_iter::Offset<yandex::maps::flatbuffers_iter::String<Iter>>, Iter>>(VT_MODELPARTIDS);
  }
  bool Verify(yandex::maps::flatbuffers_iter::Verifier<Iter> &verifier) const {
    return this->VerifyTableStart(verifier) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_FORMATVERSION) &&
           verifier.Verify(FormatVersion()) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_MODELTREES) &&
           verifier.VerifyTable(ModelTrees()) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_INFOMAP) &&
           verifier.Verify(InfoMap()) &&
           verifier.VerifyVectorOfTables(InfoMap()) &&
           this->template VerifyOffset<yandex::maps::flatbuffers_iter::uoffset_t>(verifier, VT_MODELPARTIDS) &&
           verifier.Verify(ModelPartIds()) &&
           verifier.VerifyVectorOfStrings(ModelPartIds()) &&
           verifier.EndTable();
  }
};

template <typename Iter>
inline std::optional<NCatBoostFbs::iter::TModelCore<Iter>> GetTModelCore(const Iter& buf) {
  return yandex::maps::flatbuffers_iter::GetRoot<NCatBoostFbs::iter::TModelCore<Iter>, Iter>(buf);
}

inline const NCatBoostFbs::TModelCore *GetTModelCore(const char *buf) {
  return NCatBoostFbs::GetTModelCore(buf);
}

template <typename Iter>
inline bool VerifyTModelCoreBuffer(
    yandex::maps::flatbuffers_iter::Verifier<Iter> &verifier) {
  return verifier.template VerifyBuffer<NCatBoostFbs::iter::TModelCore<Iter>>(nullptr);
}

inline const char *TModelCoreExtension() {
  return "bfbs";
}

}  // namespace iter
}  // namespace NCatBoostFbs

#endif  // FLATBUFFERS_GENERATED_MODEL_NCATBOOSTFBS_ITER_H_
