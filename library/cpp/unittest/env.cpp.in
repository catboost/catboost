#include <library/cpp/unittest/env.h>

#include <util/system/env.h>
#include <util/folder/path.h>
#include <util/generic/singleton.h>
#include <util/stream/output.h>

namespace {

    class TTestEnv {
    public:
        TTestEnv() {
            const TString fromEnv = GetEnv("YA_TEST_RUNNER");
            IsRunningFromTest = (fromEnv == "1");
        }

        bool IsRunningFromTest;
    };

} //anonymous namespace

TString ArcadiaSourceRoot() {
    const TString fromEnv = GetEnv("ARCADIA_SOURCE_ROOT");

    if (!fromEnv) {
        return R"__weirdrawstr(@ARCADIA_ROOT@)__weirdrawstr";
    }

    return fromEnv;
}

TString ArcadiaFromCurrentLocation(TStringBuf where, TStringBuf path) {
    return (TFsPath(ArcadiaSourceRoot()) / TFsPath(where).Parent() / path).Fix();
}

TString BuildRoot() {
    const TString fromEnv = GetEnv("ARCADIA_BUILD_ROOT");

    if (!fromEnv) {
        return R"__weirdrawstr(@ARCADIA_ROOT@)__weirdrawstr";
    }

    return fromEnv;
}

TString BinaryPath(TStringBuf path) {
    return (TFsPath(BuildRoot()) / path).Fix();
}

bool FromYaTest() {
    return Singleton<TTestEnv>()->IsRunningFromTest;
}
