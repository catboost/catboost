#include <cassert>
#include <string>
#include <vector>
#include <unordered_map>

typedef unsigned long long int TCatboostCPPExportModelCtrBaseHash;

enum class ECatboostCPPExportModelCtrType {
    Borders,
    Buckets,
    BinarizedTargetMeanValue,
    FloatTargetMeanValue,
    Counter,
    FeatureFreq,
    CtrTypesCount
};

struct TCatboostCPPExportModelCtr {
    TCatboostCPPExportModelCtrBaseHash BaseHash;
    ECatboostCPPExportModelCtrType BaseCtrType;
    int TargetBorderIdx = 0;
    float PriorNum = 0.0f;
    float PriorDenom = 1.0f;
    float Shift = 0.0f;
    float Scale = 1.0f;

    inline float Calc(float countInClass, float totalCount) const {
        float ctr = (countInClass + PriorNum) / (totalCount + PriorDenom);
        return (ctr + Shift) * Scale;
    }
};

struct TCatboostCPPExportFloatSplit {
    int FloatFeature = 0;
    float Split = 0.f;
};

struct TCatboostCPPExportOneHotSplit {
    int CatFeatureIdx = 0;
    int Value = 0;
};

struct TCatboostCPPExportBinFeatureIndexValue {
    unsigned int BinIndex = 0;
    bool CheckValueEqual = 0;
    unsigned char Value = 0;
};

struct TCatboostCPPExportCtrMeanHistory {
    float Sum;
    int Count;
};

struct TCatboostCPPExportCtrValueTable {
    std::unordered_map<TCatboostCPPExportModelCtrBaseHash, unsigned int> IndexHashViewer;
    int TargetClassesCount;
    int CounterDenominator;
    std::vector<TCatboostCPPExportCtrMeanHistory> CtrMeanHistory;
    std::vector<int> CtrTotal;
    const unsigned int* ResolveHashIndex(TCatboostCPPExportModelCtrBaseHash hash) const {
        auto search = IndexHashViewer.find(hash);
        if (search == IndexHashViewer.end()) {
            return NULL;
        }
        return &search->second;
    }
};

struct TCatboostCPPExportCtrData {
    std::unordered_map<TCatboostCPPExportModelCtrBaseHash, TCatboostCPPExportCtrValueTable> LearnCtrs;
};

struct TCatboostCPPExportCompressedModelCtr {
    struct TCatboostCPPExportProjection {
        std::vector<int> transposedCatFeatureIndexes;
        std::vector<TCatboostCPPExportBinFeatureIndexValue> binarizedIndexes;
    } Projection;
    std::vector<TCatboostCPPExportModelCtr> ModelCtrs;
};

struct TCatboostCPPExportModelCtrs {
    unsigned int UsedModelCtrsCount;
    std::vector<TCatboostCPPExportCompressedModelCtr> CompressedModelCtrs;
    TCatboostCPPExportCtrData CtrData;
};

/* Model data */
static const struct CatboostModel {
    CatboostModel() {};
    unsigned int FloatFeatureCount = 6;
    unsigned int CatFeatureCount = 11;
    unsigned int BinaryFeatureCount = 35;
    unsigned int TreeCount = 20;
    std::vector<std::vector<float>> FloatFeatureBorders = {
        {30.5, 36.5, 41.5, 45.5, 53.5, 61.5},
        {51773, 203488.5, 204331, 215992, 218145.5, 313025.5, 325462},
        {10.5, 13.5},
        {3280},
        {808.5, 1738},
        {42, 46.5}
    };
    std::vector<unsigned int> TreeDepth = {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6};
    std::vector<unsigned int> TreeSplits = {56, 58, 37, 43, 67, 65, 29, 47, 84, 39, 92, 35, 25, 2, 62, 86, 57, 87, 15, 78, 22, 88, 76, 27, 19, 50, 71, 68, 81, 79, 82, 48, 5, 85, 63, 20, 1, 4, 57, 38, 60, 32, 74, 87, 24, 15, 36, 53, 19, 83, 20, 90, 8, 12, 54, 13, 59, 47, 31, 85, 26, 17, 69, 89, 7, 61, 15, 14, 21, 43, 55, 9, 15, 51, 23, 76, 34, 44, 29, 3, 80, 38, 64, 78, 19, 52, 15, 31, 11, 42, 70, 33, 41, 91, 6, 18, 6, 45, 49, 30, 0, 72, 92, 84, 40, 50, 0, 28, 73, 66, 39, 77, 75, 13, 45, 46, 10, 16, 38, 75};
    std::vector<unsigned char> TreeSplitIdxs = {6, 1, 1, 3, 2, 3, 1, 3, 1, 1, 1, 4, 2, 3, 3, 1, 1, 1, 1, 2, 2, 1, 4, 1, 2, 3, 2, 1, 1, 1, 1, 1, 6, 2, 1, 255, 2, 5, 1, 2, 1, 1, 2, 1, 1, 1, 5, 3, 2, 2, 255, 3, 3, 7, 4, 1, 2, 3, 3, 2, 3, 2, 2, 2, 2, 2, 1, 2, 1, 3, 5, 4, 1, 1, 3, 4, 3, 4, 1, 4, 2, 2, 2, 2, 2, 2, 1, 3, 6, 2, 1, 2, 1, 4, 1, 1, 1, 1, 2, 2, 1, 3, 1, 1, 2, 3, 1, 2, 1, 1, 1, 1, 3, 1, 1, 2, 5, 1, 2, 3};
    std::vector<unsigned short> TreeSplitFeatureIndex = {17, 19, 12, 14, 22, 21, 10, 15, 30, 13, 34, 11, 8, 0, 20, 31, 18, 32, 3, 26, 7, 33, 25, 9, 5, 16, 24, 23, 28, 27, 29, 16, 0, 30, 21, 6, 0, 0, 18, 12, 20, 11, 25, 32, 8, 3, 11, 17, 5, 29, 6, 33, 1, 1, 17, 2, 19, 15, 10, 30, 8, 4, 23, 33, 1, 20, 3, 2, 7, 14, 17, 1, 3, 17, 7, 25, 11, 14, 10, 0, 27, 12, 21, 26, 5, 17, 3, 10, 1, 14, 24, 11, 14, 33, 1, 5, 1, 15, 16, 10, 0, 24, 34, 30, 13, 16, 0, 9, 25, 22, 13, 26, 25, 2, 15, 15, 1, 4, 12, 25};
    std::vector<unsigned char> TreeSplitXorMask = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    std::vector<unsigned int> CatFeaturesIndex = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::vector<unsigned int> OneHotCatFeatureIndex = {9};
    std::vector<std::vector<int>> OneHotHashValues = {
        {-1291328762}
    };
    std::vector<std::vector<float>> CtrFeatureBorders = {
        {0.381648958f, 0.708776593f, 0.763297915f},
        {0.203571424f, 0.255357146f, 0.514285684f},
        {0.800000012f, 0.899999976f},
        {0.0539215691f, 0.0784313753f, 0.377451003f},
        {0.0572916679f, 0.286458343f, 0.34375f, 0.515625f, 0.6875f},
        {0.471354157f, 0.78125f},
        {0.475000024f, 0.700000048f},
        {0.0147058833f, 0.142156869f, 0.191176474f, 0.235294133f},
        {0.243243247f, 0.364864886f, 0.608108103f},
        {0.385810822f, 0.428716242f, 0.600337863f},
        {0.4375f, 0.587499976f, 0.625f, 0.662500024f, 0.700000048f, 0.925000072f},
        {0.387254894f},
        {0.461538464f, 0.807692289f},
        {0.650240362f, 0.739182711f, 0.917067289f},
        {0.625f, 0.71875f, 0.84375f},
        {0.0784313753f, 0.102941178f},
        {0.0596590899f, 0.477272719f},
        {0.284801126f, 0.604403436f, 0.764204562f},
        {0.4375f, 0.578125f, 0.625f, 0.765625f},
        {0.0931372568f, 0.284313738f},
        {0.744791687f, 0.802083373f},
        {0.7578125f},
        {0.7421875f, 0.90625f},
        {0.0882352963f, 0.460784316f},
        {0.376096487f},
        {0.786458373f},
        {0.729166687f, 0.791666687f, 0.854166687f, 0.875f},
        {0.0147058833f}
    };

    /* Aggregated array of leaf values for trees. Each tree is represented by a separate line: */
    double LeafValues[1280] = {
        0, 0, 0, 0, 0, 0, 0, 0.033669363707304, 0, 0, 0, 0, 0, 0, 0.016834681853652, 0.02693549171090126, -0.1511295288801193, 0.033669363707304, -0.06045181304216385, 0, -0.0693792998790741, 0.02693549171090126, -0.06045181304216385, 0.04208670929074287, 0, 0, 0, 0, -0.0693792998790741, 0.0384792722761631, 0.0384792722761631, 0.033669363707304, 0, 0, 0, 0.016834681853652, -0.0348937064409256, 0.033669363707304, 0.02693549171090126, 0.04489248245954514, 0, 0, 0, 0, 0, 0.033669363707304, -0.09250573068857193, 0.04208670929074287, 0, 0, -0.06045181304216385, 0.016834681853652, 0.016834681853652, -0.01785496808588505, -0.0693792998790741, 0.04713710770010948, 0, 0, 0, 0, 0, 0.016834681853652, -0.007234741002321243, 0.04897361993789673,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0577550046145916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.04877154156565666, -0.07948016375303268, 0, 0.02277199365198612, 0, 0.01386075373739004, 0, 0.03019978292286396, -0.08869555592536926, -0.009727488271892071, 0, 0.03367296978831291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.03353516012430191, 0.01336509920656681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02225155383348465, -0.1050914376974106, -0.009543832391500473, 0.0226679015904665, 0.05099744349718094,
        0, 0.03375565260648727, 0, 0, 0, 0, 0, 0, 0.01247252617031336, 0.03983322158455849, 0, 0.03829634934663773, 0, 0.02589386142790318, 0, 0.02131377160549164, -0.05329132080078125, -0.02938825450837612, 0, -0.06063960865139961, 0, 0, 0, 0, 0, -0.0002754071319941431, -0.1108231171965599, -0.05072499066591263, 0, 0, -0.04518022015690804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0102910827845335, 0, 0.01076263189315796, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.04801974073052406, -0.05256475880742073, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -0.04168840125203133, 0, -0.08564745634794235, -0.03840245306491852, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02320399135351181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03614053130149841, 0, 0.02295565977692604, 0, 0, 0, 0, 0, -0.04409938305616379, -0.04864440485835075, 0.02411653660237789, 0, -0.008693858981132507, -0.1037861257791519, 0.01635757833719254, 0, -0.04423811659216881, 0, 0.0180082842707634, 0, 0, 0, 0.01349032297730446, -0.04108180105686188, 0, 0, 0.02986795268952847, 0, 0, 0,
        -0.01629900000989437, -0.04081910848617554, 0.01919465325772762, 0, 0, 0, 0, 0, 0.01316047366708517, -0.09790722280740738, 0, 0, -0.0208847988396883, -0.04974565654993057, 0.0211905725300312, 0.01932684332132339, 0, 0, 0, 0, 0, 0, 0, 0, -0.01359644718468189, 0, 0, 0, 0, -0.03305024653673172, 0.007407397497445345, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.03218816220760345, -0.03768906742334366, 0, 0, 0.01096769608557224, 0, 0.02199777401983738, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01972085610032082, 0, 0, 0, 0, 0, 0, 0, 0.006234512664377689, 0.01973415911197662, 0, 0, 0, 0.01692375540733337, 0, 0, 0.007563204038888216, -0.008972641080617905, 0, 0, 0, 0, 0, 0, 0, 0.01570132188498974, 0, 0, 0, 0, 0, 0, -0.05933639779686928, -0.05748306959867477, 0, 0, 0.0027346087154001, -0.04135967791080475, 0, -0.04129353538155556, 0.004837495740503073, 0.02774556912481785, 0, 0, 0, 0, 0.03186550363898277, -0.03766434267163277, 0.0110238790512085, -0.01124204695224762, 0, 0, 0, -0.04239713400602341,
        0.01301511470228434, 0.01174051873385906, 0, 0.01241007447242737, -0.03810210525989532, -0.04569349065423012, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01848349720239639, 0.006791164632886648, 0, 0.00893488060683012, 0, -0.03475339710712433, 0, -0.02962705120444298, 0, 0, 0, 0, 0, 0, 0, 0, 0.00845310278236866, 0.006553315091878176, 0, 0.01101111993193626, -0.02978278324007988, -0.08140222728252411, 0, 0, 0.01362925954163074, 0.006155421491712332, 0, 0.008427941240370274, -0.01472759712487459, -0.0124355498701334, 0, -0.05321652442216873, 0.008457762189209461, 0.00193322473205626, 0, 0, 0.03905762732028961, 0.02567171677947044, 0, 0, 0.01044734194874763, 0.003321056254208088, 0, 0.0175080131739378, 0.04430064186453819, -0.03831919655203819, 0, -0.01296517997980118,
        0, 0, 0, -0.02761605754494667, -0.03136195614933968, -0.0006727610598318279, 0, 0, 0, 0, 0, 0, 0, -0.02541542798280716, 0, 0, -0.02424460276961327, -0.03447531163692474, 0, 0, 0.02556061185896397, 0.02504620142281055, 0, -0.04151217266917229, -0.02599666267633438, 0, 0, 0, -0.08693518489599228, 0, 0, 0, 0, 0.00604683393612504, 0, 0, 0, 0.006881631445139647, 0, 0.006266298703849316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01049636490643024, 0, 0.006568470504134893, 0, 0, 0, 0, 0, 0, 0, 0,
        0.005940327420830727, 0.01086491625756025, 0.01369150076061487, 0, 0.009331641718745232, -0.08073899149894714, 0.02610990591347218, 0, 0.004567496012896299, 0, -0.04972326755523682, 0, -0.03146937116980553, 0, 0.001951761776581407, 0, 0.005401988513767719, 0, 0.002432671375572681, 0, -0.009624696336686611, -0.04276704415678978, 0.01795482821762562, 0, 0, 0, 0, 0, 0.01384820602834225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.005813772324472666, 0, 0.01165803708136082, 0, 0.02348422631621361, 0.03005198575556278, -0.001717404811643064, 0, 0.002100949408486485, 0, 0, 0, 0.01030127704143524, 0, -0.03273347020149231, 0,
        0, 0.005651699844747782, -0.03020361438393593, 0, 0, 0.01239325106143951, 0, 0, 0, 0.002683714497834444, 0, 0.003180490108206868, 0, 0, 0, 0, 0.03457864373922348, 0.004214489832520485, 0, 0.008901136927306652, 0, 0, 0.01075702998787165, 0, 0, 0.002556880004703999, 0, 0.001319951843470335, 0, -0.002540822839364409, 0, 0.002426222199574113, -0.01313205529004335, 0, -0.04042666032910347, -0.04588032886385918, -0.05636816099286079, 0, -0.01774743758141994, 0, 0, 0.009029787965118885, 0, 0.004547757562249899, 0, 0, 0, 0, 0.01369458250701427, 0.0178395751863718, -0.05874203518033028, 0.01063765306025743, 0.02062499709427357, 0.0145360566675663, 0, 0, 0, 0.004398216027766466, 0, 0.008685316890478134, 0, 0.004753838758915663, 0, -0.0009663613163866103,
        0, 0.03448477759957314, 0, -0.03348619118332863, -0.01024429220706224, -0.00175637227948755, 0, 0, -0.04233440011739731, -0.02449724636971951, 0, 0, 0, 0.006824393291026354, 0, 0, 0, -0.0101358825340867, 0.02519534528255463, 0, -0.01374357845634222, 0.006067187059670687, 0, 0, -0.01579432934522629, 0, 0, 0, -0.01549640670418739, -0.02542661130428314, 0, 0, -0.04518778249621391, 0.01807151176035404, 0, 0, 0, 0.00875526200979948, -0.02791344374418259, 0.001454125507734716, 0, 0, 0, 0, 0, -0.008770696818828583, 0, 0, -0.01637580059468746, 0.04553877934813499, 0, 0, 0.002752505475655198, 0.0007728486089035869, 0, 0, 0, 0.01171952113509178, 0, 0, -0.02143938653171062, -0.004841249901801348, 0, 0,
        0, -0.01511017326265574, -0.01915855892002583, -0.02025618776679039, 0.0355445072054863, -0.03678459301590919, -0.02831013314425945, 0, -0.04487797617912292, 0, 0, 0, 0.0001754620898282155, -0.05201587080955505, 0, 0, 0.001704334863461554, 0, -0.02680149674415588, 0, 0.009773654863238335, 0, 0.01330144982784986, 0, 0, 0, 0, 0, 0.009504021145403385, 0, 0, 0, -0.03714480623602867, 0, 0.004315029829740524, 0, 0.02868071757256985, 0, -0.04117349162697792, 0, -0.01954983919858932, 0, 0, 0, 0.03989238291978836, 0, 0, 0, 0.009347058832645416, 0, 0, 0, 0.002825660863891244, 0, 0, 0, 0.003669736906886101, 0, 0, 0, -0.0004968789289705455, 0, 0, 0,
        0.0135467229411006, 0, -0.02902790904045105, 0, 0, 0, -0.03418591991066933, 0, 0, 0, -0.007761238142848015, -0.01869065873324871, 0, 0, 0.01144045311957598, 0, 0, 0, 0.02846180461347103, -0.0322800949215889, 0.01874832808971405, 0, 0.006250526756048203, -0.03223586827516556, 0, 0, 0.005816191434860229, 0, 0, 0, 0.003220445942133665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.006874802522361279, 0, -0.02687289752066135, 0, -0.03226124122738838, 0, 0.001105896197259426, 0, 0.02287372387945652, -0.0305718332529068, 0, 0, 0.005742633249610662, 0, 0, 0, 0.0006366601446643472, 0,
        0, 0.008647591806948185, -0.01724612154066563, 0.01024190802127123, 0, 0, 0, 0, 0.001973601756617427, 0.004832294769585133, 0, 0.003101517912000418, 0, 0, 0, 0, 0, 0.008938128128647804, 0, -0.01216050609946251, 0, -0.001310375519096851, 0, 0, 0.001812328235246241, 0.004777280613780022, -0.01979429088532925, -0.002059125574305654, 0.001028080936521292, -0.003362744813784957, 0.009553873911499977, 0.003333351342007518, 0, -0.0319923423230648, 0, -0.02409845776855946, 0, 0, 0, 0, 0, -0.01615875586867332, -0.01554554235190153, -0.01804245263338089, 0, 0, 0, 0, 0, 0.002887882059440017, -0.02539694122970104, 0.04113928973674774, 0, 0, 0, 0, 0, -0.007844745181500912, -0.02899482287466526, 0.006396959535777569, 0, 0, 0, 0,
        0, -0.02235568314790726, -0.003651841077953577, -0.0127053139731288, -0.0159132294356823, 0, 0, 0, 0.026785833761096, -0.01378352008759975, 0.002200686372816563, -0.008739947341382504, 0, 0, 0, 0, -0.005087898578494787, 0, 0, 0, 0, 0, 0, 0, -0.004800868220627308, 0, 0.01538906618952751, 0, 0, 0, 0, 0, -0.03265562653541565, 0, 0.002153047127649188, 0.0007496283506043255, -0.02440733835101128, -0.009206637740135193, 0, 0, 0.02915252186357975, -0.06552240252494812, 0.0008052740013226867, 0.01330252923071384, -0.03975262865424156, 0, 0, 0, -0.01434408128261566, 0.02576769143342972, 0.0003591485728975385, 0, 0, 0, 0, 0, 0, 0, 0.0001600447139935568, -0.002168923150748014, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, -0.0031361966393888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001418561558239162, 0.01467277016490698, 0.0002222523035015911, 0, 0, 0, 0, -0.02465474791824818, -0.0222599059343338, 0, -0.001358320354484022, 0, 0, 0, 0, 0, 0, 0, -0.03241360560059547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01908132806420326, 0, 0, 0.01488661952316761, -0.01824483089148998, 0, -0.005656696390360594, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0227492693811655, 0, 0.01966493204236031, 0, 0.003816674696281552, 0, 0.01239294279366732, 0, 0.004503428936004639, 0, -0.01699763536453247, 0, 0, 0, -0.02017835155129433, 0, 0.01373608503490686, 0, 0.01225011795759201, 0, -0.01950728334486485, -0.02990847080945969, -0.01061836071312428, 0, 0, 0, 0, 0, 0, 0, 0.00228890567086637, 0, 0, 0, 0, 0, 0.0041332240216434, -0.002893813885748386, 3.870053478749469e-05, 0, 0, 0, 0, 0, 0.00334079097956419, 0, 0.006538237910717726, 0, 0, 0, 0, 0, 0.005480803083628416, 0, 0.003533769166097045,
        0, 0, 0, 0.005536861252039671, -0.02099105715751648, 0, 0.003463161643594503, 0.008653069846332073, 0, -0.001051031285896897, 0, 0, 0, 0.000337146659148857, 0, -0.001214667456224561, 0, 0, 0, -0.01929502747952938, 0, 0, -0.01202276162803173, -0.01122379116714001, 0, 0.001703814370557666, 0, 0.01412041764706373, 0, 0.002900286111980677, 0, -0.003074257401749492, 0, 0, 0, 0, 0, 0, 0, 0.01488324254751205, 0, 0, 0, 0, 0, -7.402861228911206e-05, 0.0007103061652742326, 0.004758690018206835, 0, 0, 0, -0.01696252077817917, 0, 0, 0, -0.003151869168505073, 0, 0, 0, 0.003385152900591493, 0, 0, 0, 0.01297722291201353,
        0, 0, 0, 0, 0, 0, 0, -0.0006666075787506998, 0, 0, 0, 0, 0, -0.01313591189682484, 0.0129180708900094, 0.00213901000097394, 0, 0, 0, 0, 0, 0, 0, -0.01333083584904671, 0, 0, 0, 0, 0, 0.009243743494153023, 0, 0.004455612041056156, 0, 0, 0, 0, 0, 0, 0, 0.01135016605257988, 0, 0, 0, -0.01277950033545494, 0, -0.00149327190592885, 0, -0.01590118370950222, 0, 0, 0, -0.007039176765829325, 0, 0, 0, -0.02127091027796268, 0, 0, 0, 0.01237431075423956, 0, 0.0009795523947104812, 0, -0.009065039455890656,
        0, 0.01494731195271015, 0, 0.01596091501414776, -0.005866913590580225, 0, 0, -0.008580899797379971, 0, 0, 0, -0.003313548862934113, 0.01761755160987377, 0, 0, 0, 0, 0.01047295238822699, 0, -0.02052800729870796, 0, 0, 0, 0.0146830128505826, 0, 0, 0, 0, 0, 0, 0, -0.00299746310338378, -0.01949943043291569, 0, 0, 0.003583392826840281, 0.01010155212134123, 0, 0, -0.005628025624901056, 0, 0, 0, 0, 0, 0, 0, -0.000450878927949816, 0.004829027689993382, 0, 0, 0.001367998658679426, 0, 0, 0, 0.002273765858262777, 0, 0, 0, -0.009634149260818958, 0, 0, 0, 0
    };
    double Scale = 1;
    double Bias = 0.7821782231;
    struct TCatboostCPPExportModelCtrs modelCtrs = {
        .UsedModelCtrsCount = 28,
        .CompressedModelCtrs = {
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {3},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471478ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471478ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471478ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 8405694746487331134ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {4},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471473ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471473ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471473ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 8405694746487331129ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {5},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471472ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471472ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471472ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 8405694746487331128ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {6},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471475ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471475ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471475ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 8405694746487331131ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {7},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471474ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471474ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471474ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 8405694746487331130ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {8},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471469ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471469ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471469ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 8405694746487331109ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {10},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471471ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471471ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471471ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 8405694746487331111ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            }
        },
        .CtrData = {
            .LearnCtrs = {
                {
                    768791580653471469ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {8473802870189803490ull, 0}, {7071392469244395075ull, 2}, {18446744073709551615ull, 0}, {8806438445905145973ull, 3}, {619730330622847022ull, 1}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 2.94273e-44, .Count = 61}, {.Sum = 0, .Count = 12}, {.Sum = 1.4013e-45, .Count = 5}, {.Sum = 0, .Count = 1}},
                        .CtrTotal = {21, 61, 0, 12, 1, 5, 0, 1}
                    }
                },
                {
                    768791580653471471ull,
                    {
                        .IndexHashViewer = {{2136296385601851904ull, 0}, {7428730412605434673ull, 2}, {9959754109938180626ull, 6}, {14256903225472974739ull, 1}, {8056048104805248435ull, 3}, {18446744073709551615ull, 0}, {12130603730978457510ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {10789443546307262781ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 2.8026e-44, .Count = 73}, {.Sum = 0, .Count = 1}, {.Sum = 0, .Count = 2}, {.Sum = 0, .Count = 2}, {.Sum = 0, .Count = 1}, {.Sum = 1.4013e-45, .Count = 0}, {.Sum = 1.4013e-45, .Count = 0}},
                        .CtrTotal = {20, 73, 0, 1, 0, 2, 0, 2, 0, 1, 1, 0, 1, 0}
                    }
                },
                {
                    768791580653471472ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {13987540656699198946ull, 3}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18089724839685297862ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {10353740403438739754ull, 1}, {3922001124998993866ull, 2}, {13686716744772876732ull, 4}, {18293943161539901837ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 0, .Count = 13}, {.Sum = 3.08286e-44, .Count = 20}, {.Sum = 0, .Count = 37}, {.Sum = 0, .Count = 2}, {.Sum = 0, .Count = 4}, {.Sum = 0, .Count = 3}},
                        .CtrTotal = {0, 13, 22, 20, 0, 37, 0, 2, 0, 4, 0, 3}
                    }
                },
                {
                    768791580653471473ull,
                    {
                        .IndexHashViewer = {{7537614347373541888ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {5903587924673389870ull, 2}, {18278593470046426063ull, 6}, {10490918088663114479ull, 3}, {18446744073709551615ull, 0}, {407784798908322194ull, 7}, {5726141494028968211ull, 1}, {1663272627194921140ull, 10}, {8118089682304925684ull, 8}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {15431483020081801594ull, 9}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {1403990565605003389ull, 5}, {3699047549849816830ull, 11}, {14914630290137473119ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 9.80909e-45, .Count = 3}, {.Sum = 1.4013e-45, .Count = 3}, {.Sum = 5.60519e-45, .Count = 24}, {.Sum = 0, .Count = 3}, {.Sum = 5.60519e-45, .Count = 16}, {.Sum = 4.2039e-45, .Count = 16}, {.Sum = 0, .Count = 4}, {.Sum = 0, .Count = 5}, {.Sum = 1.4013e-45, .Count = 1}, {.Sum = 0, .Count = 1}, {.Sum = 0, .Count = 3}, {.Sum = 2.8026e-45, .Count = 0}},
                        .CtrTotal = {7, 3, 1, 3, 4, 24, 0, 3, 4, 16, 3, 16, 0, 4, 0, 5, 1, 1, 0, 1, 0, 3, 2, 0}
                    }
                },
                {
                    768791580653471474ull,
                    {
                        .IndexHashViewer = {{3607388709394294015ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18356215166324018775ull, 2}, {18365206492781874408ull, 1}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {14559146096844143499ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {11416626865500250542ull, 3}, {5549384008678792175ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 0, .Count = 22}, {.Sum = 2.8026e-45, .Count = 3}, {.Sum = 0, .Count = 14}, {.Sum = 2.66247e-44, .Count = 17}, {.Sum = 0, .Count = 22}, {.Sum = 1.4013e-45, .Count = 1}},
                        .CtrTotal = {0, 22, 2, 3, 0, 14, 19, 17, 0, 22, 1, 1}
                    }
                },
                {
                    768791580653471475ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {14452488454682494753ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {1388452262538353895ull, 9}, {8940247467966214344ull, 1}, {4415016594903340137ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {41084306841859596ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {8678739366408346384ull, 2}, {18446744073709551615ull, 0}, {4544226147037566482ull, 11}, {14256903225472974739ull, 8}, {16748601451484174196ull, 7}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {5913522704362245435ull, 6}, {1466902651052050075ull, 10}, {2942073219785550491ull, 12}, {15383677753867481021ull, 3}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 8.40779e-45, .Count = 10}, {.Sum = 2.8026e-45, .Count = 8}, {.Sum = 0, .Count = 6}, {.Sum = 2.8026e-45, .Count = 14}, {.Sum = 1.4013e-45, .Count = 4}, {.Sum = 2.8026e-45, .Count = 9}, {.Sum = 0, .Count = 11}, {.Sum = 0, .Count = 3}, {.Sum = 1.4013e-45, .Count = 5}, {.Sum = 9.80909e-45, .Count = 6}, {.Sum = 0, .Count = 2}, {.Sum = 1.4013e-45, .Count = 0}, {.Sum = 0, .Count = 1}},
                        .CtrTotal = {6, 10, 2, 8, 0, 6, 2, 14, 1, 4, 2, 9, 0, 11, 0, 3, 1, 5, 7, 6, 0, 2, 1, 0, 0, 1}
                    }
                },
                {
                    768791580653471478ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {15379737126276794113ull, 5}, {18446744073709551615ull, 0}, {14256903225472974739ull, 3}, {18048946643763804916ull, 1}, {2051959227349154549ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {7024059537692152076ull, 6}, {18446744073709551615ull, 0}, {15472181234288693070ull, 2}, {8864790892067322495ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 1.4013e-44, .Count = 58}, {.Sum = 0, .Count = 4}, {.Sum = 1.4013e-45, .Count = 6}, {.Sum = 1.4013e-45, .Count = 5}, {.Sum = 4.2039e-45, .Count = 6}, {.Sum = 2.8026e-45, .Count = 0}, {.Sum = 7.00649e-45, .Count = 0}},
                        .CtrTotal = {10, 58, 0, 4, 1, 6, 1, 5, 3, 6, 2, 0, 5, 0}
                    }
                },
                {
                    8405694746487331109ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {8473802870189803490ull, 0}, {7071392469244395075ull, 2}, {18446744073709551615ull, 0}, {8806438445905145973ull, 3}, {619730330622847022ull, 1}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 1.14906e-43, .Count = 12}, {.Sum = 8.40779e-45, .Count = 1}},
                        .CtrTotal = {82, 12, 6, 1}
                    }
                },
                {
                    8405694746487331111ull,
                    {
                        .IndexHashViewer = {{2136296385601851904ull, 0}, {7428730412605434673ull, 2}, {9959754109938180626ull, 6}, {14256903225472974739ull, 1}, {8056048104805248435ull, 3}, {18446744073709551615ull, 0}, {12130603730978457510ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {10789443546307262781ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 1.30321e-43, .Count = 1}, {.Sum = 2.8026e-45, .Count = 2}, {.Sum = 1.4013e-45, .Count = 1}},
                        .CtrTotal = {93, 1, 2, 2, 1, 1, 1}
                    }
                },
                {
                    8405694746487331128ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {13987540656699198946ull, 3}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18089724839685297862ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {10353740403438739754ull, 1}, {3922001124998993866ull, 2}, {13686716744772876732ull, 4}, {18293943161539901837ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 1.82169e-44, .Count = 42}, {.Sum = 5.1848e-44, .Count = 2}, {.Sum = 5.60519e-45, .Count = 3}},
                        .CtrTotal = {13, 42, 37, 2, 4, 3}
                    }
                },
                {
                    8405694746487331129ull,
                    {
                        .IndexHashViewer = {{7537614347373541888ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {5903587924673389870ull, 2}, {18278593470046426063ull, 6}, {10490918088663114479ull, 3}, {18446744073709551615ull, 0}, {407784798908322194ull, 7}, {5726141494028968211ull, 1}, {1663272627194921140ull, 10}, {8118089682304925684ull, 8}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {15431483020081801594ull, 9}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {1403990565605003389ull, 5}, {3699047549849816830ull, 11}, {14914630290137473119ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 1.4013e-44, .Count = 4}, {.Sum = 3.92364e-44, .Count = 3}, {.Sum = 2.8026e-44, .Count = 19}, {.Sum = 5.60519e-45, .Count = 5}, {.Sum = 2.8026e-45, .Count = 1}, {.Sum = 4.2039e-45, .Count = 2}},
                        .CtrTotal = {10, 4, 28, 3, 20, 19, 4, 5, 2, 1, 3, 2}
                    }
                },
                {
                    8405694746487331130ull,
                    {
                        .IndexHashViewer = {{3607388709394294015ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18356215166324018775ull, 2}, {18365206492781874408ull, 1}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {14559146096844143499ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {11416626865500250542ull, 3}, {5549384008678792175ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 3.08286e-44, .Count = 5}, {.Sum = 1.96182e-44, .Count = 36}, {.Sum = 3.08286e-44, .Count = 2}},
                        .CtrTotal = {22, 5, 14, 36, 22, 2}
                    }
                },
                {
                    8405694746487331131ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {14452488454682494753ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {1388452262538353895ull, 9}, {8940247467966214344ull, 1}, {4415016594903340137ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {41084306841859596ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {8678739366408346384ull, 2}, {18446744073709551615ull, 0}, {4544226147037566482ull, 11}, {14256903225472974739ull, 8}, {16748601451484174196ull, 7}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {5913522704362245435ull, 6}, {1466902651052050075ull, 10}, {2942073219785550491ull, 12}, {15383677753867481021ull, 3}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 2.24208e-44, .Count = 10}, {.Sum = 8.40779e-45, .Count = 16}, {.Sum = 7.00649e-45, .Count = 11}, {.Sum = 1.54143e-44, .Count = 3}, {.Sum = 8.40779e-45, .Count = 13}, {.Sum = 2.8026e-45, .Count = 1}},
                        .CtrTotal = {16, 10, 6, 16, 5, 11, 11, 3, 6, 13, 2, 1, 1}
                    }
                },
                {
                    8405694746487331134ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {15379737126276794113ull, 5}, {18446744073709551615ull, 0}, {14256903225472974739ull, 3}, {18048946643763804916ull, 1}, {2051959227349154549ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {7024059537692152076ull, 6}, {18446744073709551615ull, 0}, {15472181234288693070ull, 2}, {8864790892067322495ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 9.52883e-44, .Count = 4}, {.Sum = 9.80909e-45, .Count = 6}, {.Sum = 1.26117e-44, .Count = 2}},
                        .CtrTotal = {68, 4, 7, 6, 9, 2, 5}
                    }
                }
            }
        }
    };
} CatboostModelStatic;

static std::unordered_map<std::string, int> CatFeatureHashes = {
    {"Female", -2114564283},
    {"Protective-serv", -2075156126},
    {"Assoc-voc", -2029370604},
    {"Married-civ-spouse", -2019910086},
    {"Federal-gov", -1993066135},
    {"Transport-moving", -1903253868},
    {"Farming-fishing", -1888947309},
    {"Prof-school", -1742589394},
    {"Self-emp-inc", -1732053524},
    {"?", -1576664757},
    {"Handlers-cleaners", -1555793520},
    {"0", -1438285038},
    {"Philippines", -1437257447},
    {"Male", -1291328762},
    {"11th", -1209300766},
    {"Unmarried", -1158645841},
    {"Local-gov", -1105932163},
    {"Divorced", -993514283},
    {"Some-college", -870577664},
    {"Asian-Pac-Islander", -787966085},
    {"Sales", -760428919},
    {"Self-emp-not-inc", -661998850},
    {"Widowed", -651660490},
    {"Masters", -453513993},
    {"State-gov", -447941100},
    {"Doctorate", -434936054},
    {"White", -218697806},
    {"Own-child", -189887997},
    {"Amer-Indian-Eskimo", -86031875},
    {"Exec-managerial", -26537793},
    {"Husband", 60472414},
    {"Italy", 117615621},
    {"Not-in-family", 143014663},
    {"n", 239748506},
    {"Married-spouse-absent", 261588508},
    {"Prof-specialty", 369959660},
    {"Assoc-acdm", 475479755},
    {"Adm-clerical", 495735304},
    {"Bachelors", 556725573},
    {"HS-grad", 580496350},
    {"Craft-repair", 709691013},
    {"Other-relative", 739168919},
    {"Other-service", 786213683},
    {"9th", 840896980},
    {"Separated", 887350706},
    {"10th", 888723975},
    {"Mexico", 972041323},
    {"Hong", 995245846},
    {"1", 1121341681},
    {"Tech-support", 1150039955},
    {"Black", 1161225950},
    {"Canada", 1510821218},
    {"Wife", 1708186408},
    {"United-States", 1736516096},
    {"Never-married", 1959200218},
    {"Machine-op-inspct", 2039859473},
    {"7th-8th", 2066982375},
    {"Private", 2084267031},
};

static inline TCatboostCPPExportModelCtrBaseHash CalcHash(TCatboostCPPExportModelCtrBaseHash a, TCatboostCPPExportModelCtrBaseHash b) {
    const static constexpr TCatboostCPPExportModelCtrBaseHash MAGIC_MULT = 0x4906ba494954cb65ull;
    return MAGIC_MULT * (a + MAGIC_MULT * b);
}

static inline TCatboostCPPExportModelCtrBaseHash CalcHash(
    const std::vector<unsigned char>& binarizedFeatures,
    const std::vector<int>& hashedCatFeatures,
    const std::vector<int>& transposedCatFeatureIndexes,
    const std::vector<TCatboostCPPExportBinFeatureIndexValue>& binarizedFeatureIndexes) {
    TCatboostCPPExportModelCtrBaseHash result = 0;
    for (const int featureIdx : transposedCatFeatureIndexes) {
        auto valPtr = &hashedCatFeatures[featureIdx];
        result = CalcHash(result, (TCatboostCPPExportModelCtrBaseHash)valPtr[0]);
    }
    for (const auto& binFeatureIndex : binarizedFeatureIndexes) {
        const unsigned char* binFPtr = &binarizedFeatures[binFeatureIndex.BinIndex];
        if (!binFeatureIndex.CheckValueEqual) {
            result = CalcHash(result, (TCatboostCPPExportModelCtrBaseHash)(binFPtr[0] >= binFeatureIndex.Value));
        } else {
            result = CalcHash(result, (TCatboostCPPExportModelCtrBaseHash)(binFPtr[0] == binFeatureIndex.Value));
        }
    }
    return result;
}

static void CalcCtrs(const TCatboostCPPExportModelCtrs& modelCtrs,
                     const std::vector<unsigned char>& binarizedFeatures,
                     const std::vector<int>& hashedCatFeatures,
                     std::vector<float>& result) {
    TCatboostCPPExportModelCtrBaseHash ctrHash;
    size_t resultIdx = 0;

    for (size_t i = 0; i < modelCtrs.CompressedModelCtrs.size(); ++i) {
        auto& proj = modelCtrs.CompressedModelCtrs[i].Projection;
        ctrHash = CalcHash(binarizedFeatures, hashedCatFeatures,
                           proj.transposedCatFeatureIndexes, proj.binarizedIndexes);
        for (size_t j = 0; j < modelCtrs.CompressedModelCtrs[i].ModelCtrs.size(); ++j) {
            auto& ctr = modelCtrs.CompressedModelCtrs[i].ModelCtrs[j];
            auto& learnCtr = modelCtrs.CtrData.LearnCtrs.at(ctr.BaseHash);
            const ECatboostCPPExportModelCtrType ctrType = ctr.BaseCtrType;
            const unsigned int* bucketPtr = learnCtr.ResolveHashIndex(ctrHash);
            if (bucketPtr == NULL) {
                result[resultIdx] = ctr.Calc(0.f, 0.f);
            } else {
                unsigned int bucket = *bucketPtr;
                if (ctrType == ECatboostCPPExportModelCtrType::BinarizedTargetMeanValue || ctrType == ECatboostCPPExportModelCtrType::FloatTargetMeanValue) {
                    const TCatboostCPPExportCtrMeanHistory& ctrMeanHistory = learnCtr.CtrMeanHistory[bucket];
                    result[resultIdx] = ctr.Calc(ctrMeanHistory.Sum, ctrMeanHistory.Count);
                } else if (ctrType == ECatboostCPPExportModelCtrType::Counter || ctrType == ECatboostCPPExportModelCtrType::FeatureFreq) {
                    const std::vector<int>& ctrTotal = learnCtr.CtrTotal;
                    const int denominator = learnCtr.CounterDenominator;
                    result[resultIdx] = ctr.Calc(ctrTotal[bucket], denominator);
                } else if (ctrType == ECatboostCPPExportModelCtrType::Buckets) {
                    auto ctrIntArray = learnCtr.CtrTotal;
                    const int targetClassesCount = learnCtr.TargetClassesCount;
                    int goodCount = 0;
                    int totalCount = 0;
                    int* ctrHistory = ctrIntArray.data() + bucket * targetClassesCount;
                    goodCount = ctrHistory[ctr.TargetBorderIdx];
                    for (int classId = 0; classId < targetClassesCount; ++classId) {
                        totalCount += ctrHistory[classId];
                    }
                    result[resultIdx] = ctr.Calc(goodCount, totalCount);
                } else {
                    auto ctrIntArray = learnCtr.CtrTotal;
                    const int targetClassesCount = learnCtr.TargetClassesCount;

                    if (targetClassesCount > 2) {
                        int goodCount = 0;
                        int totalCount = 0;
                        int* ctrHistory = ctrIntArray.data() + bucket * targetClassesCount;
                        for (int classId = 0; classId < ctr.TargetBorderIdx + 1; ++classId) {
                            totalCount += ctrHistory[classId];
                        }
                        for (int classId = ctr.TargetBorderIdx + 1; classId < targetClassesCount; ++classId) {
                            goodCount += ctrHistory[classId];
                        }
                        totalCount += goodCount;
                        result[resultIdx] = ctr.Calc(goodCount, totalCount);
                    } else {
                        const int* ctrHistory = &ctrIntArray[bucket * 2];
                        result[resultIdx] = ctr.Calc(ctrHistory[1], ctrHistory[0] + ctrHistory[1]);
                    }
                }
            }
            resultIdx += 1;
        }
    }
}

static int GetHash(const std::string& catFeature, const std::unordered_map<std::string, int>& catFeatureHashes) {
    const auto keyValue = catFeatureHashes.find(catFeature);
    if (keyValue != catFeatureHashes.end()) {
        return keyValue->second;
    } else {
        return 0x7fFFffFF;
    }
}

/* Model applicator */
double ApplyCatboostModel(
    const std::vector<float>& floatFeatures,
    const std::vector<std::string>& catFeatures) {
    const struct CatboostModel& model = CatboostModelStatic;

    assert(floatFeatures.size() == model.FloatFeatureCount);
    assert(catFeatures.size() == model.CatFeatureCount);

    /* Binarize features */
    std::vector<unsigned char> binaryFeatures(model.BinaryFeatureCount, 0);
    unsigned int binFeatureIndex = 0;
    {
        /* Binarize float features */
        for (size_t i = 0; i < model.FloatFeatureBorders.size(); ++i) {
            if (!model.FloatFeatureBorders[i].empty()) {
                for (const float border : model.FloatFeatureBorders[i]) {
                    binaryFeatures[binFeatureIndex] += (unsigned char) (floatFeatures[i] > border);
                }
                ++binFeatureIndex;
            }
        }
    }

    std::vector<int> transposedHash(model.CatFeatureCount);
    for (size_t i = 0; i < model.CatFeatureCount; ++i) {
        transposedHash[i] = GetHash(catFeatures[i], CatFeatureHashes);
    }

    if (model.OneHotCatFeatureIndex.size() > 0) {
        /* Binarize one hot cat features */
        std::unordered_map<int, int> catFeaturePackedIndexes;
        for (unsigned int i = 0; i < model.CatFeatureCount; ++i) {
            catFeaturePackedIndexes[model.CatFeaturesIndex[i]] = i;
        };
        for (unsigned int i = 0; i < model.OneHotCatFeatureIndex.size(); ++i) {
            const auto catIdx = catFeaturePackedIndexes.at(model.OneHotCatFeatureIndex[i]);
            const auto hash = transposedHash[catIdx];
            if (!model.OneHotHashValues[i].empty()) {
                for (unsigned int borderIdx = 0; borderIdx < model.OneHotHashValues[i].size(); ++borderIdx) {
                    binaryFeatures[binFeatureIndex] |=
                        (unsigned char) (hash == model.OneHotHashValues[i][borderIdx]) * (borderIdx + 1);
                }
                ++binFeatureIndex;
            }
        }
    }

    if (model.modelCtrs.UsedModelCtrsCount > 0) {
        /* Binarize CTR cat features */
        std::vector<float> ctrs(model.modelCtrs.UsedModelCtrsCount);
        CalcCtrs(model.modelCtrs, binaryFeatures, transposedHash, ctrs);

        for (size_t i = 0; i < model.CtrFeatureBorders.size(); ++i) {
            for (const float border : model.CtrFeatureBorders[i]) {
                binaryFeatures[binFeatureIndex] += (unsigned char)(ctrs[i] > border);
            }
            ++binFeatureIndex;
        }
    }

    /* Extract and sum values from trees */
    double result = 0.0;
    const unsigned int* treeSplitsPtr = model.TreeSplits.data();
    const double* leafValuesPtr = model.LeafValues;
    size_t treePtr = 0;
    for (unsigned int treeId = 0; treeId < model.TreeCount; ++treeId) {
        const unsigned int currentTreeDepth = model.TreeDepth[treeId];
        unsigned int index = 0;
        for (unsigned int depth = 0; depth < currentTreeDepth; ++depth) {
            const unsigned char borderVal = model.TreeSplitIdxs[treePtr + depth];
            const unsigned int featureIndex = model.TreeSplitFeatureIndex[treePtr + depth];
            const unsigned char xorMask = model.TreeSplitXorMask[treePtr + depth];
            index |= ((binaryFeatures[featureIndex] ^ xorMask) >= borderVal) << depth;
        }
        result += leafValuesPtr[index];
        treeSplitsPtr += currentTreeDepth;
        leafValuesPtr += (1 << currentTreeDepth);
        treePtr += currentTreeDepth;
    }
    return model.Scale * result + model.Bias;
}
