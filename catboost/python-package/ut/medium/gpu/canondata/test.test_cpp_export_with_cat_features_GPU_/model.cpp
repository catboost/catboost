#include <cassert>
#include <string>
#include <vector>
#include <unordered_map>

typedef unsigned long long int TCatboostCPPExportModelCtrBaseHash;

enum class ECatboostCPPExportModelCtrType {
    Borders,
    Buckets,
    BinarizedTargetMeanValue,
    FloatTargetMeanValue,
    Counter,
    FeatureFreq,
    CtrTypesCount
};

struct TCatboostCPPExportModelCtr {
    TCatboostCPPExportModelCtrBaseHash BaseHash;
    ECatboostCPPExportModelCtrType BaseCtrType;
    int TargetBorderIdx = 0;
    float PriorNum = 0.0f;
    float PriorDenom = 1.0f;
    float Shift = 0.0f;
    float Scale = 1.0f;

    inline float Calc(float countInClass, float totalCount) const {
        float ctr = (countInClass + PriorNum) / (totalCount + PriorDenom);
        return (ctr + Shift) * Scale;
    }
};

struct TCatboostCPPExportFloatSplit {
    int FloatFeature = 0;
    float Split = 0.f;
};

struct TCatboostCPPExportOneHotSplit {
    int CatFeatureIdx = 0;
    int Value = 0;
};

struct TCatboostCPPExportBinFeatureIndexValue {
    unsigned int BinIndex = 0;
    bool CheckValueEqual = 0;
    unsigned char Value = 0;
};

struct TCatboostCPPExportCtrMeanHistory {
    float Sum;
    int Count;
};

struct TCatboostCPPExportCtrValueTable {
    std::unordered_map<TCatboostCPPExportModelCtrBaseHash, unsigned int> IndexHashViewer;
    int TargetClassesCount;
    int CounterDenominator;
    std::vector<TCatboostCPPExportCtrMeanHistory> CtrMeanHistory;
    std::vector<int> CtrTotal;
    const unsigned int* ResolveHashIndex(TCatboostCPPExportModelCtrBaseHash hash) const {
        auto search = IndexHashViewer.find(hash);
        if (search == IndexHashViewer.end()) {
            return NULL;
        }
        return &search->second;
    }
};

struct TCatboostCPPExportCtrData {
    std::unordered_map<TCatboostCPPExportModelCtrBaseHash, TCatboostCPPExportCtrValueTable> LearnCtrs;
};

struct TCatboostCPPExportCompressedModelCtr {
    struct TCatboostCPPExportProjection {
        std::vector<int> transposedCatFeatureIndexes;
        std::vector<TCatboostCPPExportBinFeatureIndexValue> binarizedIndexes;
    } Projection;
    std::vector<TCatboostCPPExportModelCtr> ModelCtrs;
};

struct TCatboostCPPExportModelCtrs {
    unsigned int UsedModelCtrsCount;
    std::vector<TCatboostCPPExportCompressedModelCtr> CompressedModelCtrs;
    TCatboostCPPExportCtrData CtrData;
};

/* Model data */
static const struct CatboostModel {
    CatboostModel() {};
    unsigned int FloatFeatureCount = 6;
    unsigned int CatFeatureCount = 11;
    unsigned int BinaryFeatureCount = 30;
    unsigned int TreeCount = 20;
    std::vector<std::vector<float>> FloatFeatureBorders = {
        {27.5, 41.5, 46.5, 50, 53.5, 56, 58.5, 60.5},
        {38811, 51773, 66768, 119180.5, 124942, 156628, 168783.5, 208500.5, 218145.5, 288417.5, 325462, 337225.5},
        {9.5, 11.5, 13.5},
        {3280, 5842},
        {},
        {46.5}
    };
    std::vector<unsigned int> TreeDepth = {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6};
    std::vector<unsigned int> TreeSplits = {59, 27, 39, 7, 23, 26, 33, 81, 46, 55, 20, 86, 58, 1, 40, 53, 3, 83, 23, 81, 86, 22, 9, 76, 31, 22, 19, 54, 13, 14, 78, 23, 25, 80, 62, 26, 52, 77, 24, 6, 39, 29, 72, 82, 28, 81, 36, 56, 25, 79, 26, 85, 15, 18, 57, 21, 60, 70, 34, 81, 9, 33, 81, 50, 16, 37, 23, 33, 50, 63, 26, 44, 23, 4, 42, 71, 12, 35, 32, 2, 38, 39, 56, 35, 71, 78, 23, 9, 8, 47, 48, 66, 10, 51, 0, 75, 9, 45, 49, 68, 17, 61, 84, 86, 69, 64, 0, 11, 71, 65, 41, 43, 67, 74, 23, 30, 78, 71, 5, 73};
    std::vector<unsigned char> TreeSplitIdxs = {4, 1, 1, 8, 1, 255, 2, 2, 5, 4, 1, 1, 3, 2, 2, 2, 4, 2, 1, 2, 1, 3, 2, 2, 2, 3, 12, 3, 6, 7, 1, 1, 1, 1, 2, 255, 1, 1, 2, 7, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 255, 1, 8, 11, 2, 2, 1, 4, 3, 2, 2, 2, 2, 3, 9, 2, 1, 2, 3, 1, 255, 3, 1, 5, 1, 1, 5, 4, 1, 3, 3, 1, 1, 4, 1, 1, 1, 2, 1, 6, 1, 1, 3, 4, 1, 1, 2, 4, 2, 2, 10, 1, 3, 1, 3, 2, 1, 4, 1, 3, 1, 2, 1, 4, 1, 1, 1, 1, 6, 3};
    std::vector<unsigned short> TreeSplitFeatureIndex = {16, 6, 11, 0, 3, 5, 9, 26, 13, 15, 2, 29, 16, 0, 11, 15, 0, 27, 3, 26, 29, 2, 1, 23, 8, 2, 1, 15, 1, 1, 25, 3, 4, 26, 18, 5, 15, 24, 3, 0, 11, 7, 22, 27, 7, 26, 10, 16, 4, 25, 5, 28, 1, 1, 16, 2, 17, 21, 9, 26, 1, 9, 26, 14, 1, 10, 3, 9, 14, 19, 5, 13, 3, 0, 13, 22, 1, 9, 9, 0, 10, 11, 16, 9, 22, 25, 3, 1, 1, 13, 14, 20, 1, 14, 0, 23, 1, 13, 14, 21, 1, 18, 27, 29, 21, 19, 0, 1, 22, 19, 12, 13, 21, 22, 3, 8, 25, 22, 0, 22};
    std::vector<unsigned char> TreeSplitXorMask = {0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    std::vector<unsigned int> CatFeaturesIndex = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::vector<unsigned int> OneHotCatFeatureIndex = {9};
    std::vector<std::vector<int>> OneHotHashValues = {
        {-1291328762}
    };
    std::vector<std::vector<float>> CtrFeatureBorders = {
        {0.599734068f},
        {0.203571424f, 0.514285684f},
        {0.350000024f, 0.5f},
        {0.0294117667f, 0.0539215691f, 0.0637254938f, 0.377451003f},
        {0.286458343f, 0.515625f, 0.744791687f},
        {0.471354157f, 0.6484375f},
        {0.4375f},
        {0.0147058833f, 0.0245098043f, 0.0343137272f, 0.0735294148f, 0.142156869f, 0.191176474f},
        {0.243243247f, 0.42567569f, 0.547297299f, 0.608108103f},
        {0.428716242f, 0.557432413f, 0.686148643f, 0.771959484f},
        {0.587499976f, 0.662500024f, 0.8125f, 0.925000072f},
        {0.057692308f},
        {0.78125f, 0.9375f},
        {0.0539215691f, 0.0784313753f, 0.102941178f},
        {0.0596590899f},
        {0.497869313f, 0.551136374f, 0.604403436f, 0.657670498f},
        {0.4375f, 0.578125f, 0.625f, 0.765625f},
        {0.0931372568f, 0.284313738f},
        {0.6875f},
        {0.7421875f, 0.90625f},
        {0.0882352963f, 0.460784316f},
        {0.786458373f, 0.8125f, 0.890625f},
        {0.854166687f},
        {0.0147058833f}
    };

    /* Aggregated array of leaf values for trees. Each tree is represented by a separate line: */
    double LeafValues[1280] = {
        0, 0.02065690979361534, 0, 0, -0.074177086353302, 0.03035939671099186, 0.04131381958723068, 0.07082369178533554, 0, 0, 0, 0, 0, 0.02065690979361534, 0, 0.02065690979361534, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.1186833381652832, 0, -0.1695476323366165, 0.04721579328179359, -0.1135086789727211, 0.04721579328179359, 0.002390054054558277, 0.07229918241500854, 0, 0, 0, 0, 0, 0, 0, 0.02065690979361534, -0.074177086353302, 0, 0, 0, -0.074177086353302, 0, -0.1186833381652832, 0, 0, 0, 0, 0, 0, 0, -0.1186833381652832, 0,
        0, 0, 0, 0, 0, 0, 0, 0.02043025381863117, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.06341260671615601, 0, 0, 0, 0, 0, -0.06292187422513962, 0, 0, 0, 0, 0.01380048971623182, 0, 0, 0, 0.01869793608784676, 0.01869793608784676, 0, 0.04570521414279938, 0, 0.01394041813910007, -0.1293118596076965, 0.02537048794329166, 0, 0.02537458203732967, 0, 0.03856900334358215, 0, 0.02208078466355801, 0.01777780801057816, 0.04565412178635597, 0, 0.02633455954492092, -0.1289847046136856, -0.1510375440120697, 0, 0.03268840909004211, -0.06714258342981339, -0.04089290276169777, 0, 0.03086593933403492, 0, 0.02790174633264542, 0, 0.02760097943246365, 0.01394041813910007, 0.05157322064042091,
        -0.07468961924314499, 0.02727858163416386, -0.05921715125441551, 0, 0.00363957928493619, 0.009606011211872101, -0.07094700634479523, 0, 0, 0.03397323191165924, -0.06008025258779526, 0, 0, 0.04015551880002022, 0, 0.02485870756208897, 0, 0, -0.0508514977991581, -0.06273269653320313, 0, 0, -0.06684204190969467, 0.01692473702132702, 0, 0, -0.05118047073483467, 0.03366373851895332, 0, 0, 0, 0.03282172977924347, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0.006334729958325624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.008683623746037483, 0, 0, 0, 0.03431500121951103, 0, 0.0259923692792654, 0, 0, 0, 0, 0, 0.01048936322331429, 0, -0.02240845561027527, -0.04929464682936668, 0, 0, 0, 0, 0, 0, -0.06418681144714355, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.05031581968069077, 0, 0.01814761571586132, -0.0572998970746994, 0.03849354386329651, 0, 0.005358338356018066, -0.1288681030273438, 0, 0, 0, 0, 0, 0, -0.08813315629959106, 0,
        -0.04492941126227379, 0.006577303633093834, 0, -0.09390158206224442, 0, 0, 0, 0, 0, 0.01739424280822277, 0, 0.009494616650044918, 0, 0, 0, 0, -0.05061619356274605, -0.01466238312423229, 0, 0, 0, 0, 0, 0, 0, 0.01906334981322289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.1028074473142624, -0.004131489433348179, -0.03541791066527367, -0.07700189203023911, 0, 0.0464206151664257, 0, 0.05971870571374893, 0.006613841746002436, 0.01806511729955673, 0.01495516952127218, 0.0124658215790987, 0.007309336680918932, 0.01223399210721254, 0, 0,
        0.0039064921438694, 0.003406383097171783, 0, 0, 0, 0, 0, 0, 0.01951935887336731, 0.01504386495798826, 0, 0, 0, 0.005986623931676149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.011465048417449, -0.002516406355425715, 0, 0, 0.01416121236979961, 0, 0, 0, 0, 0.002960442332550883, 0, 0, 0, 0, 0, 0, 0.04165245965123177, -0.002572565572336316, -0.09283354878425598, -0.04110761731863022, -0.04472984373569489, -0.08008551597595215, 0, -0.03246556222438812, 0.002471073064953089, -0.01705054193735123, 0, 0, 0, 0, 0, 0, 0.0208894107490778, 0.01798024773597717, 0, -0.04009205847978592, 0.03110760264098644, -0.05191695317625999, 0, 0,
        -0.02288736589252949, 0, 0, -0.01022275537252426, 0, 0, 0, -0.02691099792718887, 0, 0, 0, 0, 0, 0, 0, 0, 0.01431740634143353, -0.02689333073794842, -0.04264960065484047, -0.03696177154779434, 0, 0, 0, -0.0293867215514183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01076212804764509, -0.01825658790767193, -0.03668250888586044, 0, 0, 0, 0, 0, 0.008838169276714325, 0, 0.01552554499357939, 0, 0, 0, 0, 0.0327700600028038, 0.0187856387346983, 0.03835982456803322, -0.0005032892804592848, 0, 0, 0, -0.04167164489626884, 0, 0.002566211158409715, 0, 0.03325718268752098, 0, 0, 0, -0.05879934877157211,
        0, 0, 0, 0, -0.03553533181548119, 0, 0, 0, 0, 0, 0, -0.02349479496479034, 0.01733450219035149, -0.0360606275498867, 0, 0, 0, 0, 0, 0, 0.02109146676957607, 0.02501412481069565, 0, 0, -0.04673577472567558, -0.04122354835271835, 0, 0, -0.0232468917965889, 0.03519059717655182, 0, -0.06557127088308334, 0, 0, 0, 0, 0, 0.01294095627963543, 0, 0, 0, 0.012655277736485, 0, 0, 0, -0.01870885863900185, 0, 0.001178431673906744, 0, 0, 0, 0, 0, 0.01012590061873198, 0, 0, 0, 0, 0, 0, 0, 0.009544850327074528, 0, 0.002206019358709455,
        0.002610031748190522, 0.0166639294475317, 0.01006407663226128, 0, 0.001451500342227519, -0.05055248364806175, 0.02021692134439945, 0, 0.0007942280499264598, 0, -0.04119008034467697, 0, -0.03551516309380531, 0, 0.003434577956795692, 0, 0.00621833698824048, 0, 0.003878104966133833, 0, -0.0165705718100071, -0.05163629725575447, 0.01220335997641087, 0, 0, 0, 0, 0, 0.01931470260024071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.002028740476816893, 0, 0.01158235687762499, 0, 0.03207895532250404, 0.03294780850410461, 0.002526498632505536, 0, 0.005401465110480785, 0, 0, 0, 0.004734296351671219, 0, -0.03216537460684776, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.009699585847556591, 0, 0.003108861157670617, 0, 0, -0.02911500260233879, 0.004855514969676733, 0.02476612851023674, 0, 0.01048395410180092, 0, 0, 0, 0, 0.0001031589781632647, 0, 0.001702169422060251, 0, 0.001898708520457149, 0, 0, 0, 0, -0.07527415454387665, 0, -0.02390129677951336, 0, 0, 0.001707826624624431, 0, 0, 0, 0.0120614767074585, -0.02107680030167103, 0.001676076208241284, 0.01564076729118824, 0.004285325761884451, 0.04603046551346779, -0.03064644522964954, 0.008879153057932854, 0.009876915253698826, -0.04362121596932411, 0, 0, 0.0004964707186445594, 0, 0.00808383896946907, 0, 0.005901774857193232, 0, 0.01237653102725744,
        0, 0, 0, 0.00396202364936471, 0, -0.02345147542655468, 0, 0.00390787236392498, 0, 0, 0, 0.005248439498245716, 0, 0, 0, 0.01426341664046049, 0, 0, 0, -0.01349135581403971, 0, -0.01484694611281157, 0, 0.006434210576117039, 0, 0, 0, -0.000350763148162514, 0, 0, 0, 0.0003298769879620522, 0, 0.003158513223752379, 0, 0.01669295132160187, 0, -0.04995304346084595, -0.04827718809247017, -0.01973436586558819, 0, 0.002814035629853606, 0, 0.001879151561297476, 0, 0.001517126569524407, -0.001420439803041518, -0.001732544857077301, 0, 0, 0, 0.01143496111035347, 0, -0.01867771707475185, 0, 0.04852361604571342, 0, 0, 0, -0.001007681130431592, 0, 0.01005940232425928, 0, 0.00277006602846086,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0008541846182197332, 0, 0, 0, 0.04105503112077713, 0, 0, 0, -0.0009833170333877206, 0, -0.01343895029276609, 0, -0.0181480310857296, 0, 0, 0, 0.001204499625600874, 0, 0, 0, 0, 0, 0, 0, -0.0003175035526510328, 0, -0.01826152019202709, 0, 0.009406766854226589, 0, 0.008382944390177727, 0, 0.003067725570872426, 0, 0, 0, -0.03550350666046143, 0, 0.002547167707234621, 0, 0.002541456138715148, 0, -0.03305400162935257, -0.02177898213267326, 0.02058113180100918, -0.06213521584868431, 0, 0, 0.001561469631269574, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0413636639714241, 0, 0.004590789321810007, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03716161847114563, 0, 0, 0, -0.003149463096633554, -0.0147886173799634, -0.003507936373353004, -0.01763888634741306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00139879563357681, 0, 0.01786119677126408, 0, 0, 0, 0, 0, 0.01159551553428173, 0, 0, 0, 0, 0, 0, 0, 7.993332110345364e-05, -0.04300554469227791, 0.02100443467497826, -0.01766529865562916,
        -0.01338615361601114, -0.007589147426187992, 0, -0.0123610831797123, 0, 0, 0, 0, 0, -0.02140885591506958, 0, 0.03363743424415588, 0, 0, -0.01760490238666534, -0.01499440893530846, 0, 0.008688987232744694, 0, 0.001957940403372049, 0, 0, 0, 0, 0, 0.002420019125565886, 0, -0.01916748471558094, 0, 0.006019117310643196, 0, 0.005986690055578947, 0, -0.006025975104421377, 0, -0.01807435788214207, 0, 0, 0, 0, 0, 0.02868709154427052, 0, 0.02413202077150345, 0, -0.01144685968756676, 0, -0.01108770351856947, 0, 0.003451919881626964, 0, 0.01306305453181267, 0, 0, 0, 0, 0, -0.000901354884263128, 0, -0.002641638740897179, 0, 0.002698301104828715, 0, -0.004004023037850857,
        0, -0.001822358462959528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.008207334205508232, 0.01311857905238867, 0, -0.01043362077325583, 0, -0.02175926230847836, 0, -0.016118498519063, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.04473181813955307, 0, 0, 0, 0, 0, 0, 0, 0.01684072986245155, 0, -0.005145289935171604, 0, -0.02834666147828102, 0, -0.01064952835440636,
        0, 0, 0, 0, 0, 0.01680953241884708, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0001243164588231593, 0, 0, -0.02891034446656704, 0, 0, -0.011780577711761, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.004973608069121838, 0, 0.004375726915895939, 0.01254712045192719, 0, 0, 0, 0, 0, 0, 0, -0.002561374334618449, 0, 0, 0, -0.04048972204327583, -0.003388459095731378, 0, 0.02919718995690346, -0.006334492936730385, 0, 0, 0, -0.006718300748616457, 0, 0.002395865973085165, 0, 0.004226983524858952,
        0, -0.007512800861150026, 0, 0.01521541830152273, 0, 0, 0, -0.007746806368231773, 0, 0, 0, -0.008935973979532719, 0, -0.01177093293517828, 0, 0.001293880864977837, 0, 0, 0, 0, 0, 0, 0, -0.02055885829031467, 0, 0, 0, 0, 0, -0.001440212363377213, 0, -0.005704254377633333, 0, 0, 0, 0.001592671498656273, 0, 0.01437909528613091, -0.0366499200463295, -0.01430843211710453, 0, 0.006317941937595606, 0, -0.01407626364380121, -0.001012416323646903, 0.002786852419376373, 0, 0.005669577047228813, 0, 0.01157829724252224, 0, 0.02623439207673073, 0, 0.009255638346076012, 0, 0.002168656093999743, 0, 0, 0, 0, 0, 0.003499593585729599, 0, -0.001112631522119045,
        0, 0, 0.004350901115685701, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001553088077344, 0, 0, 0, 0.03188366070389748, 0, 0, 0, -0.002652740338817239, 0, 0, 0, -0.02547977305948734, 0, 0, 0, -0.006052231416106224, 0, 0, 0, 0, 0, 0.002728167921304703, 0, -0.0001750609953887761, 0, 0.01182044204324484, 0, 0.01827127858996391, 0, 0, 0, -0.005391709040850401, 0, -0.01916578039526939, 0, -0.009277942590415478, 0, 0, 0, 0.009379425086081028, 0, -0.01168348267674446, 0, 0.002248380100354552, 0, 0, 0, -0.002301638945937157, 0,
        0, 0, 0, 0, 0, 0.02621633745729923, 0, -0.007013554219156504, 0, 0, 0, 5.167628842173144e-05, 0, -0.02047207020223141, 0.006439098622649908, 0.01584694534540176, 0, 0, 0, 0, 0, 0, 0, -0.01970250718295574, 0, 0, 0, -0.01303364988416433, 0, -0.01499996148049831, 0, -0.00782806146889925, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00394535344094038, 0, 0, 0, 0.008500462397933006, 0, 0.002635837299749255, 0, -0.001868882798589766,
        0, 0, 0.005828454159200191, 0, 0, 0, 0, 0, 0, 0, 0.01639531552791595, -0.03049393557012081, 0, 0, -0.01878745853900909, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02199277095496655, 0, -0.008449642919003963, -0.00343940663151443, 0.02069676667451859, -0.01353999506682158, 0, 0, 0, 0, 0, 0, 0, 0, -0.01138250716030598, 0, -0.0002551489451434463, -0.008676398545503616, -0.01066379714757204, 0, 0.0001026382597046904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00622127577662468, 0, 0, 0, 0.005422287620604038, 0
    };
    double Scale = 1;
    double Bias = 0.7821782231;
    struct TCatboostCPPExportModelCtrs modelCtrs = {
        .UsedModelCtrsCount = 24,
        .CompressedModelCtrs = {
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {3},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471478ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471478ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471478ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 11154939068695130472ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {4},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471473ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471473ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471473ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 11154939068695130479ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {5},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471472ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471472ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471472ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {6},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471475ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471475ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 11154939068695130477ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {7},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471474ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471474ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471474ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 11154939068695130476ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {8},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471469ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471469ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 11154939068695130483ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {10},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471471ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471471ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 11154939068695130481ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            }
        },
        .CtrData = {
            .LearnCtrs = {
                {
                    768791580653471469ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {8473802870189803490ull, 0}, {7071392469244395075ull, 2}, {18446744073709551615ull, 0}, {8806438445905145973ull, 3}, {619730330622847022ull, 1}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 2.94273e-44, .Count = 61}, {.Sum = 0, .Count = 12}, {.Sum = 1.4013e-45, .Count = 5}, {.Sum = 0, .Count = 1}},
                        .CtrTotal = {21, 61, 0, 12, 1, 5, 0, 1}
                    }
                },
                {
                    768791580653471471ull,
                    {
                        .IndexHashViewer = {{2136296385601851904ull, 0}, {7428730412605434673ull, 2}, {9959754109938180626ull, 6}, {14256903225472974739ull, 1}, {8056048104805248435ull, 3}, {18446744073709551615ull, 0}, {12130603730978457510ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {10789443546307262781ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 2.8026e-44, .Count = 73}, {.Sum = 0, .Count = 1}, {.Sum = 0, .Count = 2}, {.Sum = 0, .Count = 2}, {.Sum = 0, .Count = 1}, {.Sum = 1.4013e-45, .Count = 0}, {.Sum = 1.4013e-45, .Count = 0}},
                        .CtrTotal = {20, 73, 0, 1, 0, 2, 0, 2, 0, 1, 1, 0, 1, 0}
                    }
                },
                {
                    768791580653471472ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {13987540656699198946ull, 3}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18089724839685297862ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {10353740403438739754ull, 1}, {3922001124998993866ull, 2}, {13686716744772876732ull, 4}, {18293943161539901837ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 0, .Count = 13}, {.Sum = 3.08286e-44, .Count = 20}, {.Sum = 0, .Count = 37}, {.Sum = 0, .Count = 2}, {.Sum = 0, .Count = 4}, {.Sum = 0, .Count = 3}},
                        .CtrTotal = {0, 13, 22, 20, 0, 37, 0, 2, 0, 4, 0, 3}
                    }
                },
                {
                    768791580653471473ull,
                    {
                        .IndexHashViewer = {{7537614347373541888ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {5903587924673389870ull, 2}, {18278593470046426063ull, 6}, {10490918088663114479ull, 3}, {18446744073709551615ull, 0}, {407784798908322194ull, 7}, {5726141494028968211ull, 1}, {1663272627194921140ull, 10}, {8118089682304925684ull, 8}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {15431483020081801594ull, 9}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {1403990565605003389ull, 5}, {3699047549849816830ull, 11}, {14914630290137473119ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 9.80909e-45, .Count = 3}, {.Sum = 1.4013e-45, .Count = 3}, {.Sum = 5.60519e-45, .Count = 24}, {.Sum = 0, .Count = 3}, {.Sum = 5.60519e-45, .Count = 16}, {.Sum = 4.2039e-45, .Count = 16}, {.Sum = 0, .Count = 4}, {.Sum = 0, .Count = 5}, {.Sum = 1.4013e-45, .Count = 1}, {.Sum = 0, .Count = 1}, {.Sum = 0, .Count = 3}, {.Sum = 2.8026e-45, .Count = 0}},
                        .CtrTotal = {7, 3, 1, 3, 4, 24, 0, 3, 4, 16, 3, 16, 0, 4, 0, 5, 1, 1, 0, 1, 0, 3, 2, 0}
                    }
                },
                {
                    768791580653471474ull,
                    {
                        .IndexHashViewer = {{3607388709394294015ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18356215166324018775ull, 2}, {18365206492781874408ull, 1}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {14559146096844143499ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {11416626865500250542ull, 3}, {5549384008678792175ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 0, .Count = 22}, {.Sum = 2.8026e-45, .Count = 3}, {.Sum = 0, .Count = 14}, {.Sum = 2.66247e-44, .Count = 17}, {.Sum = 0, .Count = 22}, {.Sum = 1.4013e-45, .Count = 1}},
                        .CtrTotal = {0, 22, 2, 3, 0, 14, 19, 17, 0, 22, 1, 1}
                    }
                },
                {
                    768791580653471475ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {14452488454682494753ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {1388452262538353895ull, 9}, {8940247467966214344ull, 1}, {4415016594903340137ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {41084306841859596ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {8678739366408346384ull, 2}, {18446744073709551615ull, 0}, {4544226147037566482ull, 11}, {14256903225472974739ull, 8}, {16748601451484174196ull, 7}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {5913522704362245435ull, 6}, {1466902651052050075ull, 10}, {2942073219785550491ull, 12}, {15383677753867481021ull, 3}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 8.40779e-45, .Count = 10}, {.Sum = 2.8026e-45, .Count = 8}, {.Sum = 0, .Count = 6}, {.Sum = 2.8026e-45, .Count = 14}, {.Sum = 1.4013e-45, .Count = 4}, {.Sum = 2.8026e-45, .Count = 9}, {.Sum = 0, .Count = 11}, {.Sum = 0, .Count = 3}, {.Sum = 1.4013e-45, .Count = 5}, {.Sum = 9.80909e-45, .Count = 6}, {.Sum = 0, .Count = 2}, {.Sum = 1.4013e-45, .Count = 0}, {.Sum = 0, .Count = 1}},
                        .CtrTotal = {6, 10, 2, 8, 0, 6, 2, 14, 1, 4, 2, 9, 0, 11, 0, 3, 1, 5, 7, 6, 0, 2, 1, 0, 0, 1}
                    }
                },
                {
                    768791580653471478ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {15379737126276794113ull, 5}, {18446744073709551615ull, 0}, {14256903225472974739ull, 3}, {18048946643763804916ull, 1}, {2051959227349154549ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {7024059537692152076ull, 6}, {18446744073709551615ull, 0}, {15472181234288693070ull, 2}, {8864790892067322495ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 1.4013e-44, .Count = 58}, {.Sum = 0, .Count = 4}, {.Sum = 1.4013e-45, .Count = 6}, {.Sum = 1.4013e-45, .Count = 5}, {.Sum = 4.2039e-45, .Count = 6}, {.Sum = 2.8026e-45, .Count = 0}, {.Sum = 7.00649e-45, .Count = 0}},
                        .CtrTotal = {10, 58, 0, 4, 1, 6, 1, 5, 3, 6, 2, 0, 5, 0}
                    }
                },
                {
                    11154939068695130472ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {15379737126276794113ull, 5}, {18446744073709551615ull, 0}, {14256903225472974739ull, 3}, {18048946643763804916ull, 1}, {2051959227349154549ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {7024059537692152076ull, 6}, {18446744073709551615ull, 0}, {15472181234288693070ull, 2}, {8864790892067322495ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 9.52883e-44, .Count = 4}, {.Sum = 9.80909e-45, .Count = 6}, {.Sum = 1.26117e-44, .Count = 2}},
                        .CtrTotal = {68, 4, 7, 6, 9, 2, 5}
                    }
                },
                {
                    11154939068695130476ull,
                    {
                        .IndexHashViewer = {{3607388709394294015ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18356215166324018775ull, 2}, {18365206492781874408ull, 1}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {14559146096844143499ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {11416626865500250542ull, 3}, {5549384008678792175ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 3.08286e-44, .Count = 5}, {.Sum = 1.96182e-44, .Count = 36}, {.Sum = 3.08286e-44, .Count = 2}},
                        .CtrTotal = {22, 5, 14, 36, 22, 2}
                    }
                },
                {
                    11154939068695130477ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {14452488454682494753ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {1388452262538353895ull, 9}, {8940247467966214344ull, 1}, {4415016594903340137ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {41084306841859596ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {8678739366408346384ull, 2}, {18446744073709551615ull, 0}, {4544226147037566482ull, 11}, {14256903225472974739ull, 8}, {16748601451484174196ull, 7}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {5913522704362245435ull, 6}, {1466902651052050075ull, 10}, {2942073219785550491ull, 12}, {15383677753867481021ull, 3}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 2.24208e-44, .Count = 10}, {.Sum = 8.40779e-45, .Count = 16}, {.Sum = 7.00649e-45, .Count = 11}, {.Sum = 1.54143e-44, .Count = 3}, {.Sum = 8.40779e-45, .Count = 13}, {.Sum = 2.8026e-45, .Count = 1}},
                        .CtrTotal = {16, 10, 6, 16, 5, 11, 11, 3, 6, 13, 2, 1, 1}
                    }
                },
                {
                    11154939068695130479ull,
                    {
                        .IndexHashViewer = {{7537614347373541888ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {5903587924673389870ull, 2}, {18278593470046426063ull, 6}, {10490918088663114479ull, 3}, {18446744073709551615ull, 0}, {407784798908322194ull, 7}, {5726141494028968211ull, 1}, {1663272627194921140ull, 10}, {8118089682304925684ull, 8}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {15431483020081801594ull, 9}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {1403990565605003389ull, 5}, {3699047549849816830ull, 11}, {14914630290137473119ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 1.4013e-44, .Count = 4}, {.Sum = 3.92364e-44, .Count = 3}, {.Sum = 2.8026e-44, .Count = 19}, {.Sum = 5.60519e-45, .Count = 5}, {.Sum = 2.8026e-45, .Count = 1}, {.Sum = 4.2039e-45, .Count = 2}},
                        .CtrTotal = {10, 4, 28, 3, 20, 19, 4, 5, 2, 1, 3, 2}
                    }
                },
                {
                    11154939068695130481ull,
                    {
                        .IndexHashViewer = {{2136296385601851904ull, 0}, {7428730412605434673ull, 2}, {9959754109938180626ull, 6}, {14256903225472974739ull, 1}, {8056048104805248435ull, 3}, {18446744073709551615ull, 0}, {12130603730978457510ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {10789443546307262781ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 1.30321e-43, .Count = 1}, {.Sum = 2.8026e-45, .Count = 2}, {.Sum = 1.4013e-45, .Count = 1}},
                        .CtrTotal = {93, 1, 2, 2, 1, 1, 1}
                    }
                },
                {
                    11154939068695130483ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {8473802870189803490ull, 0}, {7071392469244395075ull, 2}, {18446744073709551615ull, 0}, {8806438445905145973ull, 3}, {619730330622847022ull, 1}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 1.14906e-43, .Count = 12}, {.Sum = 8.40779e-45, .Count = 1}},
                        .CtrTotal = {82, 12, 6, 1}
                    }
                }
            }
        }
    };
} CatboostModelStatic;

static std::unordered_map<std::string, int> CatFeatureHashes = {
    {"Female", -2114564283},
    {"Protective-serv", -2075156126},
    {"Assoc-voc", -2029370604},
    {"Married-civ-spouse", -2019910086},
    {"Federal-gov", -1993066135},
    {"Transport-moving", -1903253868},
    {"Farming-fishing", -1888947309},
    {"Prof-school", -1742589394},
    {"Self-emp-inc", -1732053524},
    {"?", -1576664757},
    {"Handlers-cleaners", -1555793520},
    {"0", -1438285038},
    {"Philippines", -1437257447},
    {"Male", -1291328762},
    {"11th", -1209300766},
    {"Unmarried", -1158645841},
    {"Local-gov", -1105932163},
    {"Divorced", -993514283},
    {"Some-college", -870577664},
    {"Asian-Pac-Islander", -787966085},
    {"Sales", -760428919},
    {"Self-emp-not-inc", -661998850},
    {"Widowed", -651660490},
    {"Masters", -453513993},
    {"State-gov", -447941100},
    {"Doctorate", -434936054},
    {"White", -218697806},
    {"Own-child", -189887997},
    {"Amer-Indian-Eskimo", -86031875},
    {"Exec-managerial", -26537793},
    {"Husband", 60472414},
    {"Italy", 117615621},
    {"Not-in-family", 143014663},
    {"n", 239748506},
    {"Married-spouse-absent", 261588508},
    {"Prof-specialty", 369959660},
    {"Assoc-acdm", 475479755},
    {"Adm-clerical", 495735304},
    {"Bachelors", 556725573},
    {"HS-grad", 580496350},
    {"Craft-repair", 709691013},
    {"Other-relative", 739168919},
    {"Other-service", 786213683},
    {"9th", 840896980},
    {"Separated", 887350706},
    {"10th", 888723975},
    {"Mexico", 972041323},
    {"Hong", 995245846},
    {"1", 1121341681},
    {"Tech-support", 1150039955},
    {"Black", 1161225950},
    {"Canada", 1510821218},
    {"Wife", 1708186408},
    {"United-States", 1736516096},
    {"Never-married", 1959200218},
    {"Machine-op-inspct", 2039859473},
    {"7th-8th", 2066982375},
    {"Private", 2084267031},
};

static inline TCatboostCPPExportModelCtrBaseHash CalcHash(TCatboostCPPExportModelCtrBaseHash a, TCatboostCPPExportModelCtrBaseHash b) {
    const static constexpr TCatboostCPPExportModelCtrBaseHash MAGIC_MULT = 0x4906ba494954cb65ull;
    return MAGIC_MULT * (a + MAGIC_MULT * b);
}

static inline TCatboostCPPExportModelCtrBaseHash CalcHash(
    const std::vector<unsigned char>& binarizedFeatures,
    const std::vector<int>& hashedCatFeatures,
    const std::vector<int>& transposedCatFeatureIndexes,
    const std::vector<TCatboostCPPExportBinFeatureIndexValue>& binarizedFeatureIndexes) {
    TCatboostCPPExportModelCtrBaseHash result = 0;
    for (const int featureIdx : transposedCatFeatureIndexes) {
        auto valPtr = &hashedCatFeatures[featureIdx];
        result = CalcHash(result, (TCatboostCPPExportModelCtrBaseHash)valPtr[0]);
    }
    for (const auto& binFeatureIndex : binarizedFeatureIndexes) {
        const unsigned char* binFPtr = &binarizedFeatures[binFeatureIndex.BinIndex];
        if (!binFeatureIndex.CheckValueEqual) {
            result = CalcHash(result, (TCatboostCPPExportModelCtrBaseHash)(binFPtr[0] >= binFeatureIndex.Value));
        } else {
            result = CalcHash(result, (TCatboostCPPExportModelCtrBaseHash)(binFPtr[0] == binFeatureIndex.Value));
        }
    }
    return result;
}

static void CalcCtrs(const TCatboostCPPExportModelCtrs& modelCtrs,
                     const std::vector<unsigned char>& binarizedFeatures,
                     const std::vector<int>& hashedCatFeatures,
                     std::vector<float>& result) {
    TCatboostCPPExportModelCtrBaseHash ctrHash;
    size_t resultIdx = 0;

    for (size_t i = 0; i < modelCtrs.CompressedModelCtrs.size(); ++i) {
        auto& proj = modelCtrs.CompressedModelCtrs[i].Projection;
        ctrHash = CalcHash(binarizedFeatures, hashedCatFeatures,
                           proj.transposedCatFeatureIndexes, proj.binarizedIndexes);
        for (size_t j = 0; j < modelCtrs.CompressedModelCtrs[i].ModelCtrs.size(); ++j) {
            auto& ctr = modelCtrs.CompressedModelCtrs[i].ModelCtrs[j];
            auto& learnCtr = modelCtrs.CtrData.LearnCtrs.at(ctr.BaseHash);
            const ECatboostCPPExportModelCtrType ctrType = ctr.BaseCtrType;
            const unsigned int* bucketPtr = learnCtr.ResolveHashIndex(ctrHash);
            if (bucketPtr == NULL) {
                result[resultIdx] = ctr.Calc(0.f, 0.f);
            } else {
                unsigned int bucket = *bucketPtr;
                if (ctrType == ECatboostCPPExportModelCtrType::BinarizedTargetMeanValue || ctrType == ECatboostCPPExportModelCtrType::FloatTargetMeanValue) {
                    const TCatboostCPPExportCtrMeanHistory& ctrMeanHistory = learnCtr.CtrMeanHistory[bucket];
                    result[resultIdx] = ctr.Calc(ctrMeanHistory.Sum, ctrMeanHistory.Count);
                } else if (ctrType == ECatboostCPPExportModelCtrType::Counter || ctrType == ECatboostCPPExportModelCtrType::FeatureFreq) {
                    const std::vector<int>& ctrTotal = learnCtr.CtrTotal;
                    const int denominator = learnCtr.CounterDenominator;
                    result[resultIdx] = ctr.Calc(ctrTotal[bucket], denominator);
                } else if (ctrType == ECatboostCPPExportModelCtrType::Buckets) {
                    auto ctrIntArray = learnCtr.CtrTotal;
                    const int targetClassesCount = learnCtr.TargetClassesCount;
                    int goodCount = 0;
                    int totalCount = 0;
                    int* ctrHistory = ctrIntArray.data() + bucket * targetClassesCount;
                    goodCount = ctrHistory[ctr.TargetBorderIdx];
                    for (int classId = 0; classId < targetClassesCount; ++classId) {
                        totalCount += ctrHistory[classId];
                    }
                    result[resultIdx] = ctr.Calc(goodCount, totalCount);
                } else {
                    auto ctrIntArray = learnCtr.CtrTotal;
                    const int targetClassesCount = learnCtr.TargetClassesCount;

                    if (targetClassesCount > 2) {
                        int goodCount = 0;
                        int totalCount = 0;
                        int* ctrHistory = ctrIntArray.data() + bucket * targetClassesCount;
                        for (int classId = 0; classId < ctr.TargetBorderIdx + 1; ++classId) {
                            totalCount += ctrHistory[classId];
                        }
                        for (int classId = ctr.TargetBorderIdx + 1; classId < targetClassesCount; ++classId) {
                            goodCount += ctrHistory[classId];
                        }
                        totalCount += goodCount;
                        result[resultIdx] = ctr.Calc(goodCount, totalCount);
                    } else {
                        const int* ctrHistory = &ctrIntArray[bucket * 2];
                        result[resultIdx] = ctr.Calc(ctrHistory[1], ctrHistory[0] + ctrHistory[1]);
                    }
                }
            }
            resultIdx += 1;
        }
    }
}

static int GetHash(const std::string& catFeature, const std::unordered_map<std::string, int>& catFeatureHashes) {
    const auto keyValue = catFeatureHashes.find(catFeature);
    if (keyValue != catFeatureHashes.end()) {
        return keyValue->second;
    } else {
        return 0x7fFFffFF;
    }
}

/* Model applicator */
double ApplyCatboostModel(
    const std::vector<float>& floatFeatures,
    const std::vector<std::string>& catFeatures) {
    const struct CatboostModel& model = CatboostModelStatic;

    assert(floatFeatures.size() == model.FloatFeatureCount);
    assert(catFeatures.size() == model.CatFeatureCount);

    /* Binarize features */
    std::vector<unsigned char> binaryFeatures(model.BinaryFeatureCount, 0);
    unsigned int binFeatureIndex = 0;
    {
        /* Binarize float features */
        for (size_t i = 0; i < model.FloatFeatureBorders.size(); ++i) {
            if (!model.FloatFeatureBorders[i].empty()) {
                for (const float border : model.FloatFeatureBorders[i]) {
                    binaryFeatures[binFeatureIndex] += (unsigned char) (floatFeatures[i] > border);
                }
                ++binFeatureIndex;
            }
        }
    }

    std::vector<int> transposedHash(model.CatFeatureCount);
    for (size_t i = 0; i < model.CatFeatureCount; ++i) {
        transposedHash[i] = GetHash(catFeatures[i], CatFeatureHashes);
    }

    if (model.OneHotCatFeatureIndex.size() > 0) {
        /* Binarize one hot cat features */
        std::unordered_map<int, int> catFeaturePackedIndexes;
        for (unsigned int i = 0; i < model.CatFeatureCount; ++i) {
            catFeaturePackedIndexes[model.CatFeaturesIndex[i]] = i;
        };
        for (unsigned int i = 0; i < model.OneHotCatFeatureIndex.size(); ++i) {
            const auto catIdx = catFeaturePackedIndexes.at(model.OneHotCatFeatureIndex[i]);
            const auto hash = transposedHash[catIdx];
            if (!model.OneHotHashValues[i].empty()) {
                for (unsigned int borderIdx = 0; borderIdx < model.OneHotHashValues[i].size(); ++borderIdx) {
                    binaryFeatures[binFeatureIndex] |=
                        (unsigned char) (hash == model.OneHotHashValues[i][borderIdx]) * (borderIdx + 1);
                }
                ++binFeatureIndex;
            }
        }
    }

    if (model.modelCtrs.UsedModelCtrsCount > 0) {
        /* Binarize CTR cat features */
        std::vector<float> ctrs(model.modelCtrs.UsedModelCtrsCount);
        CalcCtrs(model.modelCtrs, binaryFeatures, transposedHash, ctrs);

        for (size_t i = 0; i < model.CtrFeatureBorders.size(); ++i) {
            for (const float border : model.CtrFeatureBorders[i]) {
                binaryFeatures[binFeatureIndex] += (unsigned char)(ctrs[i] > border);
            }
            ++binFeatureIndex;
        }
    }

    /* Extract and sum values from trees */
    double result = 0.0;
    const unsigned int* treeSplitsPtr = model.TreeSplits.data();
    const double* leafValuesPtr = model.LeafValues;
    size_t treePtr = 0;
    for (unsigned int treeId = 0; treeId < model.TreeCount; ++treeId) {
        const unsigned int currentTreeDepth = model.TreeDepth[treeId];
        unsigned int index = 0;
        for (unsigned int depth = 0; depth < currentTreeDepth; ++depth) {
            const unsigned char borderVal = model.TreeSplitIdxs[treePtr + depth];
            const unsigned int featureIndex = model.TreeSplitFeatureIndex[treePtr + depth];
            const unsigned char xorMask = model.TreeSplitXorMask[treePtr + depth];
            index |= ((binaryFeatures[featureIndex] ^ xorMask) >= borderVal) << depth;
        }
        result += leafValuesPtr[index];
        treeSplitsPtr += currentTreeDepth;
        leafValuesPtr += (1 << currentTreeDepth);
        treePtr += currentTreeDepth;
    }
    return model.Scale * result + model.Bias;
}
