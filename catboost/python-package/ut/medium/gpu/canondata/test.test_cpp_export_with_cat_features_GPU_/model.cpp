#include <cassert>
#include <string>
#include <vector>
#include <unordered_map>

typedef unsigned long long int TCatboostCPPExportModelCtrBaseHash;

enum class ECatboostCPPExportModelCtrType {
    Borders,
    Buckets,
    BinarizedTargetMeanValue,
    FloatTargetMeanValue,
    Counter,
    FeatureFreq,
    CtrTypesCount
};

struct TCatboostCPPExportModelCtr {
    TCatboostCPPExportModelCtrBaseHash BaseHash;
    ECatboostCPPExportModelCtrType BaseCtrType;
    int TargetBorderIdx = 0;
    float PriorNum = 0.0f;
    float PriorDenom = 1.0f;
    float Shift = 0.0f;
    float Scale = 1.0f;

    inline float Calc(float countInClass, float totalCount) const {
        float ctr = (countInClass + PriorNum) / (totalCount + PriorDenom);
        return (ctr + Shift) * Scale;
    }
};

struct TCatboostCPPExportFloatSplit {
    int FloatFeature = 0;
    float Split = 0.f;
};

struct TCatboostCPPExportOneHotSplit {
    int CatFeatureIdx = 0;
    int Value = 0;
};

struct TCatboostCPPExportBinFeatureIndexValue {
    unsigned int BinIndex = 0;
    bool CheckValueEqual = 0;
    unsigned char Value = 0;
};

struct TCatboostCPPExportCtrMeanHistory {
    float Sum;
    int Count;
};

struct TCatboostCPPExportCtrValueTable {
    std::unordered_map<TCatboostCPPExportModelCtrBaseHash, unsigned int> IndexHashViewer;
    int TargetClassesCount;
    int CounterDenominator;
    std::vector<TCatboostCPPExportCtrMeanHistory> CtrMeanHistory;
    std::vector<int> CtrTotal;
    const unsigned int* ResolveHashIndex(TCatboostCPPExportModelCtrBaseHash hash) const {
        auto search = IndexHashViewer.find(hash);
        if (search == IndexHashViewer.end()) {
            return NULL;
        }
        return &search->second;
    }
};

struct TCatboostCPPExportCtrData {
    std::unordered_map<TCatboostCPPExportModelCtrBaseHash, TCatboostCPPExportCtrValueTable> LearnCtrs;
};

struct TCatboostCPPExportCompressedModelCtr {
    struct TCatboostCPPExportProjection {
        std::vector<int> transposedCatFeatureIndexes;
        std::vector<TCatboostCPPExportBinFeatureIndexValue> binarizedIndexes;
    } Projection;
    std::vector<TCatboostCPPExportModelCtr> ModelCtrs;
};

struct TCatboostCPPExportModelCtrs {
    unsigned int UsedModelCtrsCount;
    std::vector<TCatboostCPPExportCompressedModelCtr> CompressedModelCtrs;
    TCatboostCPPExportCtrData CtrData;
};

/* Model data */
static const struct CatboostModel {
    CatboostModel() {};
    unsigned int FloatFeatureCount = 6;
    unsigned int CatFeatureCount = 11;
    unsigned int BinaryFeatureCount = 34;
    unsigned int TreeCount = 20;
    std::vector<std::vector<float>> FloatFeatureBorders = {
        {41.5, 56, 58.5, 61.5},
        {51773, 160753.5, 175345.5, 188654.5, 200721, 202819.5, 205755, 228542.5, 260912, 303732.5, 325462},
        {9.5, 10.5, 12.5, 13.5},
        {3280},
        {},
        {44.5, 46.5}
    };
    std::vector<unsigned int> TreeDepth = {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6};
    std::vector<unsigned int> TreeSplits = {52, 54, 36, 42, 60, 57, 30, 46, 76, 38, 86, 33, 27, 0, 72, 49, 56, 80, 53, 16, 64, 71, 25, 84, 28, 18, 78, 70, 6, 14, 68, 73, 74, 19, 58, 22, 3, 37, 53, 2, 84, 35, 65, 27, 62, 76, 35, 51, 21, 75, 22, 85, 10, 14, 19, 59, 79, 65, 28, 77, 4, 30, 70, 17, 9, 83, 19, 21, 23, 67, 74, 7, 19, 50, 24, 70, 32, 43, 29, 3, 72, 36, 55, 12, 19, 69, 15, 4, 8, 41, 81, 39, 66, 71, 61, 21, 4, 40, 48, 13, 5, 45, 82, 86, 63, 11, 20, 71, 69, 44, 1, 31, 53, 17, 44, 19, 47, 26, 86, 34};
    std::vector<unsigned char> TreeSplitIdxs = {3, 1, 1, 3, 2, 1, 2, 3, 1, 1, 1, 2, 2, 1, 1, 3, 2, 2, 1, 2, 3, 1, 3, 2, 1, 4, 1, 2, 3, 11, 4, 1, 1, 1, 2, 255, 4, 2, 1, 3, 2, 4, 1, 2, 1, 1, 4, 2, 2, 2, 255, 3, 7, 11, 1, 1, 1, 1, 1, 2, 1, 2, 2, 3, 6, 1, 1, 2, 1, 3, 1, 4, 1, 1, 2, 2, 1, 4, 1, 4, 1, 1, 1, 9, 1, 1, 1, 1, 5, 2, 3, 2, 2, 1, 3, 2, 1, 1, 2, 10, 2, 2, 4, 1, 2, 8, 1, 1, 1, 1, 2, 3, 1, 3, 1, 1, 1, 1, 1, 3};
    std::vector<unsigned short> TreeSplitFeatureIndex = {16, 18, 11, 13, 21, 20, 9, 14, 29, 12, 33, 10, 7, 0, 26, 15, 19, 31, 17, 2, 22, 25, 6, 32, 8, 2, 30, 24, 1, 1, 23, 27, 28, 3, 20, 5, 0, 11, 17, 0, 32, 10, 23, 7, 22, 29, 10, 16, 4, 28, 5, 32, 1, 1, 3, 21, 31, 23, 8, 29, 1, 9, 24, 2, 1, 32, 3, 4, 6, 23, 28, 1, 3, 16, 6, 24, 10, 13, 9, 0, 26, 11, 19, 1, 3, 24, 2, 1, 1, 13, 31, 12, 23, 25, 21, 4, 1, 13, 15, 1, 1, 14, 31, 33, 22, 1, 4, 25, 24, 14, 0, 9, 17, 2, 14, 3, 15, 7, 33, 10};
    std::vector<unsigned char> TreeSplitXorMask = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    std::vector<unsigned int> CatFeaturesIndex = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::vector<unsigned int> OneHotCatFeatureIndex = {9};
    std::vector<std::vector<int>> OneHotHashValues = {
        {-1291328762}
    };
    std::vector<std::vector<float>> CtrFeatureBorders = {
        {0.381648958f, 0.763297915f, 0.817819178f},
        {0.203571424f, 0.255357146f},
        {0.5f},
        {0.0294117667f, 0.0539215691f, 0.0637254938f},
        {0.34375f, 0.515625f, 0.6875f, 0.744791687f},
        {0.471354157f, 0.515625f},
        {0.475000024f, 0.8125f},
        {0.0735294148f, 0.142156869f, 0.191176474f, 0.235294133f},
        {0.243243247f, 0.547297299f, 0.608108103f},
        {0.342905402f, 0.471621633f, 0.686148643f},
        {0.4375f, 0.700000048f, 0.925000072f},
        {0.387254894f},
        {0.461538464f},
        {0.516826928f, 0.783653855f},
        {0.84375f, 0.9375f},
        {0.0147058833f, 0.102941178f, 0.117647067f},
        {0.417613626f, 0.477272719f, 0.596590877f},
        {0.284801126f, 0.551136374f, 0.657670498f, 0.764204562f},
        {0.4375f, 0.578125f},
        {0.284313738f},
        {0.744791687f},
        {0.700520813f},
        {0.7421875f, 0.8828125f},
        {0.0882352963f, 0.460784316f},
        {0.0537280701f},
        {0.65625f, 0.734375f, 0.838541687f, 0.890625f},
        {0.791666687f, 0.833333373f, 0.854166687f},
        {0.0147058833f}
    };

    /* Aggregated array of leaf values for trees. Each tree is represented by a separate line: */
    double LeafValues[1280] = {
        0, 0, 0, 0, 0, 0, 0, 0.04131381958723068, 0, 0, 0, 0, 0, 0, 0.02065690979361534, 0.03305105865001678, -0.185442715883255, 0.04131381958723068, -0.074177086353302, 0, -0.08513151109218597, 0.03305105865001678, -0.074177086353302, 0.0516422800719738, 0, 0, 0, 0, -0.08513151109218597, 0.04721579328179359, 0.04721579328179359, 0.04131381958723068, 0, 0, 0, 0.02065690979361534, -0.04281614348292351, 0.04131381958723068, 0.03305105865001678, 0.05508509278297424, 0, 0, 0, 0, 0, 0.04131381958723068, -0.1135086789727211, 0.0516422800719738, 0, 0, -0.074177086353302, 0.02065690979361534, 0.02065690979361534, -0.02190884575247765, -0.08513151109218597, 0.05783934518694878, 0, 0, 0, 0, 0, 0.02065690979361534, -0.008877351880073547, 0.06009282916784286,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -0.07011666148900986, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.05659081041812897, -0.0934772863984108, 0, 0.02678232640028, 0, 0.01617924496531487, 0, 0.03608988225460052, -0.1065970435738564, -0.009830637834966183, 0, 0.03897422179579735, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.04077066853642464, 0.01543296780437231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02599873766303062, -0.1268917471170425, -0.01020821928977966, 0.026625607162714, 0.05954465642571449,
        -0.06346721947193146, 0.02186798490583897, 0, -0.04738333076238632, 0, 0, 0, 0, 0, 0.03976725414395332, 0, 0.03184228762984276, 0, 0.01109209470450878, 0, 0, 0, 0.03235367313027382, -0.06130156666040421, 0.0224668737500906, 0, 0, 0, 0, 0, 0.01323444955050945, 0, 0.009786107577383518, 0, 0.01396939903497696, 0, 0, 0, -0.02510018832981586, -0.08805181831121445, -0.1166439205408096, 0, 0, -0.05565853044390678, 0.01770704425871372, 0.0141990790143609, 0.03713789209723473, 0, 0.03411965072154999, 0, 0.01109209470450878, 0, 0.01877901889383793, 0, -0.000783378432970494, -0.08435922861099243, 0.006943872664123774, 0, 0.01845482550561428, 0, -0.06828144937753677, 0, 0.03556502610445023, 0, 0.01506889890879393, 0, 0.02186281979084015, 0, 0.02720542624592781,
        0.0196591280400753, -0.04337882995605469, 0.01989560201764107, -0.04016227275133133, 0.03642945364117622, 0, 0.02656614780426025, 0, 0, -0.04141746088862419, 0, -0.08172186464071274, 0, 0, 0, -0.04764439538121223, 0, 0.01952767930924892, 0.02872041054069996, 0.0354633629322052, 0.02755068242549896, 0, 0.02553698047995567, 0, 0, 0.01164116989821196, 0, -0.123045340180397, 0, 0, 0, 0, 0.02117681503295898, 0, 0, -0.06667356193065643, 0.007296680472791195, 0, 0.0126446234062314, 0, 0, 0, 0, -0.0574483722448349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01008070167154074, 0, 0, 0.01797186024487019, 0, -0.06534996628761292, 0, 0, 0, 0,
        0, -0.05915256962180138, 0, 0, -0.05156030505895615, 0.0115058608353138, 0, -0.03367675095796585, 0, 0.02554642222821712, 0, -0.06035063788294792, -0.03926504403352737, 0.03077700175344944, 0, -0.04085542634129524, 0, 0.01626751571893692, 0, 0, -0.06408954411745071, -0.01792641542851925, 0, -0.07071369141340256, 0, 0, 0, 0, -0.03124383091926575, 0.01718113757669926, -0.02583763934671879, -0.0269465446472168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.05200031027197838, 0, 0, 0, 0, 0.02426403202116489, 0, 0.03789317607879639, 0, 0.01358912419527769, 0, 0, 0.00660470686852932, 0.02588101476430893, 0, 0,
        0.006442660000175238, 0.005978354252874851, 0.03034187108278275, 0.01313022803515196, 0, 0, 0, 0.0147296441718936, 0, 0, 0, 0, 0, 0, 0, 0, 0.01558615174144506, 0.007361867930740118, -0.03554138168692589, 0.01229951251298189, -0.05462734401226044, 0, 0.01699188351631165, 0.01371169928461313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.003566106082871556, -0.006424591410905123, 0.0101435324177146, 0.02373485825955868, 0.004842310678213835, -0.06571735441684723, 0.005470304749906063, 0, 0, -0.09878744930028915, 0, 0, 0, -0.06059054285287857, 0, 0.04924940690398216, 0.004389683250337839, -0.01976612769067287, 0.005152258556336164, -0.07038753479719162, 0.01427213381975889, 0.01707281544804573, 0.01106005348265171, 0, 0, 0, 0, 0, 0, -0.05034130066633224, 0,
        0.02050361782312393, 0, 0.009068390354514122, 0, -0.05629957094788551, 0, 0.06013459712266922, 0, 0.02546804770827293, 0, 0.008257489651441574, 0, 0, 0, 0, 0, 0.007629892788827419, 0, 0.008884094655513763, 0, -0.07187247276306152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.007969330996274948, 0, 0, 0, -0.0269211083650589, 0, 0, 0, 0.002700933953747153, 0.01547329593449831, 0, 0, 0.01616659574210644, -0.06665383279323578, 0, 0, 0.01070827525109053, 0, 0, 0, -0.01857396028935909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.03357782587409019, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03600814938545227, 0.02280686981976032, 0, -0.05204131454229355, 0, -0.02505647391080856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03922083973884583, 0, -0.07013300061225891, 0, -0.02257178537547588, 0, 0, 0, 0, 0, 0, 0, 0.009550689719617367, 0, 0, 0, -0.003884447272866964, 0, 0.009593802504241467, 0, 0.01039589662104845, 0, 0, 0, 0, 0, 0, 0, 0.003627335419878364, 0, 0, 0, 0, 0, 0, 0, 0.007843200117349625,
        0.004462147131562233, 0.01225246023386717, 0.01333524659276009, 0, 0.007184655405580997, -0.07957985997200012, 0.03967205062508583, 0, 0.004083433654159307, 0, -0.0422624833881855, 0, -0.04027247056365013, 0, 0.006214630324393511, 0, 0.003857809817418456, 0, -0.0004704614693764597, 0, -0.001787089975550771, -0.04238221049308777, 0.02100511267781258, 0, 0, 0, 0, 0, 0.02485905401408672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.003785684006288648, 0, 0.01245198398828506, 0, 0.02416453324258327, 0.0241856649518013, 0.001859258278273046, 0, 0.00574183464050293, 0, 0, 0, 0.007274698000401258, 0, -0.03039350733160973, 0,
        -0.02751116827130318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.007457165513187647, 0, 0.001995354657992721, 0, 0.0232666339725256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.04093455895781517, -0.009745126590132713, 0, 0, 0.02717485651373863, 0, 0, 0, 0.01075204834342003, 0, 0, 0, 0.00510192196816206, -0.03645327314734459, 0, 0, 0.005729137919843197, -0.07529208809137344,
        0, -0.03239146620035172, -0.05299171805381775, 0.0339733362197876, 0, -0.006590924225747585, -0.002626953413709998, 0.008975879289209843, 0, 0, 0, -0.03262943029403687, 0, -0.01954791508615017, 0, 0.016035545617342, 0, -0.0162263885140419, 0, 0.04628978297114372, 0, 0.003320119576528668, 0, -0.0006972190458327532, 0, -0.008820956572890282, 0, 0.02025149576365948, 0, 0, 0, 0.00509587349370122, 0, 0, 0, -0.03064670972526073, 0, 0, 0, -0.0005430112942121923, 0, 0, 0, -0.03299626335501671, 0, 0.00491808308288455, 0, -0.03873839601874352, 0, 0, 0, -0.002307552844285965, 0, -0.02360653132200241, 0, -0.004884280264377594, 0, 0, 0, 0, 0, 0, 0, -0.03058704547584057,
        -0.03856208920478821, 0, 0, 0, 0.03737088292837143, -0.02986709401011467, -0.05275116860866547, 0, 0.01062209624797106, -0.007082602940499783, 0, 0, -0.001575232716277242, 0, 0.01430558692663908, 0, -0.03506467863917351, 0, -0.0221472829580307, 0, 0.04950821027159691, -0.01973515748977661, 0, 0, 0, 0, 0, 0, -0.001054510474205017, 0, 0, 0, 0.02773881889879704, 0, 0, 0, 0.04730155691504478, -0.04517734050750732, 0.00766894593834877, 0, 0.008366416208446026, 0, 0, 0, -0.001922051538713276, 0, 0.01347925234586, 0, -0.03149673342704773, 0, -0.02739132009446621, -0.007984430529177189, 0.0099506676197052, -0.02774035930633545, -0.06124024093151093, 0, -0.003656236920505762, 0, 0.005337168462574482, 0, -0.001972340978682041, 0, -0.001619205926544964, 0,
        0.01300300750881433, 0, -0.01244539581239223, 0, 0, 0, -0.01915663294494152, 0, 0, 0, -0.02022425644099712, -0.00641093123704195, 0, 0, 0.003752124961465597, 0, 0, 0, 0.02057702280580997, -0.02586949057877064, 0.009282742626965046, 0, -0.00612519308924675, -0.03591861575841904, 0, 0, 0.006866463925689459, 0, 0, 0, -0.0003728492883965373, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.002044249325990677, 0, -0.02566265873610973, 0, -0.01170061342418194, 0, 0.005862906575202942, 0, 0.05218571424484253, -0.04089299589395523, 0, 0, -0.00759664224460721, 0, 0, 0, -0.002575450111180544, 0,
        -0.005802957341074944, 0.005115834530442953, 0, 0, 0, 0, 0, 0, 0, -0.007625808008015156, 0, -0.01445728726685047, 0, 0.002141936449334025, 0, 0, 0, -0.01968575827777386, 0, 0, 0, 0, 0, 0, -0.0232289656996727, 0.003053789958357811, 0, 0, 0, -0.01160258147865534, 0, -0.009050487540662289, 0, -0.005763007327914238, 0, 0, 0, -0.008355745114386082, 0, 0, 0, 0.006128959823399782, 0, 0, 0, 0.00154526496771723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0009796223603188992, 0, -0.001147218281403184, 0, 0.004878627136349678, 0, 0,
        0, 0, -0.00248268898576498, 0, 0, 0, 0, 0, 0, 0, 0.007356222253292799, 0, 0, 0, -0.01869942061603069, -0.005252639763057232, 0, 0, 0, 0, 0, 0, 0, 0, 0.01390775851905346, 0, 0.01533458568155766, 0, 0, 0, -0.008799494244158268, 0, 0, 0, 0, 0, 0, 0, -0.04267242550849915, 0, 0, 0, 1.357423843728611e-05, 0, 0, 0, 0.02069636061787605, -0.03920150175690651, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.008687188848853111, -0.03629176318645477, 0, 0, -0.01042847521603107, -0.005063530988991261,
        0.008203106001019478, 0, 0.004542906768620014, 0, -0.002078976482152939, 0, -0.001034804387018085, 0, 0, 0, 0.0008984684245660901, 0, 0, 0, 0.007503936998546124, 0, 0.008184978738427162, 0, -0.01067518722265959, 0, 0.006453109439462423, 0, -0.003107525408267975, 0, -0.004381987266242504, 0, 0.003179721301421523, 0, 0, 0, 0.02375327423214912, 0, 0, 0, 0, 0, 0, 0, 0.009002106264233589, 0, -0.01448880042880774, 0, -0.04600347951054573, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.008657870814204216, 0, 0.005126961972564459, 0, -0.01504693273454905, 0, -0.004583336412906647, 0, -0.006728845648467541, 0, -0.02292980812489986, 0,
        0, 0, -0.03426293283700943, 0.00159677246119827, 0, 0.01367736887186766, 0, -0.003357605310156941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01270348392426968, 0, 0.006276619154959917, 0, -0.01479823235422373, 0, -0.03233825042843819, 0, 0.001321793883107603, 0, 0.02388438954949379, 0, 0.01173515059053898, 0, -0.0149031775072217, 0, 0, 0, 0, -0.002149109728634357, -0.003561275778338313, 0, -0.009955631569027901, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001612583990208805, 0, 0.004796706140041351, 0, 0, 0, 0, 0, 0.002398556564003229, 0, 0.000865921494551003,
        0, 0, -0.007489053066819906, 0, 0.002681359183043242, 0, -0.001507168635725975, 0, 0, 0, 0.009109399281442165, 0, 0, 0, 0.0002966623287647963, 0, 0, 0, 0.004722595680505037, 0, 0, 0, 0.01210420019924641, 0, 0, 0, 0, 0, 0, 0, -0.001102551934309304, 0, -0.005237665958702564, 0, 0.02780386619269848, 0, 0, 0, -0.02831743098795414, 0, -0.02288680337369442, 0, 0.00967007502913475, 0, 0, 0, 0.01167650055140257, 0, 0, 0, -0.03973980247974396, 0, 0, 0, -0.02929593250155449, 0, 0, 0, 0.04083215445280075, 0, 0, 0, -0.01745590195059776, 0,
        0, 0, 0, -0.001979236491024494, 0, 0.003662166418507695, 0, 0.01044787373393774, 0, 0.00509006017819047, 0, -0.001525582280009985, 0, 0, 0, 0.0006260851514525712, 0, 0, 0, -0.03313414752483368, 0, 0, 0, -0.01952399685978889, 0.007210287265479565, -0.02071635611355305, 0, 0.00776244979351759, 0, 0, 0, 0.01517971977591515, 0, 0, 0, 0.004910349380224943, 0, 0, 0, 0, 0, 0, 0, 0.004431388806551695, 0, 0, 0, 0.007677515037357807, 0, -0.009497513994574547, 0, -0.00537498202174902, 0, 0, 0, -0.0009752325131557882, 0, -0.003894249675795436, 0, -0.01141579449176788, 0, 0, 0, -0.006666285917162895,
        0, 0, 0, 0, 0, 0, 0, 0, -0.01875174231827259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.007629876956343651, 0, 0, 0.01247670315206051, 0, 0, 0, -0.009240387938916683, 0.005940524395555258, 0, -0.004865251015871763, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01301760785281658, 0, -0.019517807289958, 0, 0, 0, 0, 0, -0.01736369915306568, 0, -0.0008827472920529544, 0, 0, 0, 0, 0.003857829375192523, -0.000476747693028301, 0, -0.0315401665866375
    };
    double Scale = 1;
    double Bias = 0.7821782231;
    struct TCatboostCPPExportModelCtrs modelCtrs = {
        .UsedModelCtrsCount = 28,
        .CompressedModelCtrs = {
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {3},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471478ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471478ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471478ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 11154939068695130472ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {4},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471473ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471473ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471473ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 11154939068695130479ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {5},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471472ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471472ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471472ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 11154939068695130478ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {6},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471475ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471475ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471475ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 11154939068695130477ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {7},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471474ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471474ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471474ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 11154939068695130476ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {8},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471469ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471469ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471469ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 11154939068695130483ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            },
            {
                .Projection = {
                    .transposedCatFeatureIndexes = {10},
                    .binarizedIndexes = {},
                },
                .ModelCtrs = {
                    {.BaseHash = 768791580653471471ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471471ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 0.5, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 768791580653471471ull, .BaseCtrType = ECatboostCPPExportModelCtrType::Borders, .TargetBorderIdx = 0, .PriorNum = 1, .PriorDenom = 1, .Shift = 0, .Scale = 1},
                    {.BaseHash = 11154939068695130481ull, .BaseCtrType = ECatboostCPPExportModelCtrType::FeatureFreq, .TargetBorderIdx = 0, .PriorNum = 0, .PriorDenom = 1, .Shift = 0, .Scale = 1}
                }
            }
        },
        .CtrData = {
            .LearnCtrs = {
                {
                    768791580653471469ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {8473802870189803490ull, 0}, {7071392469244395075ull, 2}, {18446744073709551615ull, 0}, {8806438445905145973ull, 3}, {619730330622847022ull, 1}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 2.94273e-44, .Count = 61}, {.Sum = 0, .Count = 12}, {.Sum = 1.4013e-45, .Count = 5}, {.Sum = 0, .Count = 1}},
                        .CtrTotal = {21, 61, 0, 12, 1, 5, 0, 1}
                    }
                },
                {
                    768791580653471471ull,
                    {
                        .IndexHashViewer = {{2136296385601851904ull, 0}, {7428730412605434673ull, 2}, {9959754109938180626ull, 6}, {14256903225472974739ull, 1}, {8056048104805248435ull, 3}, {18446744073709551615ull, 0}, {12130603730978457510ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {10789443546307262781ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 2.8026e-44, .Count = 73}, {.Sum = 0, .Count = 1}, {.Sum = 0, .Count = 2}, {.Sum = 0, .Count = 2}, {.Sum = 0, .Count = 1}, {.Sum = 1.4013e-45, .Count = 0}, {.Sum = 1.4013e-45, .Count = 0}},
                        .CtrTotal = {20, 73, 0, 1, 0, 2, 0, 2, 0, 1, 1, 0, 1, 0}
                    }
                },
                {
                    768791580653471472ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {13987540656699198946ull, 3}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18089724839685297862ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {10353740403438739754ull, 1}, {3922001124998993866ull, 2}, {13686716744772876732ull, 4}, {18293943161539901837ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 0, .Count = 13}, {.Sum = 3.08286e-44, .Count = 20}, {.Sum = 0, .Count = 37}, {.Sum = 0, .Count = 2}, {.Sum = 0, .Count = 4}, {.Sum = 0, .Count = 3}},
                        .CtrTotal = {0, 13, 22, 20, 0, 37, 0, 2, 0, 4, 0, 3}
                    }
                },
                {
                    768791580653471473ull,
                    {
                        .IndexHashViewer = {{7537614347373541888ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {5903587924673389870ull, 2}, {18278593470046426063ull, 6}, {10490918088663114479ull, 3}, {18446744073709551615ull, 0}, {407784798908322194ull, 7}, {5726141494028968211ull, 1}, {1663272627194921140ull, 10}, {8118089682304925684ull, 8}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {15431483020081801594ull, 9}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {1403990565605003389ull, 5}, {3699047549849816830ull, 11}, {14914630290137473119ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 9.80909e-45, .Count = 3}, {.Sum = 1.4013e-45, .Count = 3}, {.Sum = 5.60519e-45, .Count = 24}, {.Sum = 0, .Count = 3}, {.Sum = 5.60519e-45, .Count = 16}, {.Sum = 4.2039e-45, .Count = 16}, {.Sum = 0, .Count = 4}, {.Sum = 0, .Count = 5}, {.Sum = 1.4013e-45, .Count = 1}, {.Sum = 0, .Count = 1}, {.Sum = 0, .Count = 3}, {.Sum = 2.8026e-45, .Count = 0}},
                        .CtrTotal = {7, 3, 1, 3, 4, 24, 0, 3, 4, 16, 3, 16, 0, 4, 0, 5, 1, 1, 0, 1, 0, 3, 2, 0}
                    }
                },
                {
                    768791580653471474ull,
                    {
                        .IndexHashViewer = {{3607388709394294015ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18356215166324018775ull, 2}, {18365206492781874408ull, 1}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {14559146096844143499ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {11416626865500250542ull, 3}, {5549384008678792175ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 0, .Count = 22}, {.Sum = 2.8026e-45, .Count = 3}, {.Sum = 0, .Count = 14}, {.Sum = 2.66247e-44, .Count = 17}, {.Sum = 0, .Count = 22}, {.Sum = 1.4013e-45, .Count = 1}},
                        .CtrTotal = {0, 22, 2, 3, 0, 14, 19, 17, 0, 22, 1, 1}
                    }
                },
                {
                    768791580653471475ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {14452488454682494753ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {1388452262538353895ull, 9}, {8940247467966214344ull, 1}, {4415016594903340137ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {41084306841859596ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {8678739366408346384ull, 2}, {18446744073709551615ull, 0}, {4544226147037566482ull, 11}, {14256903225472974739ull, 8}, {16748601451484174196ull, 7}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {5913522704362245435ull, 6}, {1466902651052050075ull, 10}, {2942073219785550491ull, 12}, {15383677753867481021ull, 3}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 8.40779e-45, .Count = 10}, {.Sum = 2.8026e-45, .Count = 8}, {.Sum = 0, .Count = 6}, {.Sum = 2.8026e-45, .Count = 14}, {.Sum = 1.4013e-45, .Count = 4}, {.Sum = 2.8026e-45, .Count = 9}, {.Sum = 0, .Count = 11}, {.Sum = 0, .Count = 3}, {.Sum = 1.4013e-45, .Count = 5}, {.Sum = 9.80909e-45, .Count = 6}, {.Sum = 0, .Count = 2}, {.Sum = 1.4013e-45, .Count = 0}, {.Sum = 0, .Count = 1}},
                        .CtrTotal = {6, 10, 2, 8, 0, 6, 2, 14, 1, 4, 2, 9, 0, 11, 0, 3, 1, 5, 7, 6, 0, 2, 1, 0, 0, 1}
                    }
                },
                {
                    768791580653471478ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {15379737126276794113ull, 5}, {18446744073709551615ull, 0}, {14256903225472974739ull, 3}, {18048946643763804916ull, 1}, {2051959227349154549ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {7024059537692152076ull, 6}, {18446744073709551615ull, 0}, {15472181234288693070ull, 2}, {8864790892067322495ull, 0}},
                        .TargetClassesCount = 2,
                        .CounterDenominator = 0,
                        .CtrMeanHistory = {{.Sum = 1.4013e-44, .Count = 58}, {.Sum = 0, .Count = 4}, {.Sum = 1.4013e-45, .Count = 6}, {.Sum = 1.4013e-45, .Count = 5}, {.Sum = 4.2039e-45, .Count = 6}, {.Sum = 2.8026e-45, .Count = 0}, {.Sum = 7.00649e-45, .Count = 0}},
                        .CtrTotal = {10, 58, 0, 4, 1, 6, 1, 5, 3, 6, 2, 0, 5, 0}
                    }
                },
                {
                    11154939068695130472ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {15379737126276794113ull, 5}, {18446744073709551615ull, 0}, {14256903225472974739ull, 3}, {18048946643763804916ull, 1}, {2051959227349154549ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {7024059537692152076ull, 6}, {18446744073709551615ull, 0}, {15472181234288693070ull, 2}, {8864790892067322495ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 9.52883e-44, .Count = 4}, {.Sum = 9.80909e-45, .Count = 6}, {.Sum = 1.26117e-44, .Count = 2}},
                        .CtrTotal = {68, 4, 7, 6, 9, 2, 5}
                    }
                },
                {
                    11154939068695130476ull,
                    {
                        .IndexHashViewer = {{3607388709394294015ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18356215166324018775ull, 2}, {18365206492781874408ull, 1}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {14559146096844143499ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {11416626865500250542ull, 3}, {5549384008678792175ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 3.08286e-44, .Count = 5}, {.Sum = 1.96182e-44, .Count = 36}, {.Sum = 3.08286e-44, .Count = 2}},
                        .CtrTotal = {22, 5, 14, 36, 22, 2}
                    }
                },
                {
                    11154939068695130477ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {14452488454682494753ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {1388452262538353895ull, 9}, {8940247467966214344ull, 1}, {4415016594903340137ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {41084306841859596ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {8678739366408346384ull, 2}, {18446744073709551615ull, 0}, {4544226147037566482ull, 11}, {14256903225472974739ull, 8}, {16748601451484174196ull, 7}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {5913522704362245435ull, 6}, {1466902651052050075ull, 10}, {2942073219785550491ull, 12}, {15383677753867481021ull, 3}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 2.24208e-44, .Count = 10}, {.Sum = 8.40779e-45, .Count = 16}, {.Sum = 7.00649e-45, .Count = 11}, {.Sum = 1.54143e-44, .Count = 3}, {.Sum = 8.40779e-45, .Count = 13}, {.Sum = 2.8026e-45, .Count = 1}},
                        .CtrTotal = {16, 10, 6, 16, 5, 11, 11, 3, 6, 13, 2, 1, 1}
                    }
                },
                {
                    11154939068695130478ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {13987540656699198946ull, 3}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18089724839685297862ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {10353740403438739754ull, 1}, {3922001124998993866ull, 2}, {13686716744772876732ull, 4}, {18293943161539901837ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 1.82169e-44, .Count = 42}, {.Sum = 5.1848e-44, .Count = 2}, {.Sum = 5.60519e-45, .Count = 3}},
                        .CtrTotal = {13, 42, 37, 2, 4, 3}
                    }
                },
                {
                    11154939068695130479ull,
                    {
                        .IndexHashViewer = {{7537614347373541888ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {5903587924673389870ull, 2}, {18278593470046426063ull, 6}, {10490918088663114479ull, 3}, {18446744073709551615ull, 0}, {407784798908322194ull, 7}, {5726141494028968211ull, 1}, {1663272627194921140ull, 10}, {8118089682304925684ull, 8}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {15431483020081801594ull, 9}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {1403990565605003389ull, 5}, {3699047549849816830ull, 11}, {14914630290137473119ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 1.4013e-44, .Count = 4}, {.Sum = 3.92364e-44, .Count = 3}, {.Sum = 2.8026e-44, .Count = 19}, {.Sum = 5.60519e-45, .Count = 5}, {.Sum = 2.8026e-45, .Count = 1}, {.Sum = 4.2039e-45, .Count = 2}},
                        .CtrTotal = {10, 4, 28, 3, 20, 19, 4, 5, 2, 1, 3, 2}
                    }
                },
                {
                    11154939068695130481ull,
                    {
                        .IndexHashViewer = {{2136296385601851904ull, 0}, {7428730412605434673ull, 2}, {9959754109938180626ull, 6}, {14256903225472974739ull, 1}, {8056048104805248435ull, 3}, {18446744073709551615ull, 0}, {12130603730978457510ull, 5}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {10789443546307262781ull, 4}, {18446744073709551615ull, 0}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 1.30321e-43, .Count = 1}, {.Sum = 2.8026e-45, .Count = 2}, {.Sum = 1.4013e-45, .Count = 1}},
                        .CtrTotal = {93, 1, 2, 2, 1, 1, 1}
                    }
                },
                {
                    11154939068695130483ull,
                    {
                        .IndexHashViewer = {{18446744073709551615ull, 0}, {18446744073709551615ull, 0}, {8473802870189803490ull, 0}, {7071392469244395075ull, 2}, {18446744073709551615ull, 0}, {8806438445905145973ull, 3}, {619730330622847022ull, 1}, {18446744073709551615ull, 0}},
                        .TargetClassesCount = 0,
                        .CounterDenominator = 101,
                        .CtrMeanHistory = {{.Sum = 1.14906e-43, .Count = 12}, {.Sum = 8.40779e-45, .Count = 1}},
                        .CtrTotal = {82, 12, 6, 1}
                    }
                }
            }
        }
    };
} CatboostModelStatic;

static std::unordered_map<std::string, int> CatFeatureHashes = {
    {"Female", -2114564283},
    {"Protective-serv", -2075156126},
    {"Assoc-voc", -2029370604},
    {"Married-civ-spouse", -2019910086},
    {"Federal-gov", -1993066135},
    {"Transport-moving", -1903253868},
    {"Farming-fishing", -1888947309},
    {"Prof-school", -1742589394},
    {"Self-emp-inc", -1732053524},
    {"?", -1576664757},
    {"Handlers-cleaners", -1555793520},
    {"0", -1438285038},
    {"Philippines", -1437257447},
    {"Male", -1291328762},
    {"11th", -1209300766},
    {"Unmarried", -1158645841},
    {"Local-gov", -1105932163},
    {"Divorced", -993514283},
    {"Some-college", -870577664},
    {"Asian-Pac-Islander", -787966085},
    {"Sales", -760428919},
    {"Self-emp-not-inc", -661998850},
    {"Widowed", -651660490},
    {"Masters", -453513993},
    {"State-gov", -447941100},
    {"Doctorate", -434936054},
    {"White", -218697806},
    {"Own-child", -189887997},
    {"Amer-Indian-Eskimo", -86031875},
    {"Exec-managerial", -26537793},
    {"Husband", 60472414},
    {"Italy", 117615621},
    {"Not-in-family", 143014663},
    {"n", 239748506},
    {"Married-spouse-absent", 261588508},
    {"Prof-specialty", 369959660},
    {"Assoc-acdm", 475479755},
    {"Adm-clerical", 495735304},
    {"Bachelors", 556725573},
    {"HS-grad", 580496350},
    {"Craft-repair", 709691013},
    {"Other-relative", 739168919},
    {"Other-service", 786213683},
    {"9th", 840896980},
    {"Separated", 887350706},
    {"10th", 888723975},
    {"Mexico", 972041323},
    {"Hong", 995245846},
    {"1", 1121341681},
    {"Tech-support", 1150039955},
    {"Black", 1161225950},
    {"Canada", 1510821218},
    {"Wife", 1708186408},
    {"United-States", 1736516096},
    {"Never-married", 1959200218},
    {"Machine-op-inspct", 2039859473},
    {"7th-8th", 2066982375},
    {"Private", 2084267031},
};

static inline TCatboostCPPExportModelCtrBaseHash CalcHash(TCatboostCPPExportModelCtrBaseHash a, TCatboostCPPExportModelCtrBaseHash b) {
    const static constexpr TCatboostCPPExportModelCtrBaseHash MAGIC_MULT = 0x4906ba494954cb65ull;
    return MAGIC_MULT * (a + MAGIC_MULT * b);
}

static inline TCatboostCPPExportModelCtrBaseHash CalcHash(
    const std::vector<unsigned char>& binarizedFeatures,
    const std::vector<int>& hashedCatFeatures,
    const std::vector<int>& transposedCatFeatureIndexes,
    const std::vector<TCatboostCPPExportBinFeatureIndexValue>& binarizedFeatureIndexes) {
    TCatboostCPPExportModelCtrBaseHash result = 0;
    for (const int featureIdx : transposedCatFeatureIndexes) {
        auto valPtr = &hashedCatFeatures[featureIdx];
        result = CalcHash(result, (TCatboostCPPExportModelCtrBaseHash)valPtr[0]);
    }
    for (const auto& binFeatureIndex : binarizedFeatureIndexes) {
        const unsigned char* binFPtr = &binarizedFeatures[binFeatureIndex.BinIndex];
        if (!binFeatureIndex.CheckValueEqual) {
            result = CalcHash(result, (TCatboostCPPExportModelCtrBaseHash)(binFPtr[0] >= binFeatureIndex.Value));
        } else {
            result = CalcHash(result, (TCatboostCPPExportModelCtrBaseHash)(binFPtr[0] == binFeatureIndex.Value));
        }
    }
    return result;
}

static void CalcCtrs(const TCatboostCPPExportModelCtrs& modelCtrs,
                     const std::vector<unsigned char>& binarizedFeatures,
                     const std::vector<int>& hashedCatFeatures,
                     std::vector<float>& result) {
    TCatboostCPPExportModelCtrBaseHash ctrHash;
    size_t resultIdx = 0;

    for (size_t i = 0; i < modelCtrs.CompressedModelCtrs.size(); ++i) {
        auto& proj = modelCtrs.CompressedModelCtrs[i].Projection;
        ctrHash = CalcHash(binarizedFeatures, hashedCatFeatures,
                           proj.transposedCatFeatureIndexes, proj.binarizedIndexes);
        for (size_t j = 0; j < modelCtrs.CompressedModelCtrs[i].ModelCtrs.size(); ++j) {
            auto& ctr = modelCtrs.CompressedModelCtrs[i].ModelCtrs[j];
            auto& learnCtr = modelCtrs.CtrData.LearnCtrs.at(ctr.BaseHash);
            const ECatboostCPPExportModelCtrType ctrType = ctr.BaseCtrType;
            const unsigned int* bucketPtr = learnCtr.ResolveHashIndex(ctrHash);
            if (bucketPtr == NULL) {
                result[resultIdx] = ctr.Calc(0.f, 0.f);
            } else {
                unsigned int bucket = *bucketPtr;
                if (ctrType == ECatboostCPPExportModelCtrType::BinarizedTargetMeanValue || ctrType == ECatboostCPPExportModelCtrType::FloatTargetMeanValue) {
                    const TCatboostCPPExportCtrMeanHistory& ctrMeanHistory = learnCtr.CtrMeanHistory[bucket];
                    result[resultIdx] = ctr.Calc(ctrMeanHistory.Sum, ctrMeanHistory.Count);
                } else if (ctrType == ECatboostCPPExportModelCtrType::Counter || ctrType == ECatboostCPPExportModelCtrType::FeatureFreq) {
                    const std::vector<int>& ctrTotal = learnCtr.CtrTotal;
                    const int denominator = learnCtr.CounterDenominator;
                    result[resultIdx] = ctr.Calc(ctrTotal[bucket], denominator);
                } else if (ctrType == ECatboostCPPExportModelCtrType::Buckets) {
                    auto ctrIntArray = learnCtr.CtrTotal;
                    const int targetClassesCount = learnCtr.TargetClassesCount;
                    int goodCount = 0;
                    int totalCount = 0;
                    int* ctrHistory = ctrIntArray.data() + bucket * targetClassesCount;
                    goodCount = ctrHistory[ctr.TargetBorderIdx];
                    for (int classId = 0; classId < targetClassesCount; ++classId) {
                        totalCount += ctrHistory[classId];
                    }
                    result[resultIdx] = ctr.Calc(goodCount, totalCount);
                } else {
                    auto ctrIntArray = learnCtr.CtrTotal;
                    const int targetClassesCount = learnCtr.TargetClassesCount;

                    if (targetClassesCount > 2) {
                        int goodCount = 0;
                        int totalCount = 0;
                        int* ctrHistory = ctrIntArray.data() + bucket * targetClassesCount;
                        for (int classId = 0; classId < ctr.TargetBorderIdx + 1; ++classId) {
                            totalCount += ctrHistory[classId];
                        }
                        for (int classId = ctr.TargetBorderIdx + 1; classId < targetClassesCount; ++classId) {
                            goodCount += ctrHistory[classId];
                        }
                        totalCount += goodCount;
                        result[resultIdx] = ctr.Calc(goodCount, totalCount);
                    } else {
                        const int* ctrHistory = &ctrIntArray[bucket * 2];
                        result[resultIdx] = ctr.Calc(ctrHistory[1], ctrHistory[0] + ctrHistory[1]);
                    }
                }
            }
            resultIdx += 1;
        }
    }
}

static int GetHash(const std::string& catFeature, const std::unordered_map<std::string, int>& catFeatureHashes) {
    const auto keyValue = catFeatureHashes.find(catFeature);
    if (keyValue != catFeatureHashes.end()) {
        return keyValue->second;
    } else {
        return 0x7fFFffFF;
    }
}

/* Model applicator */
double ApplyCatboostModel(
    const std::vector<float>& floatFeatures,
    const std::vector<std::string>& catFeatures) {
    const struct CatboostModel& model = CatboostModelStatic;

    assert(floatFeatures.size() == model.FloatFeatureCount);
    assert(catFeatures.size() == model.CatFeatureCount);

    /* Binarize features */
    std::vector<unsigned char> binaryFeatures(model.BinaryFeatureCount, 0);
    unsigned int binFeatureIndex = 0;
    {
        /* Binarize float features */
        for (size_t i = 0; i < model.FloatFeatureBorders.size(); ++i) {
            if (!model.FloatFeatureBorders[i].empty()) {
                for (const float border : model.FloatFeatureBorders[i]) {
                    binaryFeatures[binFeatureIndex] += (unsigned char) (floatFeatures[i] > border);
                }
                ++binFeatureIndex;
            }
        }
    }

    std::vector<int> transposedHash(model.CatFeatureCount);
    for (size_t i = 0; i < model.CatFeatureCount; ++i) {
        transposedHash[i] = GetHash(catFeatures[i], CatFeatureHashes);
    }

    if (model.OneHotCatFeatureIndex.size() > 0) {
        /* Binarize one hot cat features */
        std::unordered_map<int, int> catFeaturePackedIndexes;
        for (unsigned int i = 0; i < model.CatFeatureCount; ++i) {
            catFeaturePackedIndexes[model.CatFeaturesIndex[i]] = i;
        };
        for (unsigned int i = 0; i < model.OneHotCatFeatureIndex.size(); ++i) {
            const auto catIdx = catFeaturePackedIndexes.at(model.OneHotCatFeatureIndex[i]);
            const auto hash = transposedHash[catIdx];
            if (!model.OneHotHashValues[i].empty()) {
                for (unsigned int borderIdx = 0; borderIdx < model.OneHotHashValues[i].size(); ++borderIdx) {
                    binaryFeatures[binFeatureIndex] |=
                        (unsigned char) (hash == model.OneHotHashValues[i][borderIdx]) * (borderIdx + 1);
                }
                ++binFeatureIndex;
            }
        }
    }

    if (model.modelCtrs.UsedModelCtrsCount > 0) {
        /* Binarize CTR cat features */
        std::vector<float> ctrs(model.modelCtrs.UsedModelCtrsCount);
        CalcCtrs(model.modelCtrs, binaryFeatures, transposedHash, ctrs);

        for (size_t i = 0; i < model.CtrFeatureBorders.size(); ++i) {
            for (const float border : model.CtrFeatureBorders[i]) {
                binaryFeatures[binFeatureIndex] += (unsigned char)(ctrs[i] > border);
            }
            ++binFeatureIndex;
        }
    }

    /* Extract and sum values from trees */
    double result = 0.0;
    const unsigned int* treeSplitsPtr = model.TreeSplits.data();
    const double* leafValuesPtr = model.LeafValues;
    size_t treePtr = 0;
    for (unsigned int treeId = 0; treeId < model.TreeCount; ++treeId) {
        const unsigned int currentTreeDepth = model.TreeDepth[treeId];
        unsigned int index = 0;
        for (unsigned int depth = 0; depth < currentTreeDepth; ++depth) {
            const unsigned char borderVal = model.TreeSplitIdxs[treePtr + depth];
            const unsigned int featureIndex = model.TreeSplitFeatureIndex[treePtr + depth];
            const unsigned char xorMask = model.TreeSplitXorMask[treePtr + depth];
            index |= ((binaryFeatures[featureIndex] ^ xorMask) >= borderVal) << depth;
        }
        result += leafValuesPtr[index];
        treeSplitsPtr += currentTreeDepth;
        leafValuesPtr += (1 << currentTreeDepth);
        treePtr += currentTreeDepth;
    }
    return model.Scale * result + model.Bias;
}
