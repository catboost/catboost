### Types to hold CTR's data

class catboost_model_ctr(object):
    def __init__(self, base_hash, base_ctr_type, target_border_idx, prior_num, prior_denom, shift, scale):
        self.base_hash = base_hash
        self.base_ctr_type = base_ctr_type
        self.target_border_idx = target_border_idx
        self.prior_num = prior_num
        self.prior_denom = prior_denom
        self.shift = shift
        self.scale = scale

    def calc(self, count_in_class, total_count):
        ctr = (count_in_class + self.prior_num) / float(total_count + self.prior_denom)
        return (ctr + self.shift) * self.scale


class catboost_bin_feature_index_value(object):
    def __init__(self, bin_index, check_value_equal, value):
        self.bin_index = bin_index
        self.check_value_equal = check_value_equal
        self.value = value


class catboost_ctr_mean_history(object):
    def __init__(self, sum, count):
        self.sum = sum
        self.count = count


class catboost_ctr_value_table(object):
    def __init__(self, index_hash_viewer, target_classes_count, counter_denominator, ctr_mean_history, ctr_total):
        self.index_hash_viewer = index_hash_viewer
        self.target_classes_count = target_classes_count
        self.counter_denominator = counter_denominator
        self.ctr_mean_history = ctr_mean_history
        self.ctr_total = ctr_total

    def resolve_hash_index(self, hash):
        try:
            return self.index_hash_viewer[hash]
        except KeyError:
            return None


class catboost_ctr_data(object):
    def __init__(self, learn_ctrs):
        self.learn_ctrs = learn_ctrs


class catboost_projection(object):
    def __init__(self, transposed_cat_feature_indexes, binarized_indexes):
        self.transposed_cat_feature_indexes = transposed_cat_feature_indexes
        self.binarized_indexes = binarized_indexes


class catboost_compressed_model_ctr(object):
    def __init__(self, projection, model_ctrs):
        self.projection = projection
        self.model_ctrs = model_ctrs


class catboost_model_ctrs_container(object):
    def __init__(self, used_model_ctrs_count, compressed_model_ctrs, ctr_data):
        self.used_model_ctrs_count = used_model_ctrs_count
        self.compressed_model_ctrs = compressed_model_ctrs
        self.ctr_data = ctr_data


###  Model data
class catboost_model(object):
    float_features_index = [
        0, 1, 2, 3, 4, 5,
    ]
    float_feature_count = 6
    cat_feature_count = 11
    binary_feature_count = 24
    tree_count = 40
    float_feature_borders = [
        [28.5, 33.5, 35.5, 36.5, 37.5, 48, 52.5, 53.5, 56],
        [51773, 84938, 116831.5, 119180.5, 122181, 124942, 126119, 188654.5, 200721, 204331, 205755, 208500.5, 216825, 288417.5, 292939, 337225.5],
        [4.5, 9.5, 10.5, 11.5, 13.5, 14.5, 15.5],
        [1087, 3280, 11356, 17537.5],
        [808.5, 1738, 1862, 1881.5, 2189.5],
        [27, 36.5, 44.5, 46.5, 49, 55]
    ]
    tree_depth = [6, 5, 6, 6, 6, 6, 1, 6, 6, 6, 2, 5, 6, 2, 5, 3, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]
    tree_split_border = [2, 2, 3, 3, 9, 1, 3, 13, 3, 4, 3, 3, 2, 4, 1, 2, 3, 6, 2, 2, 1, 5, 3, 2, 1, 1, 1, 8, 4, 6, 1, 2, 5, 5, 8, 1, 2, 1, 7, 4, 1, 1, 5, 6, 2, 6, 2, 2, 3, 8, 1, 2, 6, 6, 2, 2, 16, 5, 5, 3, 1, 4, 6, 5, 2, 2, 1, 16, 3, 1, 6, 1, 3, 4, 1, 7, 1, 2, 4, 5, 2, 4, 4, 1, 7, 6, 2, 1, 6, 1, 4, 6, 10, 1, 7, 1, 5, 4, 3, 2, 3, 4, 7, 9, 7, 2, 2, 1, 5, 7, 1, 1, 4, 1, 5, 1, 3, 2, 2, 1, 1, 4, 2, 3, 4, 3, 5, 6, 2, 3, 4, 3, 5, 3, 2, 2, 9, 2, 5, 4, 4, 7, 2, 4, 4, 4, 4, 4, 4, 1, 2, 2, 9, 2, 4, 6, 5, 16, 14, 4, 3, 3, 3, 16, 15, 3, 6, 4, 3, 2, 2, 12, 4, 5, 2, 6, 3, 4, 2, 4, 4, 2, 8, 7, 2, 2, 3, 7, 2, 4, 1, 5, 3, 2, 11, 4, 4, 5, 3, 2, 2, 12, 2, 6, 4, 2, 1, 2, 12, 3, 9, 2, 2, 4, 2, 3, 4]
    tree_split_feature_index = [10, 3, 2, 0, 1, 4, 10, 1, 2, 1, 4, 10, 0, 2, 3, 5, 4, 18, 9, 2, 18, 5, 21, 3, 7, 5, 10, 16, 5, 18, 3, 8, 2, 5, 1, 6, 8, 3, 17, 5, 20, 8, 4, 1, 11, 16, 15, 21, 6, 17, 15, 6, 8, 11, 3, 4, 1, 16, 8, 2, 9, 8, 15, 2, 3, 16, 11, 1, 10, 1, 5, 12, 16, 7, 1, 2, 13, 12, 18, 1, 3, 13, 15, 14, 2, 5, 17, 14, 17, 0, 12, 11, 1, 14, 2, 1, 8, 13, 10, 14, 12, 8, 18, 0, 1, 22, 20, 22, 15, 16, 23, 7, 17, 11, 18, 23, 17, 22, 14, 16, 17, 4, 7, 15, 5, 17, 8, 0, 12, 15, 5, 17, 8, 7, 10, 3, 0, 12, 18, 17, 6, 2, 14, 11, 8, 16, 5, 3, 4, 2, 14, 3, 0, 13, 2, 0, 1, 1, 1, 13, 18, 11, 10, 1, 1, 14, 16, 7, 5, 3, 22, 1, 5, 17, 2, 2, 3, 4, 14, 11, 16, 3, 0, 0, 9, 18, 2, 2, 17, 16, 21, 11, 2, 22, 1, 5, 17, 0, 13, 3, 22, 1, 18, 8, 5, 3, 19, 22, 1, 8, 0, 19, 15, 0, 1, 1, 1]
    tree_split_xor_mask = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    cat_features_index = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    one_hot_cat_feature_index = []
    one_hot_hash_values = [
    ]
    ctr_feature_borders = [
        [1.99999905, 6.99999905, 8.99999905, 10.999999],
        [4.99999905, 9.99999905, 11.999999, 12.999999],
        [4.99999905, 7.99999905, 9.99999905, 10.999999, 12.999999, 14.999999],
        [3.99999905, 6.99999905],
        [8.99999905, 12.999999, 13.999999],
        [3.99999905, 5.99999905, 6.99999905, 9.99999905, 10.999999, 11.999999],
        [4.99999905, 10.999999, 11.999999, 12.999999],
        [5.99999905, 8.99999905, 9.99999905, 11.999999],
        [0.999998987, 4.99999905, 12.999999],
        [1.99999905, 2.99999905, 6.99999905, 7.99999905, 10.999999, 12.999999],
        [1.99999905, 3.99999905, 4.99999905, 6.99999905, 8.99999905, 10.999999, 11.999999, 13.999999],
        [5.99999905, 7.99999905, 8.99999905, 9.99999905, 10.999999, 11.999999, 12.999999, 14.999999],
        [2.99999905, 3.99999905, 4.99999905, 8.99999905, 9.99999905, 10.999999, 12.999999],
        [0.999998987, 10.999999],
        [10.999999, 12.999999],
        [10.999999, 11.999999, 14.999999],
        [7.99999905, 12.999999],
        [12.999999]
    ]
    ## Aggregated array of leaf values for trees. Each tree is represented by a separate line:
    leaf_values = [
        [0.07001124905871529], [0.04857923404074122], [0], [0], [0.059509561699908], [0.02125341489282428], [0], [-0.07631908313068569], [0.05667577304753143], [-0.04443896079144927], [0], [-0.07631908313068569], [0.04250682978564857], [-0.1221105330090971], [0], [-0.1221105330090971], [0.06801092765703771], [0.03400546382851886], [0], [0], [0.05667577304753143], [-0.04405253459028913], [0], [0], [0.05313353723206071], [-0.0246717985053191], [0], [-0.07631908313068569], [0.04857923404074122], [-0.1744436185844244], [0], [-0.07631908313068569], [0], [0], [0], [0], [0], [-0.07631908313068569], [0], [0], [0.02125341489282428], [-0.07631908313068569], [0], [0], [0], [-0.1221105330090971], [0], [0], [0], [0.02125341489282428], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0.02125341489282428], [0.02125341489282428], [0], [0],
        [0.0429019239537608], [-0.04267492738788733], [0], [0], [0.03625524127543922], [-0.06440445339000582], [0], [0], [0.05056206602119953], [-0.04739733955483913], [0.04832413921400398], [0.03314740839675745], [0.04663139770023297], [-0.1504732106141374], [0.04911233661073942], [-0.1260718980239779], [0], [0], [0], [0], [0], [-0.06887243954276077], [0], [0], [0.01917966611020135], [-0.06887243954276077], [0], [0], [0], [-0.06440445339000582], [0], [0.01917966611020135],
        [0.03251536603799177], [0.01470114140035049], [0.01771510960845261], [0.0326822855415102], [0.01749024763565087], [0.03785288075783061], [0.01438765274332002], [0], [0], [0], [0], [0], [0], [0], [0], [-0.04972240634476669], [0.03139693969151822], [0.04680001900237623], [0.03429516129571204], [-0.03769927598372377], [0.03104087606458326], [-0.02068632328819112], [0.03589028393024948], [-0.1326916724975877], [0], [0], [0], [-0.1027964203563626], [0.0119094038437904], [-0.05419039249752165], [0], [-0.08313023907383067], [0], [0], [0.01730825817657214], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [-0.06215238357160043], [0], [0], [0], [-0.06864298358928834], [0], [0], [0], [0], [0], [0], [0], [0],
        [-0.05608802024840401], [0], [0.01657169973382502], [0], [-0.06942757863475085], [0], [0.03588012939359118], [0], [0.01647824071544073], [-0.1100867263565871], [0.02594163397467702], [0.03644321870166938], [0.02330458202211175], [-0.04902023639498955], [0.02416036915420168], [-0.04595288823094783], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0.006620473865517893], [0], [0.007868240523081015], [-0.07211116647169209], [0.01769977642335567], [-0.1088118805875514], [0], [0], [0], [0], [0], [0], [0.03538078306955542], [0], [0.01721164044292385], [0], [0.01739115576929882], [0], [0.01353784898629797], [-0.05770120102752865], [0.02128133589781798], [0.01304622495094683], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0],
        [0], [0], [0], [0], [0], [0], [0.02063201813525622], [0], [0], [0], [0.02996866483227567], [0], [-0.08321174882464696], [0], [0.0220880773411609], [-0.1163040442450243], [0], [0], [0.004532399024039782], [0], [0], [0], [0.01753833833816508], [0], [0], [0], [0.01533634887214639], [0], [0.005733785117287673], [0], [0.01750969835837564], [0], [0], [0], [0], [0], [0], [0], [0.008671612185934778], [0], [0], [0], [0], [0], [-0.05461990061954713], [-0.03904310076176423], [-0.08112089639703005], [0], [0], [0], [0], [0], [0], [0], [0.006734559657529024], [0], [0], [0], [0], [0], [0], [0], [0.0108744039126251], [0],
        [-0.04249619380584835], [-0.045280135829509], [0], [0], [0.01883176044136978], [0.06428172152165731], [0.006515711573239926], [-0.0542934639122687], [0], [0], [0], [0], [-0.02058942961275792], [0], [-0.02348888285070128], [0], [0], [0], [0], [0], [0.007317834805338347], [-0.04560853541014962], [0], [0], [0], [-0.02440988159898233], [0], [0], [0], [-0.04413250685552854], [0], [0], [0.008333449366343474], [-0.03320619388496145], [0], [0], [0.01635143513276418], [-0.0240126847345676], [0], [-0.06760959609031374], [0], [0], [0], [0], [0], [-0.004070130177025304], [0], [0], [0], [0], [0], [-0.03523356788985529], [0.01690705705197532], [0.03905607614625027], [0], [0], [0], [0], [0], [0], [0.006077451848655565], [-0.04739196523622104], [0], [0],
        [-0.06816368704918561], [0.003222065798955297],
        [0], [0], [0], [0], [0], [0], [0], [0], [-0.01537724725502969], [0], [0], [0], [0], [0], [0], [0], [-0.0316988327998387], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0.01974694053760097], [0], [-0.03180410398260328], [0.004114985847038695], [0.006722242880019966], [0], [0.005565572309838022], [-0.02331528137787094], [-0.05277614279585799], [0], [0], [0], [0.008046180388912298], [0], [0], [-0.03421113864589815], [0.0219306571301177], [0], [-0.05458472736318928], [0.01101211112831913], [0.006201370052709047], [0], [-0.03548695387584819], [0], [-0.04315276791148546], [-0.02514483943667936], [0], [0], [0.01310648528140585], [0], [0],
        [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [-0.001349031382230418], [0], [-0.05975725151278829], [-0.02795115666962017], [-0.01888863584235707], [0], [-0.01794488643011444], [-0.02860589849912886], [0.0007477966943478845], [0], [0.009119122172505344], [0], [0.001623919939863954], [0], [0.005649834147782325], [0], [-0.01856142192409366], [0], [0.0256706188361659], [0], [0.004155937349106676], [0], [-0.01108356191838336], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [-0.05433757596150963], [0], [0], [0], [0.03030068385639494], [0], [0], [0], [0.001225432282296447], [0], [0.001578827027313786], [0], [0.007834533504349922], [0],
        [0], [0], [0], [0], [-0.04453888161263224], [0], [0.008385619602053208], [0], [0], [0.02174242919558526], [0], [0], [0], [-0.01154379368232683], [0.00616224461162862], [0.005374115657541445], [0], [0], [-0.02438242397339305], [0], [-0.05627643177159088], [0], [0.01648204539376739], [0], [0], [0], [0.00144590440835256], [0.008224660148579798], [0.0244571138646424], [-0.02522389249071884], [0.001326130758364695], [-0.008138427180848484], [0], [0], [0], [0], [-0.03014539800029415], [0], [0], [0], [0], [0], [0], [0], [0.04089234298235088], [0.01021535886660138], [0], [0.0002178821209717349], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [-0.02694997071388677], [0], [7.804825261871415e-05],
        [0.002997274774691991], [-0.0577514099023872], [-0.02182778454010394], [0],
        [-0.02497674265350568], [0.0366099233404992], [-0.01264137859265052], [0.005358008496851714], [-0.01868544542111681], [0], [-0.01692529994723938], [-0.0002639207404095533], [-0.04147333861406722], [0], [-0.003922722563934427], [0], [-0.03414856156888619], [0], [0.009772609742642505], [0.02420056363432071], [0.02363933944010805], [0.02108046313078567], [-0.002184569419318132], [-0.0004887889129961732], [0.002958142371713537], [0], [0.002873123800671713], [0.002818414359297531], [-0.004412636638692137], [0], [0.003333148381415888], [0], [-0.01306281783155312], [0.02161089915174208], [-0.01282717004459799], [0.003734973017573648],
        [0], [0.02228826138446503], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [-0.001250569086618053], [0.007879834994200164], [0], [0], [-0.002744461705658927], [0], [0], [0], [-0.02692609598766623], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0.002611089210633726], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [-0.03183676529364358], [0.0123041844944624], [0.001659806237836106], [0.0006884988230415624], [-0.00410147348803055], [-0.03746977825389141], [0.005096183069029332], [0.002691679239791964], [-0.01668884710115811], [-0.03150075307106348], [0], [0], [0], [0.00134385270468527], [0], [0],
        [0.004619116311772781], [0.00274876164871174], [-0.02194777650035303], [0.05146802811874628],
        [0], [0], [0], [0], [0], [0], [0], [0], [0], [-0.0101782445594971], [0], [0], [0], [-0.00333580259039413], [0], [0.01224953956155236], [0], [0.02225503942378298], [0], [0], [0], [0.001905619996589147], [0], [0], [0], [0], [0], [0], [-0.02846055882933567], [0.00206182520054942], [0], [0],
        [0], [0.01783400922207322], [0], [0], [-0.02401741031713832], [-0.001163641731792856], [0], [0.01741065669106185],
        [-0.01593653476312884], [0], [0.006979916747879215], [0], [0.01834345080402079], [0], [-0.0004065921413356759], [0], [0], [0], [0], [0], [0], [0], [-0.01738621296289632], [0], [0.006366125799742482], [0.0008395549465291667], [0.003423873826132826], [-0.005675302741762746], [0.01043147173706017], [0.01650635518965393], [-0.02977048449008982], [0.02081092318624069], [0], [0], [0], [0], [0], [0.003793251040748096], [-0.0141078745971403], [-0.01173479129345993], [0], [0], [0], [0], [0.00363895745194819], [0], [-0.048505262417362], [0], [0], [0], [0], [0], [0], [0], [-0.01018752974342541], [0], [-0.0008386386120973156], [-0.000141110725848349], [0], [-0.02880432370702301], [0.007892868613768153], [-0.0007184793049726552], [0.0157118554254852], [0.01291425992789773], [0], [0], [0], [0], [0], [0], [0], [-0.01247995319893107],
        [-0.03854783739899523], [-0.000741125181606368], [0], [0], [0], [0.0237031350730204], [0], [0], [-0.001095184309798622], [-0.0005877090932234567], [0], [0.01417881044303637], [0], [-0.007852362249355042], [0], [0],
        [0], [0.01662594792201858], [0], [0.002943895610308907], [0], [0.02116009692307084], [0], [-0.002043479327011169], [0], [0], [0], [0.001191819885235899], [0], [-0.02593646964471402], [0], [0.002206690840801825], [0], [0], [0], [-0.0007065976014659261], [0], [-0.04845480607213666], [0], [0], [0], [0], [0], [-0.002703021535783917], [0], [-0.008944851300097926], [0], [0], [-0.03478662861057118], [0.008079825529000318], [0], [0.002033632405428819], [0], [-0.005704654001149578], [-0.0009883244408954188], [0.006615383687600715], [0], [0], [0], [-0.002151358245424069], [0], [-0.06146041093427425], [0], [0], [0], [0], [0], [0], [0], [0.03175800547717519], [0], [0.0006132815076546993], [0], [0.004136148882226348], [0], [-0.002443100421677597], [0], [0.02417044578233078], [0], [0.001432509319340112],
        [0], [0], [0], [0], [0], [0.003036877254585501], [0], [0], [0], [0], [0], [0], [0], [-0.001492962839428221], [0], [0], [0], [0], [0], [0], [0], [-0.0006671928847101082], [0], [0], [0], [0.003739938404949481], [0], [0], [-0.0008918911563395586], [0.003374160820242742], [0], [0], [0], [0], [0], [0], [0], [0.02216148707194117], [0], [0], [0], [0], [0], [0], [0], [-0.04042364202803058], [0], [0], [0], [0], [0], [0], [-0.03139241035922165], [-0.002800603412706376], [0], [0], [0], [-0.02340578351156833], [0], [0], [0], [0.01157801167282357], [0], [0.0121498689773243],
        [0], [0], [0], [0], [-0.0008293042208073225], [-0.00555184117996195], [-0.0007253251182851873], [0.0006870942315704643], [0], [0], [0], [-0.01696228467457294], [0.001370729695064513], [0.004128019221809097], [0], [-0.007673012444432101], [0], [0], [0], [0], [0], [0.001541532864303951], [0], [0.0007988524697971268], [0], [0], [0], [0], [0], [0.02579679763683796], [0], [0], [0], [-0.0006195214380132549], [0], [0], [-0.002875952529550583], [0.006128236755301748], [0.0002977100913246353], [0.00297741673531904], [0], [-0.0009864968630322823], [0], [0], [-0.01389199884075589], [0.01028778825779873], [-0.05659326063092842], [0.002443703173570204], [0], [7.419682265103183e-05], [0], [0], [0.005923838362832643], [0.0004342108525078141], [0], [0.001825150790419173], [0], [0], [0], [-0.01005887538900761], [0], [-0.0418878057097636], [0], [0.01452652034268433],
        [0], [0], [0], [0], [-0.007034532283071563], [0], [0.001391121651948481], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [-0.0005242532357451507], [0], [0], [0], [0], [0], [0], [0], [-0.001842991408964135], [0], [-0.002591680429978267], [0], [0.002270155405356484], [0], [-0.02432898087956293], [0], [0.002077590743751998], [0.01189184317645231], [0.01269727611797445], [-0.00951720008519975], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0.002216338689603751], [-0.001676628379485095], [0], [0], [0], [0], [0.0002686617740272847], [0], [0.009280244476543046], [-0.002191537442883], [0], [0.004408727415078332],
        [0], [0], [0], [0], [0], [0.001255386437313281], [0], [0], [0], [0], [0], [0], [-0.01243594067589821], [0.001709200733206196], [0], [0], [0], [0.01814728529570886], [0], [0], [0], [0], [0], [0], [0], [-0.02460005799327586], [0], [0], [0], [0.005701818290603444], [0], [0], [0], [0], [0], [-0.0001810544072068171], [0], [0], [-0.01107190065445712], [-0.000699434088305919], [0], [0], [0], [0], [0], [-0.001978564878435044], [0], [-0.01482253888845846], [0], [0], [0.005399440629410472], [0.003174223318107557], [0], [0], [0], [0.003547669397262703], [0], [0], [0], [0.0002630344745455729], [0], [0], [-0.009280121508733332], [0.001616403334379168],
        [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0.004833402038712928], [0], [-0.00825095626505363], [0.005391463334362911], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [-0.009991587649733609], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [-0.02402025560308831], [0], [0.00670043593386768], [-0.004355075362251169], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0.01113387116440268], [-0.0178330412067578], [0],
        [0.009458829603271931], [0], [-0.0003772696282203628], [0], [0], [-0.0002253025618193039], [0], [0.0003412161464283042], [0.002774578617137168], [0], [0.00280425335124231], [-0.01522031690345367], [0.00768373355488834], [-0.0017063568424872], [0], [-0.003590955849194483], [0], [0], [-0.0001154417100881533], [0.003104351971892314], [0], [0.003776012352219592], [0], [0.0007297810387105764], [-0.01294040553503596], [0], [0], [0], [-0.01516361610297992], [-0.0135083882614294], [0], [0], [0.01214525981238553], [-0.01367316770849757], [-0.0341089466295655], [0], [0], [-0.0009524482456309303], [0], [0], [-0.02173851527421612], [0], [0], [0], [0.007189730827721247], [0.0016580068704461], [0], [0.0014702980832574], [0.03621481968419037], [0], [0.02039148616349881], [0], [0], [-0.007275490529416884], [0], [-0.007569570457300503], [0.008655677632224698], [0], [0], [0], [0.01792465768557872], [0.003288761080346433], [0], [-0.01508718695593364],
        [0], [0], [0], [0], [0], [0.00438838384282298], [0], [0.0003079228346553347], [0], [0], [0], [0], [0.001308157213247498], [0.006728403315424515], [0], [0], [0], [0], [0], [0], [0], [-0.003213664215442349], [0], [0.0006585744797533937], [0.001741744668216541], [0], [0], [0], [0.005055696395666035], [-0.002065922896077018], [0], [0.001875801698141668], [-0.02077897417376215], [-0.01233904257928507], [0.01521058020736137], [0.002801452595250572], [0], [-0.008306795698226654], [0], [-0.00683098855881673], [0], [0], [0], [0], [-0.01114798870955883], [-0.01815333996766224], [0], [0], [0.03680081763683456], [0], [-0.03267092934793219], [0], [0], [0], [0], [0], [-0.01075609541613367], [0], [0.002530635346670798], [-0.01373523256247424], [0.01851167052421483], [0.005701401143179238], [0], [-0.01653036783205345],
        [0], [0], [0], [0], [0], [0], [0], [0], [-0.01110822286010178], [0], [0], [0], [0.005877792066037754], [0], [0], [0], [0.001999786759992332], [0], [0.002277628218383652], [0], [-0.00218137744959863], [0.0008368154201236466], [-0.0006078832445116827], [0], [0.0119852717699758], [0], [-0.03113441327332395], [0], [0], [0], [0], [-0.006164471941162966], [0.01650160759724197], [0], [0.001571798290019525], [0], [0], [0], [0], [0], [0.0005045953014637266], [-0.01147583126163111], [0], [0], [-0.01616070270724563], [0], [0.03488575226940085], [-0.01212102723026463], [-0.0008418561464704964], [0], [0.0005943157226293238], [0], [-0.0002290677883128383], [0], [0.001885326766150591], [0], [0.001950526564803276], [-0.007287099246902014], [0], [-0.00742756521210444], [0.007769294360886842], [0], [0], [0],
        [0], [0], [0], [0], [0], [0], [0], [0], [-0.0145042065984609], [0], [0.02229817407354433], [0], [-0.04346057210507272], [0], [0.02846838086630136], [0], [0], [0], [0.005304278461820687], [0], [0], [0], [-0.01519363253667367], [0], [0.004756503184407812], [0.01081583886388861], [-0.009217100251153], [0], [0.003466337710211065], [0], [0.002146918753861206], [0], [0], [0], [0], [0], [0], [0], [0.002460565003021147], [0], [0], [0], [0.002234480310254795], [0], [0], [0], [-0.03573357887456013], [0], [0], [0], [0.002486007913826842], [0], [0], [0], [-0.00556298901486786], [0], [0], [0], [-0.004785462720365733], [0], [0], [0], [0.000982352247707319], [0],
        [0], [0], [0], [0], [-0.01227024513412466], [0], [0.009760510447719233], [0], [0.0119964088840124], [0], [0], [0], [0.0004270517395970957], [-0.005803503624088769], [-0.01190346391711655], [0],
        [0.01491996553253137], [0], [0], [0], [-0.00176567154836718], [0], [0], [0], [-0.01081590597312428], [0], [0], [0], [0.00469332332085753], [0], [0], [0], [0], [0], [0], [0], [-0.01120461865833128], [0], [-0.0019285703658303], [0], [-0.01193378429307956], [0], [0], [0], [0], [0], [-0.0007989230462633078], [0], [-0.002812167264448472], [-0.009498438747517129], [0], [0], [-0.004767091539325332], [0], [0], [0], [0.00807898820981408], [-0.005718411779016201], [0], [0], [0.004141085193219141], [0.0005040165183120563], [0], [0], [0.00267041253728046], [0], [-0.0005085597376089609], [0], [0.01817946403538512], [0], [0.001937067948196769], [-0.01375774786562422], [-0.01353406473433307], [0], [-0.001244353893805427], [0], [0.003229973986035793], [0], [0.004999273094645861], [-0.008239283250740454],
        [0], [0], [0], [0], [0], [0], [0], [0], [-0.001012656796053097], [0], [0.0002944566942636235], [0.003866146385076855], [0.01001324523619042], [0], [0], [0.001738863917322864], [-0.0007209701289108475], [0], [0], [0], [0], [0], [0], [0], [-0.001418257964643799], [0], [0], [-0.002733480149506076], [-0.0005502920866797493], [0], [0.0005152944857693986], [-0.0007627239861886055], [0.0008931882095797401], [0], [0], [0], [0], [0], [0], [0], [-0.004791757480335891], [0], [-0.007360750757549858], [0], [-0.001080240794613338], [0], [-0.01545926659227248], [0.008404097034520148], [0], [0], [0], [0], [0.0003342116043624544], [0], [0], [0.005395961249873148], [0.003512022439786231], [0], [-0.02742788836327589], [0.003691304907422372], [-0.00395258534276432], [0], [0.007746833176261032], [0.01443285797172242],
        [-0.006721059374890724], [0], [-0.03096203849073133], [0.003331135066638726], [0.0101440391267404], [0], [0], [0], [0.003097260816376993], [0], [0], [0.0005397076893901466], [-0.0002066485790996088], [0], [0], [-0.0006361538349773853], [0.000350195805739183], [0], [-0.01149530539104972], [0.00486946383148496], [0.0141752328883501], [0], [0], [0], [-0.0006331060800359524], [0], [0], [0.0009545846461829574], [-0.008640240305274886], [0], [0], [0], [-0.0199060774383525], [0], [0.00373078062159756], [0.01302460796580293], [-0.0004212176333902911], [0], [0.006990955311481842], [0], [0], [0], [0], [0.007584088293230043], [0.0006836169162328314], [0], [0], [0], [-0.01107378512441058], [0], [0], [0], [0.01484154797814802], [0], [0], [0], [0.003082813354502221], [0], [0], [0], [-0.002285738412105705], [0], [0.0004650159155751412], [0],
        [0.006266798197979358], [0], [0], [0], [0.01709226235476793], [-0.007023611727155046], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0.003267129287608388], [0], [0.000311916779641299], [0], [-0.007318136133314257], [0], [-0.0004929156282134908], [0], [0.004226537047284147], [0], [0], [0], [0], [0], [0], [0], [0.02219722011667438], [-0.01206387589321635], [0], [0], [-0.02009254052145018], [0], [0], [0], [-0.02096273584389099], [-0.003831172454283552], [0], [0], [0.01085647034855613], [0], [0], [0], [0.001546268487676597], [-0.003849858479622229], [0.003216397035947997], [-0.001925474518041558], [-0.0001921241907161333], [0], [0.003213064892705134], [0], [-0.001323549962610034], [0], [0], [0], [0.0004196431510717863], [0], [0], [0],
        [-0.004973779137295456], [0], [0], [0], [0], [0], [0], [0], [0.01045553279181579], [0], [0], [0], [0], [0], [0], [0], [-0.0345557064719203], [0], [0], [0], [0], [0], [0], [0], [0.00794940954224529], [0], [0], [0], [0], [0], [0], [0], [0.005048089619986646], [0], [0], [0], [0], [0.006530583085335845], [0], [0], [-0.002806881881307202], [0.001458425619492325], [-0.003296988847987585], [0], [-0.006167143882800183], [0.002850311724878744], [0], [0], [0.004909971993030921], [0], [0], [0], [0], [0], [0], [0], [0.0003907733982456979], [0], [-0.0017531703759302], [0], [-0.006108924047462415], [0], [0], [0],
        [-0.005512861067915615], [0], [0], [0], [0], [0], [0], [0], [0.007150778125412019], [0], [0], [0], [0], [0], [0], [0], [-0.003980683548794832], [0], [0], [0], [0.01065634276254788], [0], [-0.008001726830961483], [-0.01166241713331843], [0.0002275923879190933], [-0.006064425908973236], [0], [0], [-0.006618343168818396], [0], [0.01807663241466126], [0], [-0.01172330379332975], [0.00143695363068782], [0], [0], [0], [0], [0], [0], [0.01083701997550728], [0], [0], [0], [0], [0], [-0.005219746824039844], [0], [0.004437672153211968], [0], [0], [0], [0], [0], [0.002018120982590752], [-0.003286294174519919], [0.0002407494759099873], [-0.003200343693912423], [0], [0], [-0.00813932588136931], [0], [0.000794075915026216], [-0.002975293410133782],
        [0.009368809140647711], [0], [0], [0], [0], [0], [0.0002507278313707499], [0], [0.01642211050615289], [0], [0], [0], [-0.005472704723956222], [0], [0.003983811020401853], [0], [-0.007448398426908544], [0], [0], [0], [0], [0], [-0.0006845527933259715], [0], [-0.0193795925371876], [0], [0], [0], [0.009616576779411332], [0], [-0.007746702363857223], [0], [0], [0], [0], [0], [0.000378249530885151], [0], [-0.0005785366265813972], [0], [-0.003813505947648568], [0], [0], [0], [-0.00776093962552631], [0], [0.001299596244429936], [0.005460383022751284], [0.004939454321781282], [0], [0], [0], [0], [0], [8.674717213276751e-05], [0], [0], [0], [0], [0], [0], [0], [-0.002406431047813342], [0],
        [0.01305699375942558], [0], [-0.004938719253094749], [0], [-0.004831636509975103], [0], [0], [0], [-0.004678322833322208], [0], [-0.001595521381254333], [0], [1.88565705505281e-05], [0], [0], [0], [-0.00433834978582842], [0], [-0.006587897256624453], [0], [0.002532916114062477], [0], [0.001890307001480858], [0], [-0.005321271648057962], [0], [0.002738728181404479], [0], [0], [0], [0.0007442088281486024], [0], [0.006616765805324261], [0], [0.0004204391818145826], [0], [-0.02752125163080007], [0], [0], [0], [0.002038609587910069], [0.002703495144970729], [0.00102815417799949], [-0.001923478284665149], [0.0009698428039413233], [0], [0], [0], [-0.005721446853909601], [0], [-0.0006221691121872592], [0], [0.00445749942473206], [0], [0.008582520390188897], [0], [0.009986560136176789], [-0.0001674291127771078], [-0.009375929372212179], [0.003805078810881014], [-0.01077407055574953], [0], [0.0004978903019223564], [0],
        [0.0005043368866568225], [0], [0], [0], [0.005032169181467715], [0], [0], [0], [0.004805894483433516], [-0.002558407371746928], [0], [0], [-0.000297846934913996], [-0.004456836078533492], [-0.001269941951447579], [0], [-0.01018702684175438], [0], [0], [0.001186278100182179], [0], [0], [0], [0], [0.00324937051965327], [-0.008075314844252489], [0.002419038409351177], [-0.00279545497496962], [-0.008620724633642845], [0], [0.002169838454644627], [0], [0], [0], [0], [0], [0], [0], [0], [0], [-0.009874760878879098], [-0.001679587776009393], [0], [0], [0.005748312140530393], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0.001765257127814286], [0], [0], [0], [0], [0], [0], [0],
        [0], [0], [-0.007677888804577358], [0], [0], [0], [0], [0], [0], [0], [0.001253926986932095], [0], [0], [0], [0], [0], [0.002008896570319524], [0], [-0.0001630270994873023], [-0.002308777173523818], [0], [0], [0.003449546713878932], [0.00107052998259682], [0], [0], [0.0001909861879898113], [-0.004021971449069675], [0], [0], [0.0008420442651917076], [0], [0], [0], [0], [-0.001515706201054405], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0.001508610533483359], [0], [0.0035172251975806], [-0.007287386202572442], [0], [0], [-0.001885129336114699], [-0.002522695449949586], [0], [0], [-0.002922660935002107], [0], [0], [0], [0], [0],
        [-0.0003680945688549064], [0], [0.004957218448743931], [0], [0], [-0.004307440018441055], [0], [-0.00617563629826156], [0], [0], [-0.002764520986318162], [-0.003380789618475671], [0], [0], [0.008049938087171518], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [-0.009177146224029356], [-0.009366466709714335], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0.00380191615498124], [0.005236978499363878], [0.001191153724420138], [-0.001314690050366676], [0], [0.0009660756979857835], [0.002204890555407701], [-0.002836029086413711]
    ]
    scale = 1
    biases = [0.7821782231]
    dimension = 1
    model_ctrs = catboost_model_ctrs_container(
        used_model_ctrs_count = 18,
        compressed_model_ctrs = [
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [3],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 2967152236118276030, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 2967152236118276030, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 2967152236118276030, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 4017420253906208356, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = 0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [5],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 4017420253906208354, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = 0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [6],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 2967152236118276027, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 2967152236118276027, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 2967152236118276027, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 4017420253906208353, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = 0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [7],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 2967152236118276026, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 2967152236118276026, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 2967152236118276026, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 4017420253906208352, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = 0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [8],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 2967152236118276005, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 2967152236118276005, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 2967152236118276005, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = 0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [10],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 2967152236118276007, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 2967152236118276007, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = 0, scale = 15)
                ]
            )
        ],
        ctr_data = catboost_ctr_data(
            learn_ctrs = {
                2967152236118276005 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 8473802870189803490 : 2, 7071392469244395075 : 1, 18446744073709551615 : 0, 8806438445905145973 : 3, 619730330622847022 : 0, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 0, count = 12), catboost_ctr_mean_history(sum = 1.4013e-45, count = 5), catboost_ctr_mean_history(sum = 2.94273e-44, count = 61), catboost_ctr_mean_history(sum = 0, count = 1)],
                    ctr_total = [0, 12, 1, 5, 21, 61, 0, 1]
                ),
                2967152236118276007 :
                catboost_ctr_value_table(
                    index_hash_viewer = {2136296385601851904 : 0, 7428730412605434673 : 1, 9959754109938180626 : 3, 14256903225472974739 : 5, 8056048104805248435 : 2, 18446744073709551615 : 0, 12130603730978457510 : 6, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 10789443546307262781 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 2.8026e-44, count = 73), catboost_ctr_mean_history(sum = 0, count = 2), catboost_ctr_mean_history(sum = 0, count = 2), catboost_ctr_mean_history(sum = 1.4013e-45, count = 0), catboost_ctr_mean_history(sum = 0, count = 1), catboost_ctr_mean_history(sum = 0, count = 1), catboost_ctr_mean_history(sum = 1.4013e-45, count = 0)],
                    ctr_total = [20, 73, 0, 2, 0, 2, 1, 0, 0, 1, 0, 1, 1, 0]
                ),
                2967152236118276026 :
                catboost_ctr_value_table(
                    index_hash_viewer = {3607388709394294015 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18356215166324018775 : 0, 18365206492781874408 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0, 14559146096844143499 : 1, 18446744073709551615 : 0, 18446744073709551615 : 0, 11416626865500250542 : 3, 5549384008678792175 : 2},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 0, count = 14), catboost_ctr_mean_history(sum = 0, count = 22), catboost_ctr_mean_history(sum = 0, count = 22), catboost_ctr_mean_history(sum = 2.66247e-44, count = 17), catboost_ctr_mean_history(sum = 2.8026e-45, count = 3), catboost_ctr_mean_history(sum = 1.4013e-45, count = 1)],
                    ctr_total = [0, 14, 0, 22, 0, 22, 19, 17, 2, 3, 1, 1]
                ),
                2967152236118276027 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 14452488454682494753 : 1, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 1388452262538353895 : 5, 8940247467966214344 : 9, 4415016594903340137 : 11, 18446744073709551615 : 0, 18446744073709551615 : 0, 41084306841859596 : 7, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 8678739366408346384 : 4, 18446744073709551615 : 0, 4544226147037566482 : 12, 14256903225472974739 : 6, 16748601451484174196 : 10, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 5913522704362245435 : 0, 1466902651052050075 : 3, 2942073219785550491 : 8, 15383677753867481021 : 2, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 0, count = 11), catboost_ctr_mean_history(sum = 2.8026e-45, count = 9), catboost_ctr_mean_history(sum = 2.8026e-45, count = 14), catboost_ctr_mean_history(sum = 0, count = 2), catboost_ctr_mean_history(sum = 0, count = 6), catboost_ctr_mean_history(sum = 9.80909e-45, count = 6), catboost_ctr_mean_history(sum = 1.4013e-45, count = 5), catboost_ctr_mean_history(sum = 8.40779e-45, count = 10), catboost_ctr_mean_history(sum = 0, count = 1), catboost_ctr_mean_history(sum = 2.8026e-45, count = 8), catboost_ctr_mean_history(sum = 0, count = 3), catboost_ctr_mean_history(sum = 1.4013e-45, count = 4), catboost_ctr_mean_history(sum = 1.4013e-45, count = 0)],
                    ctr_total = [0, 11, 2, 9, 2, 14, 0, 2, 0, 6, 7, 6, 1, 5, 6, 10, 0, 1, 2, 8, 0, 3, 1, 4, 1, 0]
                ),
                2967152236118276030 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 15379737126276794113 : 5, 18446744073709551615 : 0, 14256903225472974739 : 2, 18048946643763804916 : 4, 2051959227349154549 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 7024059537692152076 : 6, 18446744073709551615 : 0, 15472181234288693070 : 1, 8864790892067322495 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 1.4013e-44, count = 58), catboost_ctr_mean_history(sum = 1.4013e-45, count = 6), catboost_ctr_mean_history(sum = 1.4013e-45, count = 5), catboost_ctr_mean_history(sum = 4.2039e-45, count = 6), catboost_ctr_mean_history(sum = 0, count = 4), catboost_ctr_mean_history(sum = 2.8026e-45, count = 0), catboost_ctr_mean_history(sum = 7.00649e-45, count = 0)],
                    ctr_total = [10, 58, 1, 6, 1, 5, 3, 6, 0, 4, 2, 0, 5, 0]
                ),
                4017420253906208352 :
                catboost_ctr_value_table(
                    index_hash_viewer = {3607388709394294015 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18356215166324018775 : 0, 18365206492781874408 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0, 14559146096844143499 : 1, 18446744073709551615 : 0, 18446744073709551615 : 0, 11416626865500250542 : 3, 5549384008678792175 : 2},
                    target_classes_count = 0,
                    counter_denominator = 36,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 1.96182e-44, count = 22), catboost_ctr_mean_history(sum = 3.08286e-44, count = 36), catboost_ctr_mean_history(sum = 7.00649e-45, count = 2)],
                    ctr_total = [14, 22, 22, 36, 5, 2]
                ),
                4017420253906208353 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 14452488454682494753 : 1, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 1388452262538353895 : 5, 8940247467966214344 : 9, 4415016594903340137 : 11, 18446744073709551615 : 0, 18446744073709551615 : 0, 41084306841859596 : 7, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 8678739366408346384 : 4, 18446744073709551615 : 0, 4544226147037566482 : 12, 14256903225472974739 : 6, 16748601451484174196 : 10, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 5913522704362245435 : 0, 1466902651052050075 : 3, 2942073219785550491 : 8, 15383677753867481021 : 2, 18446744073709551615 : 0},
                    target_classes_count = 0,
                    counter_denominator = 16,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 1.54143e-44, count = 11), catboost_ctr_mean_history(sum = 2.24208e-44, count = 2), catboost_ctr_mean_history(sum = 8.40779e-45, count = 13), catboost_ctr_mean_history(sum = 8.40779e-45, count = 16), catboost_ctr_mean_history(sum = 1.4013e-45, count = 10), catboost_ctr_mean_history(sum = 4.2039e-45, count = 5)],
                    ctr_total = [11, 11, 16, 2, 6, 13, 6, 16, 1, 10, 3, 5, 1]
                ),
                4017420253906208354 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 13987540656699198946 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18089724839685297862 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 10353740403438739754 : 2, 3922001124998993866 : 0, 13686716744772876732 : 1, 18293943161539901837 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 0,
                    counter_denominator = 42,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 5.1848e-44, count = 4), catboost_ctr_mean_history(sum = 5.88545e-44, count = 13), catboost_ctr_mean_history(sum = 2.8026e-45, count = 3)],
                    ctr_total = [37, 4, 42, 13, 2, 3]
                ),
                4017420253906208356 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 15379737126276794113 : 5, 18446744073709551615 : 0, 14256903225472974739 : 2, 18048946643763804916 : 4, 2051959227349154549 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 7024059537692152076 : 6, 18446744073709551615 : 0, 15472181234288693070 : 1, 8864790892067322495 : 0},
                    target_classes_count = 0,
                    counter_denominator = 68,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 9.52883e-44, count = 7), catboost_ctr_mean_history(sum = 8.40779e-45, count = 9), catboost_ctr_mean_history(sum = 5.60519e-45, count = 2)],
                    ctr_total = [68, 7, 6, 9, 4, 2, 5]
                )
            }
        )
    )


### Routines to compute CTRs

def calc_hash(a, b):
    max_int = 0xffFFffFFffFFffFF
    MAGIC_MULT = 0x4906ba494954cb65
    return (MAGIC_MULT * ((a + MAGIC_MULT * b) & max_int)) & max_int


def calc_hashes(binarized_features, hashed_cat_features, transposed_cat_feature_indexes, binarized_feature_indexes):
    result = 0
    for cat_feature_index in transposed_cat_feature_indexes:
        result = calc_hash(result, hashed_cat_features[cat_feature_index])
    for bin_feature_index in binarized_feature_indexes:
        binary_feature = binarized_features[bin_feature_index.bin_index]
        if not(bin_feature_index.check_value_equal):
            result = calc_hash(result, 1 if (binary_feature >= bin_feature_index.value) else 0)
        else:
            result = calc_hash(result, 1 if (binary_feature == bin_feature_index.value) else 0)
    return result


def calc_ctrs(model_ctrs, binarized_features, hashed_cat_features, result):
    ctr_hash = 0
    result_index = 0

    for i in range(len(model_ctrs.compressed_model_ctrs)):
        proj = model_ctrs.compressed_model_ctrs[i].projection
        ctr_hash = calc_hashes(binarized_features, hashed_cat_features, proj.transposed_cat_feature_indexes, proj.binarized_indexes)
        for j in range(len(model_ctrs.compressed_model_ctrs[i].model_ctrs)):
            ctr = model_ctrs.compressed_model_ctrs[i].model_ctrs[j]
            learn_ctr = model_ctrs.ctr_data.learn_ctrs[ctr.base_hash]
            ctr_type = ctr.base_ctr_type
            bucket = learn_ctr.resolve_hash_index(ctr_hash)
            if bucket is None:
                result[result_index] = ctr.calc(0, 0)
            else:
                if ctr_type == "BinarizedTargetMeanValue" or ctr_type == "FloatTargetMeanValue":
                    ctr_mean_history = learn_ctr.ctr_mean_history[bucket]
                    result[result_index] = ctr.calc(ctr_mean_history.sum, ctr_mean_history.count)
                elif ctr_type == "Counter" or ctr_type == "FeatureFreq":
                    ctr_total = learn_ctr.ctr_total
                    denominator = learn_ctr.counter_denominator
                    result[result_index] = ctr.calc(ctr_total[bucket], denominator)
                elif ctr_type == "Buckets":
                    ctr_history = learn_ctr.ctr_total
                    target_classes_count = learn_ctr.target_classes_count
                    total_count = 0
                    good_count = ctr_history[bucket * target_classes_count + ctr.target_border_idx];
                    for class_id in range(target_classes_count):
                        total_count += ctr_history[bucket * target_classes_count + class_id]
                    result[result_index] = ctr.calc(good_count, total_count)
                else:
                    ctr_history = learn_ctr.ctr_total;
                    target_classes_count = learn_ctr.target_classes_count;

                    if target_classes_count > 2:
                        good_count = 0
                        total_count = 0
                        for class_id in range(ctr.target_border_idx + 1):
                            total_count += ctr_history[bucket * target_classes_count + class_id]
                        for class_id in range(ctr.target_border_idx + 1, target_classes_count):
                            good_count += ctr_history[bucket * target_classes_count + class_id]
                        total_count += good_count;
                        result[result_index] = ctr.calc(good_count, total_count);
                    else:
                        result[result_index] = ctr.calc(ctr_history[bucket * 2 + 1], ctr_history[bucket * 2] + ctr_history[bucket * 2 + 1])
            result_index += 1





cat_features_hashes = {
    "Female": -2114564283,
    "Protective-serv": -2075156126,
    "Assoc-voc": -2029370604,
    "Married-civ-spouse": -2019910086,
    "Federal-gov": -1993066135,
    "Transport-moving": -1903253868,
    "Farming-fishing": -1888947309,
    "Prof-school": -1742589394,
    "Self-emp-inc": -1732053524,
    "?": -1576664757,
    "Handlers-cleaners": -1555793520,
    "0": -1438285038,
    "Philippines": -1437257447,
    "Male": -1291328762,
    "11th": -1209300766,
    "Unmarried": -1158645841,
    "Local-gov": -1105932163,
    "Divorced": -993514283,
    "Some-college": -870577664,
    "Asian-Pac-Islander": -787966085,
    "Sales": -760428919,
    "Self-emp-not-inc": -661998850,
    "Widowed": -651660490,
    "Masters": -453513993,
    "State-gov": -447941100,
    "Doctorate": -434936054,
    "White": -218697806,
    "Own-child": -189887997,
    "Amer-Indian-Eskimo": -86031875,
    "Exec-managerial": -26537793,
    "Husband": 60472414,
    "Italy": 117615621,
    "Not-in-family": 143014663,
    "n": 239748506,
    "Married-spouse-absent": 261588508,
    "Prof-specialty": 369959660,
    "Assoc-acdm": 475479755,
    "Adm-clerical": 495735304,
    "Bachelors": 556725573,
    "HS-grad": 580496350,
    "Craft-repair": 709691013,
    "Other-relative": 739168919,
    "Other-service": 786213683,
    "9th": 840896980,
    "Separated": 887350706,
    "10th": 888723975,
    "Mexico": 972041323,
    "Hong": 995245846,
    "1": 1121341681,
    "Tech-support": 1150039955,
    "Black": 1161225950,
    "Canada": 1510821218,
    "Wife": 1708186408,
    "United-States": 1736516096,
    "Never-married": 1959200218,
    "Machine-op-inspct": 2039859473,
    "7th-8th": 2066982375,
    "Private": 2084267031,
}


def hash_uint64(string):
    return cat_features_hashes.get(str(string), 0x7fFFffFF)


### Applicator for the CatBoost model
def apply_catboost_model_multi(float_features, cat_features=[], ntree_start=0, ntree_end=catboost_model.tree_count):
    """
    Applies the model built by CatBoost.

    Parameters
    ----------

    float_features : list of float features

    cat_features : list of categorical features
        You need to pass float and categorical features separately in the same order they appeared in train dataset.
        For example if you had features f1,f2,f3,f4, where f2 and f4 were considered categorical, you need to pass here float_features=f1,f3, cat_features=f2,f4


    Returns
    -------
    predictions : list of formula values for the model and the features

    """
    if ntree_end == 0:
        ntree_end = catboost_model.tree_count
    else:
        ntree_end = min(ntree_end, catboost_model.tree_count)

    model = catboost_model

    assert len(float_features) >= model.float_feature_count
    assert len(cat_features) >= model.cat_feature_count

    # Binarise features
    binary_features = [0] * model.binary_feature_count
    binary_feature_index = 0

    for i in range(len(model.float_feature_borders)):
        if len(model.float_feature_borders[i]) > 0:
            for border in model.float_feature_borders[i]:
                binary_features[binary_feature_index] += 1 if (float_features[model.float_features_index[i]] > border) else 0
            binary_feature_index += 1
    transposed_hash = [0] * model.cat_feature_count
    for i in range(model.cat_feature_count):
        transposed_hash[i] = hash_uint64(cat_features[i])

    if len(model.one_hot_cat_feature_index) > 0:
        cat_feature_packed_indexes = {}
        for i in range(model.cat_feature_count):
            cat_feature_packed_indexes[model.cat_features_index[i]] = i
        for i in range(len(model.one_hot_cat_feature_index)):
            cat_idx = cat_feature_packed_indexes[model.one_hot_cat_feature_index[i]]
            hash = transposed_hash[cat_idx]
            if len(model.one_hot_hash_values[i]) > 0:
                for border_idx in range(len(model.one_hot_hash_values[i])):
                    binary_features[binary_feature_index] |= (1 if hash == model.one_hot_hash_values[i][border_idx] else 0) * (border_idx + 1)
                binary_feature_index += 1

    if hasattr(model, 'model_ctrs') and model.model_ctrs.used_model_ctrs_count > 0:
        ctrs = [0.] * model.model_ctrs.used_model_ctrs_count;
        calc_ctrs(model.model_ctrs, binary_features, transposed_hash, ctrs)
        for i in range(len(model.ctr_feature_borders)):
            for border in model.ctr_feature_borders[i]:
                binary_features[binary_feature_index] += 1 if ctrs[i] > border else 0
            binary_feature_index += 1

    # Extract and sum values from trees
    results = [0.0] * model.dimension
    tree_splits_index = 0
    current_tree_leaf_values_index = 0
    for tree_id in range(ntree_start, ntree_end):
        current_tree_depth = model.tree_depth[tree_id]
        index = 0
        for depth in range(current_tree_depth):
            border_val = model.tree_split_border[tree_splits_index + depth]
            feature_index = model.tree_split_feature_index[tree_splits_index + depth]
            xor_mask = model.tree_split_xor_mask[tree_splits_index + depth]
            index |= ((binary_features[feature_index] ^ xor_mask) >= border_val) << depth
        results = [result + delta for result, delta in zip(results, model.leaf_values[current_tree_leaf_values_index + index])]
        tree_splits_index += current_tree_depth
        current_tree_leaf_values_index += (1 << current_tree_depth)
    return [model.scale * res + bias for res, bias in zip(results, model.biases)]


def apply_catboost_model(float_features, cat_features=[], ntree_start=0, ntree_end=catboost_model.tree_count):
    """
    Applies the model built by CatBoost.

    Parameters
    ----------

    float_features : list of float features

    cat_features : list of categorical features
        You need to pass float and categorical features separately in the same order they appeared in train dataset.
        For example if you had features f1,f2,f3,f4, where f2 and f4 were considered categorical, you need to pass here float_features=f1,f3, cat_features=f2,f4


    Returns
    -------
    predictions : single (first) formula value for the model and the features

    """
    return apply_catboost_model_multi(float_features, cat_features, ntree_start, ntree_end)[0]
