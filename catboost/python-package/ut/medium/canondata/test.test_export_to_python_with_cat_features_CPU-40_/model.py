### Types to hold CTR's data

class catboost_model_ctr(object):
    def __init__(self, base_hash, base_ctr_type, target_border_idx, prior_num, prior_denom, shift, scale):
        self.base_hash = base_hash
        self.base_ctr_type = base_ctr_type
        self.target_border_idx = target_border_idx
        self.prior_num = prior_num
        self.prior_denom = prior_denom
        self.shift = shift
        self.scale = scale

    def calc(self, count_in_class, total_count):
        ctr = (count_in_class + self.prior_num) / float(total_count + self.prior_denom)
        return (ctr + self.shift) * self.scale


class catboost_bin_feature_index_value(object):
    def __init__(self, bin_index, check_value_equal, value):
        self.bin_index = bin_index
        self.check_value_equal = check_value_equal
        self.value = value


class catboost_ctr_mean_history(object):
    def __init__(self, sum, count):
        self.sum = sum
        self.count = count


class catboost_ctr_value_table(object):
    def __init__(self, index_hash_viewer, target_classes_count, counter_denominator, ctr_mean_history, ctr_total):
        self.index_hash_viewer = index_hash_viewer
        self.target_classes_count = target_classes_count
        self.counter_denominator = counter_denominator
        self.ctr_mean_history = ctr_mean_history
        self.ctr_total = ctr_total

    def resolve_hash_index(self, hash):
        try:
            return self.index_hash_viewer[hash]
        except KeyError:
            return None


class catboost_ctr_data(object):
    def __init__(self, learn_ctrs):
        self.learn_ctrs = learn_ctrs


class catboost_projection(object):
    def __init__(self, transposed_cat_feature_indexes, binarized_indexes):
        self.transposed_cat_feature_indexes = transposed_cat_feature_indexes
        self.binarized_indexes = binarized_indexes


class catboost_compressed_model_ctr(object):
    def __init__(self, projection, model_ctrs):
        self.projection = projection
        self.model_ctrs = model_ctrs


class catboost_model_ctrs_container(object):
    def __init__(self, used_model_ctrs_count, compressed_model_ctrs, ctr_data):
        self.used_model_ctrs_count = used_model_ctrs_count
        self.compressed_model_ctrs = compressed_model_ctrs
        self.ctr_data = ctr_data


###  Model data
class catboost_model(object):
    float_features_index = [
        0, 1, 2, 3, 4, 5,
    ]
    float_feature_count = 6
    cat_feature_count = 11
    binary_feature_count = 27
    tree_count = 40
    float_feature_borders = [
        [29.5, 35.5, 41.5, 54.5, 61.5],
        [38811, 51773, 59723, 200721, 202819.5, 203488.5, 215992, 250601, 292939, 313025.5, 337225.5, 338713, 342219, 350449],
        [9.5, 10.5, 11.5, 13.5, 14.5, 15.5],
        [1087, 3280, 7493, 11356, 17537.5],
        [808.5, 1622.5, 1862, 1944.5],
        [35.5, 42, 44.5, 46.5, 49, 55]
    ]
    tree_depth = [6, 4, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 2, 6, 6, 1, 6, 6, 6, 6, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]
    tree_split_border = [5, 2, 2, 2, 4, 1, 6, 5, 4, 3, 5, 3, 1, 1, 3, 1, 6, 3, 1, 3, 5, 4, 3, 2, 4, 4, 1, 3, 6, 4, 4, 11, 4, 4, 5, 1, 1, 1, 6, 4, 1, 3, 3, 3, 3, 5, 2, 3, 2, 2, 1, 10, 1, 5, 4, 6, 255, 7, 1, 2, 3, 6, 2, 4, 5, 2, 3, 2, 5, 2, 4, 6, 5, 1, 1, 2, 2, 2, 4, 1, 2, 1, 2, 3, 2, 2, 4, 6, 2, 3, 1, 2, 2, 8, 4, 2, 1, 3, 7, 1, 3, 2, 1, 12, 9, 5, 2, 4, 6, 2, 1, 2, 1, 3, 6, 2, 4, 11, 5, 10, 6, 4, 4, 2, 2, 2, 6, 4, 2, 1, 8, 14, 1, 4, 4, 6, 1, 1, 10, 4, 4, 11, 10, 6, 5, 4, 2, 2, 6, 6, 5, 1, 5, 1, 3, 3, 1, 1, 2, 1, 7, 4, 1, 5, 3, 2, 2, 3, 13, 1, 4, 1, 1, 2, 3, 3, 2, 6, 2, 6, 5, 3, 5, 1, 1, 3, 4, 7, 3, 6, 3, 1, 1, 6, 3, 6, 3, 3, 3, 4, 8, 1, 1, 9, 11, 6, 1, 1, 5, 3, 3, 1, 3, 1, 5, 7, 4, 4, 3, 2, 2, 2, 4, 2, 5]
    tree_split_feature_index = [16, 3, 2, 0, 1, 4, 16, 8, 5, 16, 16, 2, 3, 9, 18, 16, 16, 7, 23, 19, 20, 18, 15, 9, 7, 2, 3, 8, 16, 8, 5, 20, 13, 3, 13, 2, 3, 7, 20, 4, 3, 1, 4, 20, 23, 19, 3, 16, 2, 21, 18, 20, 3, 7, 5, 16, 6, 18, 13, 3, 21, 18, 8, 2, 19, 9, 9, 2, 7, 12, 7, 2, 14, 11, 5, 3, 21, 3, 12, 10, 18, 22, 11, 3, 3, 7, 12, 16, 23, 11, 19, 14, 4, 1, 16, 1, 20, 20, 7, 2, 19, 16, 19, 1, 20, 8, 5, 13, 2, 1, 1, 1, 14, 20, 2, 19, 4, 1, 16, 1, 19, 5, 19, 20, 14, 1, 12, 4, 3, 24, 20, 1, 2, 12, 0, 5, 12, 24, 20, 5, 11, 1, 1, 8, 19, 12, 15, 1, 5, 2, 3, 8, 5, 24, 13, 9, 15, 4, 5, 24, 20, 5, 21, 12, 9, 25, 5, 1, 1, 26, 20, 12, 24, 10, 0, 9, 15, 5, 1, 2, 3, 1, 2, 12, 24, 13, 5, 20, 10, 5, 9, 15, 0, 1, 7, 5, 0, 10, 9, 14, 20, 17, 25, 1, 1, 7, 12, 17, 18, 5, 14, 2, 17, 17, 1, 1, 1, 19, 12, 20, 19, 13, 18, 17, 0]
    tree_split_xor_mask = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    cat_features_index = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    one_hot_cat_feature_index = [9]
    one_hot_hash_values = [
        [-2114564283]
    ]
    ctr_feature_borders = [
        [0.999998987, 5.99999905, 6.99999905, 8.99999905, 10.999999, 11.999999, 12.999999],
        [1.99999905, 2.99999905, 5.99999905, 9.99999905, 10.999999, 12.999999],
        [8.99999905, 9.99999905, 12.999999],
        [3.99999905, 8.99999905, 10.999999],
        [6.99999905, 8.99999905, 9.99999905, 10.999999],
        [6.99999905, 7.99999905, 10.999999, 11.999999, 13.999999, 14.999999],
        [4.99999905, 5.99999905, 6.99999905, 8.99999905, 9.99999905],
        [4.99999905, 5.99999905, 6.99999905, 7.99999905, 11.999999],
        [7.99999905, 8.99999905, 14.999999],
        [1.99999905, 2.99999905, 6.99999905, 7.99999905, 12.999999, 13.999999],
        [4.99999905, 9.99999905, 10.999999],
        [1.99999905, 2.99999905, 3.99999905, 4.99999905, 6.99999905, 9.99999905, 12.999999],
        [1.99999905, 3.99999905, 4.99999905, 6.99999905, 7.99999905, 11.999999],
        [3.99999905, 4.99999905, 5.99999905, 6.99999905, 7.99999905, 8.99999905, 9.99999905, 10.999999, 12.999999, 13.999999, 14.999999],
        [10.999999, 11.999999, 12.999999],
        [9.99999905],
        [3.99999905, 4.99999905, 12.999999],
        [11.999999],
        [11.999999, 12.999999],
        [10.999999]
    ]

    ## Aggregated array of leaf values for trees. Each tree is represented by a separate line:
    leaf_values = [
        0.05375075410550256, 0.03729644162422627, 0, 0, 0.04568814098967718, 0.01631719321059899, 0, -0.0585935592646627, 0.04351251522826398, -0.03411776944876421, 0, -0.0585935592646627, 0.03263438642119798, -0.09374969482346032, 0, -0.09374969482346032, 0.05221501827391677, 0.02610750913695838, 0, 0, 0.04351251522826398, -0.03382109284325097, 0, 0, 0.04079298302649748, -0.01894163855993697, 0, -0.0585935592646627, 0.03729644162422627, -0.1339281354620862, 0, -0.0585935592646627, 0, 0, 0, 0, 0, -0.0585935592646627, 0, 0, 0.01631719321059899, -0.0585935592646627, 0, 0, 0, -0.09374969482346032, 0, 0, 0, 0.01631719321059899, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01631719321059899, 0.01631719321059899, 0, 0,
        0.03077733110854519, 0, 0.04389113263826071, 0, 0, 0, 0.02580575511212532, 0, 0.03415673946695239, -0.1451635839608471, 0.04572186189930509, -0.001418847787245718, 0.01289466018986642, -0.09258032442099695, 0.0207432124840551, -0.1418306533427804,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02696895386730021, 0, 0.02184258421458458, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0148780811310946, 0.01362957565926897, 0.01058460899429496, -0.02039619106423923, 0, 0, 0.009469601110419484, -0.04069638577459826, 0.01070265310080261, -0.0867460377414692, 0.01049893089718758, -0.04463543731433042, 0, 0, 0, -0.04726900988316225, 0.033906965094025, 0.01362735037500446, 0.03468281396176864, -0.08817191820797082, 0, -0.08655677551128405, 0, -0.0844499174562186,
        0, 0, 0.009791707969875904, 0, 0, 0, 0, 0.0167290409645506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.008617448465953871, 0, 0.007751096442077807, 0, 0, -0.06145302451803716, 0.008760226165597386, 0.01260857389071462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.03858065770357987, 0, -0.06113535379951917, 0, -0.03426023684985004, 0, 0, 0, 0, 0, 0, 0, 0, 0.009930729315178379, 0, 0.02228990864395599, 0.04022805252712714, 0.02173204934286821, -0.1007834056822679, 0.02723692333933142, -0.03160708949226579,
        -0.06063013790566749, 0.01308594323906059, 0, 0, 0, 0, 0, 0, -0.03671206776208822, 0, 0, 0, 0, 0, 0, 0, -0.03617829202737573, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.006272851036248207, -0.01084350035846521, 0.02001393374297899, 0, 0, 0.01966460114637309, 0.02008847321068896, 0, 0, -0.0252413143332931, 0.006928519620401256, 0, 0, -0.08310197383216411, 0.01280792785102035, 0, 0, 0, 0, 0, 0, -0.09033269983169924, -0.02773320269880325, 0, 0, -0.03304429658467271, 0, 0, 0, 0, 0,
        0, -0.04105101966138582, 0, 0.01111206572135007, 0, -0.03343915726354653, 0, -0.08623852789880564, 0.01283004519884025, 0, 0.01242883420609606, 0.01015921348862941, 0, 0, 0.004792109546379134, 0, 0, -0.03895909310334947, 0.008098752244865684, -0.01005795845157171, 0, 0, 0, 0, 0.01595218898424064, -0.03267415359564844, 0.01329668560218803, 0, 0, 0, 0.01407526882249118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.04069297932246676, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.03346814894833525, 0, 0, 0, -0.03056892346249915, 0, 0, 0, 0, 0, 0,
        -0.02349847443192262, 0, -0.04396633503823782, 0, 0, 0, 0, 0, 0.04030882963896162, 0, -0.03836804872242711, 0.007492068620092081, -0.03911301407399335, 0, -0.03911301407399335, 0, -0.01760355938540702, 0, -0.01880005154445539, 0.007610640604283936, 0, 0, -0.03096102472666132, -0.02827898240356466, 0.02566318638615727, 0.008455144996609211, 0.008733021762385221, 0.01171848276098065, 0, 0, -0.06042269187319097, 0.009185441390508435, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.02166497459938731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.006024223615706076, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0005228718537487716, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.008497353064128032, -0.00688698354055479, -0.0656844267124993, 0, 0, -0.01884854201141821, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01257856987317164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.03075616507657924, 0, 0.005943457393457481, -0.06341163818591161, 0, 0, -0.005729325247272404, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00689166339815223, 0, 0.01656044116407726, 0, 0, 0, 0.004445082619010324, -0.0500200942835128, 0, 0, -0.05914875830627245, -0.02389149753478626, 0, 0, 0.009906093167765017, 0, 0, 0, 0.007456485249427869, -0.0286072043735309, 0, 0, 0.01255299095587331, 0, 0, 0, 0.007860809952046232, 0, 0, 0, 0, 0, 0, 0, -0.02830227303622957, -0.02124011272153944, 0.005415034341541267, 0, 0.003787195349201187, 0, 0.009937161711586769, 0, 0.007817144162938617, 0, 0.006401868429690959, 0, 0.001110974314959787, 0, 0.003363439055683879, 0, 0.002063035585092846, -0.02836811477396322,
        0.004777332764013315, 0.007271950763473426, 0.003729229633449501, 0, 0, 0, 0.006292268437120203, 0, -0.03857065968336164, -0.01964899989490955, 0.02424305799701143, -0.06156473552497439, -0.01800953969941873, -0.02210176747669456, -0.05362739644304051, 0, 0.009287694004707315, 0, 0.003405554225065621, 0, 0.002822368376163211, 0, 0.002658247702744068, 0, -0.03690236794757693, 0, 0.02952085790642427, 0, 0, 0, 0, 0,
        0, 0, -0.03530698204468961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01183244255860573, 0, -0.002231051625196623, 0, 0, 0, -0.0482459981109789, 0, 0, 0, -0.001128118245507898, 0, 0, 0, -0.02163117728582474, 0, 0.004418716618504387, 0, 0.001247917825927577, 0.003829567739474034, 0, 0, -0.0218523565035798, 0, 0, 0, 0.002632441118419716, 0.001314462499928341, 0, 0, 0, 0,
        0, 0, -0.02012032245987066, 0, 0.0341076015936343, 0, 0.001009079577819576, 0, 0, 0, 0, 0, 0.004462514939912595, 0, -0.01475295742382689, 0, -0.01126661297292413, -0.01922266759183989, -0.008064902620343876, 0, -0.03274574979481915, -0.01373785187357761, 0.00216628592254594, 0.002164415085563418, 0, 0, 0, 0, 0.006894333215873215, -0.03025083925134461, 0.00433275686803296, 0.01253641366221028, 0, 0, 0, 0, 0.01892186557908854, 0, -0.0002626099465650229, 0, 0, 0, 0, 0, -0.01252357987912494, 0, 0.002952974113374726, 0, 0, 0, 0, 0, 0, -0.004073986732164354, 4.257158162756395e-05, 0.002112161711342429, 0, 0, 0, 0, 0.02411182337905202, -0.02139589710683515, -0.008521128453115992, 0,
        -0.02330626651491895, -0.003794170308464487, -0.01459846762694385, -0.0002698609343858463,
        0, 0, 0, 0, 0.01422241968767192, 0, 0.001910348141973782, 0, -0.02898183953039468, 0, 0.005436549894378456, 0, -0.003272552139140262, 0, 0.004270312414933023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.03507058764443027, 0, 0, 0, 0, 0, 0, 0, 0.01657342686538901, 0, 0, 0, 0, 0, 0.008876917442924155, 0, -0.01280694268464627, 0.02837850229749883, 0.00288105806912281, 0, 0, 0, 0, 0, -0.01935222988839802, 0, 0, 0, -0.01055093141163407, 0, 0, 0, -0.01955684040451916, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.008211940877613929, -0.009760553200273688, -0.001747453065429917, 0, 0, 0, 0, 0, -0.01680060189756161, 0, 0.01084503417269607, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01244894449792057, 0, 0, 0, 0, 0, 0.009784159408786035, 0, -0.0001768327657595037, -0.04035937584761282,
        -0.0001261676510038188, -0.02815435369526698,
        0, 0, 0.006273412457615361, 0, 0.006319327353600353, 0, 0.0006524813609527948, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.006813735495020352, 0, 0.00517050789740661, 0, 0.0053438595553436, 0, -0.01609723625907948, -0.006920318994699249, -0.01397331594991627, 0, -0.01960054522391024, 0, 0.01171404942708552, 0, 0, 0, -0.00233527338444726, 0, 0, 0, 0.002013743487896561, 0, 0, 0, 0, 0, 0, 0, -0.0001660490004861935, 0, 0.003039713282774876, 0, 0.002704542709445547, 0, 0.004798543281822166, 0, 0.001181985375206825, 0, 0, 0, 0.01775198401167956, 0, -0.04045456718103033, -0.008184012199675001, 0.0120462325659789, -0.02918393676286683,
        0, 0, 0, 0.002033498872300127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.03441350669179424, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.006753481655928584, 0, 0, 0, 0.001243124533919096, 0, 0, 0, 0.002754386639934431, 0, 0, 0, 0, 0, 0, 0, -0.002701556601030693, 0, 0, 0, -0.008823629247287582, 0, 0, 0, -0.002638729142053536, 0, 0, 0, 0.024572180722335,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0001367443573163814, 0, 0, 0, 0.00115000113966276, 0, 0, 0, 0.004764754440202719, 0, 0, 0, 0.00127228606529619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01396495550717172, 0, 0, 0, 0.004612240254912415, 0, 0, 0, 0.001959430556372147, 0, 0, 0, -0.004430992942069447, 0, 0, 0, -0.01394465200291152,
        0, -0.03492865888875061, 0, 0, 0, 0.00658545603571505, 0, 0, 0, 0.009951969314887989, 0, 0.01041734033738156, 0, -0.004694830880721548, 0, 0.00269346128478179, 0, -0.01530426737985523, 0, 0.03173185283353581, 0, 0, 0, 0, 0, -0.01136358320603548, 0, 0, 0, 0.006287137073286456, 0, 0, 0, -0.0281644094226252, 0, 0, 0, -0.004686225348508865, 0, 0.005480397552266461, 0, -0.003153589846622973, 0, 0, 0, 0.0007278674124867413, 0, 0.001999959582422095, 0, -0.007036637034189911, 0, 0, 0, 0.00233057112582968, 0, 0, 0, 0, 0, 0.02306338918996977, 0, 0.00363751340260082, 0, 0,
        0.001679860428646068, 0, 0, 0, -0.02993970606687636, 0, -0.000323337039733128, 0.02133569335111932,
        0, 0, 0, 0, 0, 0, 0, 0.01192249188290563, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.02091430346930857, -1.461515615008934e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.01627140665375995, 0, 0, 0, 0, 0, 0, 0, 0.01973742050760553,
        0.004951586126107067, 0, 0.01039609259176406, 0, 0, 0, -0.02610656441874047, 0.009662285787211686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.02740973909325706, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.006131440714133866, 0, -0.001877435641921738, 0, 0, 0.0007548416549866516, -0.03683464964382321, 0.02555205051357394, 0.001717119959932629, 0, 0, 0, 0, 0.003648653290930544, 0, 0, 0, 0, -0.02033399649146011, 0, 0, 0, 0, 0.02938011211363565, 0.003276977873778043, 0, 0, 0, 0.001799807710106764, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0.002151825230275884, 0, 0, 0, -0.01729189014892495, 0, 0, 0, 0.00309128409953812, 0, 0, 0, 0, 0, 0, 0, -0.005131017382499049, 0, 0, 0, 0, 0, 0, 0, 0.004190554357355722, 0, 0, 0, 0, 0, 0, 0, -0.02014872550817881, 0, 0, 0, 0, 0, 0, 0, -0.008819304390988429, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, -0.0009677452682408026, 0, 0.004331688453007885, -0.002654493593118948, 0, 0, -0.00135649898852385, 0, 0.01631264405875196, -0.002125100527228177, -0.0003955593871246462, 0.002187491151591644, 0.00870690627024942, 0, -0.0007616971330715933, 0, -0.07540609014038251, -0.009126448149144569, 0.002626720778968358, 0.0001323536127079466, 0.02701803096020043, 0, 0.004590279319500715, 0.01229529362278392, 0, 0, 0, 0, 0, 0, 0, 0, 0.004419464236259102, 0, 0.002570011514849649, 0.001503787913036666, 0, 0, 0, 0, 0, 0, 0.0005833038263431126, -0.01114521236868066, 0, 0, -0.0006149992575630514, 0, 0.01296038857666987, -0.003451609838529389, 0.001418506779441002, -0.008158643662751106, 0, 0, 0, 0,
        -0.01060402091400029, 0, 0, 0, 0, 0, 0.01819940069222623, 0, 0.003686555938420375, 0, 0.006379302984590612, 0, 0, 0, -0.007618151424447077, 0, -0.002624725176201337, 0, 0.004655991070488798, 0, 0, 0, 0, -0.0107368076894269, 0.00237749001840217, 0, 0, 0, 0, 0, 0.0007619050426411996, 0, 0, 0, 0.001004402721972497, 0, 0, 0, 0.003886177238898704, 0, 0, 0, -0.0003178532775591123, 0, 0, 0, -0.001044261264901177, 0, 0, 0, -0.02453900213305121, 0.0249940899305719, 0, 0, -0.02065679081228138, 0, 0, 0, 0.00135963133784779, 0, 0, 0, 0, 0,
        0.005194707179015388, 0, 0, 0, 0.005362593704642685, 0, -0.01654906980135262, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.01954759734830157, 0, -0.01880898606165764, 0.02488095092204856, 0.006872901336502808, 0, 0, 0, -0.01345291923555046, 0, 0, 0, 0, 0, 0, 0, -0.003071715243604518, 0, 0, 0, 0.004882754030714601, 0, 0, 0, 0.004331267101530867, 0, 0, -0.001557167019500004, 4.671184296470652e-05, 0, 0.001334063148848942, 0, 0.0001119177912011839, 0, 0, 0, 0.01041950880126794, 0, 0, 0.01192804654429909, 0.0005342664553673607, 0, -0.02295775537867418, 0.008294947272697632, -0.001099437742274237, 0, 0, 0.002255611392314489,
        0, -0.003784489618841391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.004423246772861651, -0.0004363475027229986, 0, 0, 0, 0.01312507333442352, 0, 0, 0, -0.007386887421088914, 0, 0, 0, 0, 0, 0, 0, -0.007913748937651099, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.02099816591503205, 0.00260609375669753, 0, 0.009028308353715259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.01288874160366824, 0, 0, 0, -0.02785204212620477, 0, -0.01527667940999798, 0, 0, 0, 0.0001268999003103068, -0.01098343569997899, 0.009470125711573669, 0.0007750795258381296, -0.0002958032415656047, -0.001123151352562036, -0.003500990653759166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001110068707235342, 0.009227655265888273, 0, -0.00893447809105204, 0, 0.01527914796406747, 0, 0.01960667581909115, 0, -0.009682227507397851, 0, 0, 0, -0.0004328786850555253, -0.00188087815133122, 0.003652515518365493, 0, 0, -0.001533509313315545, 0, 0, 0, 0, 0, 0, 0.003532129224724357, 0, 0, 0, 0, 0, 0, 0, 0.001977232158140642, 0.001194415355095806,
        0.003783316671739405, 0, -0.000454604371243923, 0, -0.0213602012004475, 0, 0.002388257199751972, 0, 0.02171558205416356, -0.01016065826692991, -0.0009658342518754495, 0, 0.0190633241053551, 0, 0, -0.001739980153700719, 0.01306830822289533, 0, -0.002429434198652156, 0, -0.002627233234297004, 0, 0, 0, -0.01833280897470247, 0, 0.003672028880611961, 0, 0, 0, 0, 0, -0.01112873950316355, 0, -0.001496876442735028, 0.006506058352943371, 0, 0, 0, 0, -0.01234492480263437, 0.01303019454014628, -0.003273959251277318, 0.0001942791597579984, 0.004077320780813147, 0, 0, 0.001387869674035566, 0, 0, 0.004869743440011067, 0, 0, 0, -0.0003666464426988501, 0, 0, 0, 0.01074805738092276, 0.0003356423949360608, 0, -0.01073831957379735, 0, -0.01626849987696894,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.02844735942854035, 0, 0.005929373405855479, 0, 0, 0, 0, 0, 0.004203799035475532, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.006710985384344717, 0, -0.01809161560172087, 0, 0.001060127975805377, -0.000118570414003918, -0.0006320530211052527, 0.003579920402786835, 0, 0, 0, 0, 0.0001663450088519389, 0.000691874510962165, 0.01800897529363108, 0.01202724643726337,
        0, 0, 0, 0, 0, -0.004200435595091409, 0, 0, -0.005515264537214877, 0.0005026830802252948, 0, 0, 0, 0.02071767047918766, 0, -0.00947893069489786, 0.003664380620239583, 0, 0, 0, 0, 0.007050412218525298, 0, 0, -0.01328693923824349, 0, 0, 0, 0, -0.0219937153727417, 0, 0, 0.003102052120219256, 0, 0, 0, 0, -0.001095907176098743, 0, 0, 0.001580576221544308, 0, 0, 0, 0, 0.001325818157691786, 0, -0.00156228936367972, 0, 0.005837636316038301, 0, 0.00708002520806318, 0, -0.003247315568883374, 0, 0.006923269401024108, 0.005417181837130349, 0.006247865841574215, 0, -0.002106304690966661, 0, 0.001767685484562062, 0, -0.01143516891124521,
        -0.01045640633848188, 0, 0.003699444309647398, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0003282579892251229, 0.01510793311794632, 0, 0, 0, 0, 0, 0, -0.005909037930570894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.002973775130857902, -0.009728771537446616, 0, 0, 0.01128406122578505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0.008202112582341119, 0, 0, -0.005784838277152207, 0, 0, 0.01065231829402083, -0.004566436591131375, 0.002751007398113117, 0, 0, 0.001752329413838464, -0.002396143963189932, 0, -0.008999981940916581, 0, 0.006801943708664976, 0, 0.001550261827960576, 0.002894265114655015, 0.001778989638152934, 0, 0.004557207785409545, 0, -2.398420860007962e-05, 0, 0, 0.001486764120422787, 0, 0, 0.0001845896305670381, 0, 0.004029929394794117, 0, 0, 0, -0.008488371017122522, 0, -0.008744266810903335, 0, -0.020356125738885, 0, 0, 0, 0.01397618647973504, 0, 0, 0, -0.004773178655442087, 0, 0, 0, -0.001532179926981173, 0, -0.00659264677949302, 0, 0, 0, 0, 0, 0.001248313409283869, 0, -0.01509644468867691,
        0, 0, 0, 0, 0, 0, -0.0009817564661938466, 0, -0.006911982112498573, 0, 0, 0, -0.008089227204254109, 0, -0.007657848616118641, 0, 0, 0, 0, 0, 0.002846857704927728, 0, 0, 0, -0.002216647015868318, 0, 0, 0, 0.0002710802196146701, 0, -0.01985064033227852, 0, 0, 0, 0, 0, -0.001231250687259974, 0, 0.0003514594152232668, 0, 0.001979903386407782, 0, 0.01165249048912859, 0, 0.002605612854545401, 0, 0.002923448080933908, -0.008325786521458755, -0.01479110855795126, 0, 0.006886796390885418, 0, -0.001704607862539115, 0, 0.004007472226780603, 0, 0.01448108678671217, 0.0129292198338035, -0.03048780561679532, 0, -0.000663972972380941, 0, 0.007689624941701644, 0,
        0, 0, 0.0003010627484184701, 0, -0.003542251462386124, 0, 0.01019824716090942, 0.01196068224713521, 0.002180977364603579, 0, -0.0005790353092052784, 0, 0.008765911617896416, 0, -0.01889445995124491, 0, 0, 0, -0.001454801610240905, 0, 0, 0, -0.007483257107440078, 0, 0.01401099591224672, 0, 0.005250315615118514, -0.007702095588187887, 0, 0, -0.01418455635291207, 0, 0, 0, 0, 0, 0, 0, -0.003897834469521246, 0, 0.0003747820812688044, 0, 0.001163670656386876, 0, 0, 0, 0, 0, 0.001148937161955473, 0, 0.001425128216392988, 0, -0.0009633156925398643, 0, 0.001351062306684207, 0, 0.002076039382200065, 0, -0.0004204130905830144, 0, -0.002864444097357524, 0, -0.004710350427746344, 0,
        0, -0.001066348060585139, 0, 0, 0, -0.001626286716497663, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.004899911831836102, 0, 0, 0, -0.009506427549749593, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0007507339592614955, -0.0005078689815287489, -0.0001010157255125586, -0.003460006469846591, -0.0134177427634279, 0, 0, -0.01801075803290711, 0, 0, 0, 0, 0, 0.008850750444500533, 0.009552837714324027, -0.0008128666897104794, -0.02357672465306552, 0.004080190457283264, 0.0003379033830747772, 0.002833468133285572, 0, 0.006480344212032652, 0, 0.001419997855575471, 0, 0, 0, 0, -0.002027442207120944, 0.0004613648185712707, 0, 0.006390418072676499,
        0.00399772075064391, 0.006841538018580535, 0, 0, 0, 0, 0, 0, 0, 0.001868748923873725, 0.0004867708742840016, 0.001300315386985061, 0, 0, 0, 0.006165170146607113, -0.04054194061091602, -0.004810364601161985, 0, 0, 0, -0.01901984650970174, 0, 0, 0, 0.008397521755115918, -0.001122791835184538, -0.0003598174810417543, 0, 0.005401944523114276, 0.008837227452869955, -0.01096941349479311, 0, 0, 0, 0, 0, 0.005994896750810576, 0, 0, 0, 0.016410294642159, 0, -0.01067373191541102, 0, -0.006530947469692756, 0, 0, 0, 0.01876261902833634, 0, 0, 0, 0.02013453542899223, 0, 0, 0, -0.007155980791204414, 0, 0.001732732697847225, 0, 0.0002145111988118587, 0, -0.00206664492374882,
        0, 0.001453977157653057, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0009682938207470164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001106128633281188, 0, 0, 0, -0.004013471812037342, 0.00369824848102721, 0.01795851353394221, 0, 0, 0, 0, 0, 0, 0, -0.017595055495696, -0.03522778892917392, 0.007723116744940182, 0, 0, -0.009375582278528931, 0.01344522785673231, 0.00050661000322003, -0.003654446526486553, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0008204288936942294, 0, 0, 0.004075262760562553, 0.001783264897663994,
        0, 0, 0, 0.001025465731894968, 0, 0, 0, -0.001573456070638234, 0, 0, 0, 0.001038450996229905, 0, 0, 0, -0.002037616116462221, 0, 0, 0, 0, 0, 0.005941068000702035, 0, -0.008687949046066182, 0, 0, 0, 0.006463428936794701, 0, 0, 0, 0.002096498430050696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.002303900765879446, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.00542595143749033
    ]
    scale = 1
    bias = 0.7821782231
    model_ctrs = catboost_model_ctrs_container(
        used_model_ctrs_count = 20,
        compressed_model_ctrs = [
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [3],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387099, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387099, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387099, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = 0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [4],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387100, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387100, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387100, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = 0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [5],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387101, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387101, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387101, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 16890222057671696978, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = 0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [6],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 16890222057671696977, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = 0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [7],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387103, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387103, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387103, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = 0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [8],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387072, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387072, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 16890222057671696975, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = 0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [10],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387074, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387074, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = 0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387074, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = 0, scale = 15)
                ]
            )
        ],
        ctr_data = catboost_ctr_data(
            learn_ctrs = {
                14216163332699387072 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 8473802870189803490 : 2, 7071392469244395075 : 1, 18446744073709551615 : 0, 8806438445905145973 : 3, 619730330622847022 : 0, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 0, count = 12), catboost_ctr_mean_history(sum = 1.4013e-45, count = 5), catboost_ctr_mean_history(sum = 2.94273e-44, count = 61), catboost_ctr_mean_history(sum = 0, count = 1)],
                    ctr_total = [0, 12, 1, 5, 21, 61, 0, 1]
                ),
                14216163332699387074 :
                catboost_ctr_value_table(
                    index_hash_viewer = {2136296385601851904 : 0, 7428730412605434673 : 1, 9959754109938180626 : 3, 14256903225472974739 : 5, 8056048104805248435 : 2, 18446744073709551615 : 0, 12130603730978457510 : 6, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 10789443546307262781 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 2.8026e-44, count = 73), catboost_ctr_mean_history(sum = 0, count = 2), catboost_ctr_mean_history(sum = 0, count = 2), catboost_ctr_mean_history(sum = 1.4013e-45, count = 0), catboost_ctr_mean_history(sum = 0, count = 1), catboost_ctr_mean_history(sum = 0, count = 1), catboost_ctr_mean_history(sum = 1.4013e-45, count = 0)],
                    ctr_total = [20, 73, 0, 2, 0, 2, 1, 0, 0, 1, 0, 1, 1, 0]
                ),
                14216163332699387099 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 15379737126276794113 : 5, 18446744073709551615 : 0, 14256903225472974739 : 2, 18048946643763804916 : 4, 2051959227349154549 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 7024059537692152076 : 6, 18446744073709551615 : 0, 15472181234288693070 : 1, 8864790892067322495 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 1.4013e-44, count = 58), catboost_ctr_mean_history(sum = 1.4013e-45, count = 6), catboost_ctr_mean_history(sum = 1.4013e-45, count = 5), catboost_ctr_mean_history(sum = 4.2039e-45, count = 6), catboost_ctr_mean_history(sum = 0, count = 4), catboost_ctr_mean_history(sum = 2.8026e-45, count = 0), catboost_ctr_mean_history(sum = 7.00649e-45, count = 0)],
                    ctr_total = [10, 58, 1, 6, 1, 5, 3, 6, 0, 4, 2, 0, 5, 0]
                ),
                14216163332699387100 :
                catboost_ctr_value_table(
                    index_hash_viewer = {7537614347373541888 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 5903587924673389870 : 1, 18278593470046426063 : 6, 10490918088663114479 : 8, 18446744073709551615 : 0, 407784798908322194 : 10, 5726141494028968211 : 3, 1663272627194921140 : 0, 8118089682304925684 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 15431483020081801594 : 9, 18446744073709551615 : 0, 18446744073709551615 : 0, 1403990565605003389 : 2, 3699047549849816830 : 11, 14914630290137473119 : 7},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 0, count = 3), catboost_ctr_mean_history(sum = 5.60519e-45, count = 24), catboost_ctr_mean_history(sum = 4.2039e-45, count = 16), catboost_ctr_mean_history(sum = 1.4013e-45, count = 3), catboost_ctr_mean_history(sum = 5.60519e-45, count = 16), catboost_ctr_mean_history(sum = 1.4013e-45, count = 1), catboost_ctr_mean_history(sum = 0, count = 4), catboost_ctr_mean_history(sum = 9.80909e-45, count = 3), catboost_ctr_mean_history(sum = 0, count = 3), catboost_ctr_mean_history(sum = 0, count = 1), catboost_ctr_mean_history(sum = 0, count = 5), catboost_ctr_mean_history(sum = 2.8026e-45, count = 0)],
                    ctr_total = [0, 3, 4, 24, 3, 16, 1, 3, 4, 16, 1, 1, 0, 4, 7, 3, 0, 3, 0, 1, 0, 5, 2, 0]
                ),
                14216163332699387101 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 13987540656699198946 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18089724839685297862 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 10353740403438739754 : 2, 3922001124998993866 : 0, 13686716744772876732 : 1, 18293943161539901837 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 0, count = 37), catboost_ctr_mean_history(sum = 0, count = 4), catboost_ctr_mean_history(sum = 3.08286e-44, count = 20), catboost_ctr_mean_history(sum = 0, count = 13), catboost_ctr_mean_history(sum = 0, count = 2), catboost_ctr_mean_history(sum = 0, count = 3)],
                    ctr_total = [0, 37, 0, 4, 22, 20, 0, 13, 0, 2, 0, 3]
                ),
                14216163332699387103 :
                catboost_ctr_value_table(
                    index_hash_viewer = {3607388709394294015 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18356215166324018775 : 0, 18365206492781874408 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0, 14559146096844143499 : 1, 18446744073709551615 : 0, 18446744073709551615 : 0, 11416626865500250542 : 3, 5549384008678792175 : 2},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 0, count = 14), catboost_ctr_mean_history(sum = 0, count = 22), catboost_ctr_mean_history(sum = 0, count = 22), catboost_ctr_mean_history(sum = 2.66247e-44, count = 17), catboost_ctr_mean_history(sum = 2.8026e-45, count = 3), catboost_ctr_mean_history(sum = 1.4013e-45, count = 1)],
                    ctr_total = [0, 14, 0, 22, 0, 22, 19, 17, 2, 3, 1, 1]
                ),
                16890222057671696975 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 8473802870189803490 : 2, 7071392469244395075 : 1, 18446744073709551615 : 0, 8806438445905145973 : 3, 619730330622847022 : 0, 18446744073709551615 : 0},
                    target_classes_count = 0,
                    counter_denominator = 82,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 1.68156e-44, count = 6), catboost_ctr_mean_history(sum = 1.14906e-43, count = 1)],
                    ctr_total = [12, 6, 82, 1]
                ),
                16890222057671696977 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 14452488454682494753 : 1, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 1388452262538353895 : 5, 8940247467966214344 : 9, 4415016594903340137 : 11, 18446744073709551615 : 0, 18446744073709551615 : 0, 41084306841859596 : 7, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 8678739366408346384 : 4, 18446744073709551615 : 0, 4544226147037566482 : 12, 14256903225472974739 : 6, 16748601451484174196 : 10, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 5913522704362245435 : 0, 1466902651052050075 : 3, 2942073219785550491 : 8, 15383677753867481021 : 2, 18446744073709551615 : 0},
                    target_classes_count = 0,
                    counter_denominator = 16,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 1.54143e-44, count = 11), catboost_ctr_mean_history(sum = 2.24208e-44, count = 2), catboost_ctr_mean_history(sum = 8.40779e-45, count = 13), catboost_ctr_mean_history(sum = 8.40779e-45, count = 16), catboost_ctr_mean_history(sum = 1.4013e-45, count = 10), catboost_ctr_mean_history(sum = 4.2039e-45, count = 5)],
                    ctr_total = [11, 11, 16, 2, 6, 13, 6, 16, 1, 10, 3, 5, 1]
                ),
                16890222057671696978 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 13987540656699198946 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18089724839685297862 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 10353740403438739754 : 2, 3922001124998993866 : 0, 13686716744772876732 : 1, 18293943161539901837 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 0,
                    counter_denominator = 42,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 5.1848e-44, count = 4), catboost_ctr_mean_history(sum = 5.88545e-44, count = 13), catboost_ctr_mean_history(sum = 2.8026e-45, count = 3)],
                    ctr_total = [37, 4, 42, 13, 2, 3]
                )
            }
        )
    )


### Routines to compute CTRs

def calc_hash(a, b):
    max_int = 0xffFFffFFffFFffFF
    MAGIC_MULT = 0x4906ba494954cb65
    return (MAGIC_MULT * ((a + MAGIC_MULT * b) & max_int)) & max_int


def calc_hashes(binarized_features, hashed_cat_features, transposed_cat_feature_indexes, binarized_feature_indexes):
    result = 0
    for cat_feature_index in transposed_cat_feature_indexes:
        result = calc_hash(result, hashed_cat_features[cat_feature_index])
    for bin_feature_index in binarized_feature_indexes:
        binary_feature = binarized_features[bin_feature_index.bin_index]
        if not(bin_feature_index.check_value_equal):
            result = calc_hash(result, 1 if (binary_feature >= bin_feature_index.value) else 0)
        else:
            result = calc_hash(result, 1 if (binary_feature == bin_feature_index.value) else 0)
    return result


def calc_ctrs(model_ctrs, binarized_features, hashed_cat_features, result):
    ctr_hash = 0
    result_index = 0

    for i in range(len(model_ctrs.compressed_model_ctrs)):
        proj = model_ctrs.compressed_model_ctrs[i].projection
        ctr_hash = calc_hashes(binarized_features, hashed_cat_features, proj.transposed_cat_feature_indexes, proj.binarized_indexes)
        for j in range(len(model_ctrs.compressed_model_ctrs[i].model_ctrs)):
            ctr = model_ctrs.compressed_model_ctrs[i].model_ctrs[j]
            learn_ctr = model_ctrs.ctr_data.learn_ctrs[ctr.base_hash]
            ctr_type = ctr.base_ctr_type
            bucket = learn_ctr.resolve_hash_index(ctr_hash)
            if bucket is None:
                result[result_index] = ctr.calc(0, 0)
            else:
                if ctr_type == "BinarizedTargetMeanValue" or ctr_type == "FloatTargetMeanValue":
                    ctr_mean_history = learn_ctr.ctr_mean_history[bucket]
                    result[result_index] = ctr.calc(ctr_mean_history.sum, ctr_mean_history.count)
                elif ctr_type == "Counter" or ctr_type == "FeatureFreq":
                    ctr_total = learn_ctr.ctr_total
                    denominator = learn_ctr.counter_denominator
                    result[result_index] = ctr.calc(ctr_total[bucket], denominator)
                elif ctr_type == "Buckets":
                    ctr_history = learn_ctr.ctr_total
                    target_classes_count = learn_ctr.target_classes_count
                    total_count = 0
                    good_count = ctr_history[bucket * target_classes_count + ctr.target_border_idx];
                    for class_id in range(target_classes_count):
                        total_count += ctr_history[bucket * target_classes_count + class_id]
                    result[result_index] = ctr.calc(good_count, total_count)
                else:
                    ctr_history = learn_ctr.ctr_total;
                    target_classes_count = learn_ctr.target_classes_count;

                    if target_classes_count > 2:
                        good_count = 0
                        total_count = 0
                        for class_id in range(ctr.target_border_idx + 1):
                            total_count += ctr_history[bucket * target_classes_count + class_id]
                        for class_id in range(ctr.target_border_idx + 1, target_classes_count):
                            good_count += ctr_history[bucket * target_classes_count + class_id]
                        total_count += good_count;
                        result[result_index] = ctr.calc(good_count, total_count);
                    else:
                        result[result_index] = ctr.calc(ctr_history[bucket * 2 + 1], ctr_history[bucket * 2] + ctr_history[bucket * 2 + 1])
            result_index += 1



cat_features_hashes = {
    "Female": -2114564283,
    "Protective-serv": -2075156126,
    "Assoc-voc": -2029370604,
    "Married-civ-spouse": -2019910086,
    "Federal-gov": -1993066135,
    "Transport-moving": -1903253868,
    "Farming-fishing": -1888947309,
    "Prof-school": -1742589394,
    "Self-emp-inc": -1732053524,
    "?": -1576664757,
    "Handlers-cleaners": -1555793520,
    "0": -1438285038,
    "Philippines": -1437257447,
    "Male": -1291328762,
    "11th": -1209300766,
    "Unmarried": -1158645841,
    "Local-gov": -1105932163,
    "Divorced": -993514283,
    "Some-college": -870577664,
    "Asian-Pac-Islander": -787966085,
    "Sales": -760428919,
    "Self-emp-not-inc": -661998850,
    "Widowed": -651660490,
    "Masters": -453513993,
    "State-gov": -447941100,
    "Doctorate": -434936054,
    "White": -218697806,
    "Own-child": -189887997,
    "Amer-Indian-Eskimo": -86031875,
    "Exec-managerial": -26537793,
    "Husband": 60472414,
    "Italy": 117615621,
    "Not-in-family": 143014663,
    "n": 239748506,
    "Married-spouse-absent": 261588508,
    "Prof-specialty": 369959660,
    "Assoc-acdm": 475479755,
    "Adm-clerical": 495735304,
    "Bachelors": 556725573,
    "HS-grad": 580496350,
    "Craft-repair": 709691013,
    "Other-relative": 739168919,
    "Other-service": 786213683,
    "9th": 840896980,
    "Separated": 887350706,
    "10th": 888723975,
    "Mexico": 972041323,
    "Hong": 995245846,
    "1": 1121341681,
    "Tech-support": 1150039955,
    "Black": 1161225950,
    "Canada": 1510821218,
    "Wife": 1708186408,
    "United-States": 1736516096,
    "Never-married": 1959200218,
    "Machine-op-inspct": 2039859473,
    "7th-8th": 2066982375,
    "Private": 2084267031,
}

def hash_uint64(string):
    return cat_features_hashes.get(str(string), 0x7fFFffFF)


### Applicator for the CatBoost model

def apply_catboost_model(float_features, cat_features=[], ntree_start=0, ntree_end=catboost_model.tree_count):
    """
    Applies the model built by CatBoost.

    Parameters
    ----------

    float_features : list of float features

    cat_features : list of categorical features
        You need to pass float and categorical features separately in the same order they appeared in train dataset.
        For example if you had features f1,f2,f3,f4, where f2 and f4 were considered categorical, you need to pass here float_features=f1,f3, cat_features=f2,f4


    Returns
    -------
    prediction : formula value for the model and the features

    """
    if ntree_end == 0:
        ntree_end = catboost_model.tree_count
    else:
        ntree_end = min(ntree_end, catboost_model.tree_count)

    model = catboost_model

    assert len(float_features) >= model.float_feature_count
    assert len(cat_features) >= model.cat_feature_count

    # Binarise features
    binary_features = [0] * model.binary_feature_count
    binary_feature_index = 0

    for i in range(len(model.float_feature_borders)):
        for border in model.float_feature_borders[i]:
            binary_features[binary_feature_index] += 1 if (float_features[model.float_features_index[i]] > border) else 0
        binary_feature_index += 1
    transposed_hash = [0] * model.cat_feature_count
    for i in range(model.cat_feature_count):
        transposed_hash[i] = hash_uint64(cat_features[i])

    if len(model.one_hot_cat_feature_index) > 0:
        cat_feature_packed_indexes = {}
        for i in range(model.cat_feature_count):
            cat_feature_packed_indexes[model.cat_features_index[i]] = i
        for i in range(len(model.one_hot_cat_feature_index)):
            cat_idx = cat_feature_packed_indexes[model.one_hot_cat_feature_index[i]]
            hash = transposed_hash[cat_idx]
            for border_idx in range(len(model.one_hot_hash_values[i])):
                binary_features[binary_feature_index] |= (1 if hash == model.one_hot_hash_values[i][border_idx] else 0) * (border_idx + 1)
            binary_feature_index += 1

    if hasattr(model, 'model_ctrs') and model.model_ctrs.used_model_ctrs_count > 0:
        ctrs = [0.] * model.model_ctrs.used_model_ctrs_count;
        calc_ctrs(model.model_ctrs, binary_features, transposed_hash, ctrs)
        for i in range(len(model.ctr_feature_borders)):
            for border in model.ctr_feature_borders[i]:
                binary_features[binary_feature_index] += 1 if ctrs[i] > border else 0
            binary_feature_index += 1

    # Extract and sum values from trees
    result = 0.
    tree_splits_index = 0
    current_tree_leaf_values_index = 0
    for tree_id in range(ntree_start, ntree_end):
        current_tree_depth = model.tree_depth[tree_id]
        index = 0
        for depth in range(current_tree_depth):
            border_val = model.tree_split_border[tree_splits_index + depth]
            feature_index = model.tree_split_feature_index[tree_splits_index + depth]
            xor_mask = model.tree_split_xor_mask[tree_splits_index + depth]
            index |= ((binary_features[feature_index] ^ xor_mask) >= border_val) << depth
        result += model.leaf_values[current_tree_leaf_values_index + index]
        tree_splits_index += current_tree_depth
        current_tree_leaf_values_index += (1 << current_tree_depth)
    return model.scale * result + model.bias



