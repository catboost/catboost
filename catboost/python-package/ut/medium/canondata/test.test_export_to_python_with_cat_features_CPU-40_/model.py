### Types to hold CTR's data

class catboost_model_ctr(object):
    def __init__(self, base_hash, base_ctr_type, target_border_idx, prior_num, prior_denom, shift, scale):
        self.base_hash = base_hash
        self.base_ctr_type = base_ctr_type
        self.target_border_idx = target_border_idx
        self.prior_num = prior_num
        self.prior_denom = prior_denom
        self.shift = shift
        self.scale = scale

    def calc(self, count_in_class, total_count):
        ctr = (count_in_class + self.prior_num) / float(total_count + self.prior_denom)
        return (ctr + self.shift) * self.scale


class catboost_bin_feature_index_value(object):
    def __init__(self, bin_index, check_value_equal, value):
        self.bin_index = bin_index
        self.check_value_equal = check_value_equal
        self.value = value


class catboost_ctr_mean_history(object):
    def __init__(self, sum, count):
        self.sum = sum
        self.count = count


class catboost_ctr_value_table(object):
    def __init__(self, index_hash_viewer, target_classes_count, counter_denominator, ctr_mean_history, ctr_total):
        self.index_hash_viewer = index_hash_viewer
        self.target_classes_count = target_classes_count
        self.counter_denominator = counter_denominator
        self.ctr_mean_history = ctr_mean_history
        self.ctr_total = ctr_total

    def resolve_hash_index(self, hash):
        try:
            return self.index_hash_viewer[hash]
        except KeyError:
            return None


class catboost_ctr_data(object):
    def __init__(self, learn_ctrs):
        self.learn_ctrs = learn_ctrs


class catboost_projection(object):
    def __init__(self, transposed_cat_feature_indexes, binarized_indexes):
        self.transposed_cat_feature_indexes = transposed_cat_feature_indexes
        self.binarized_indexes = binarized_indexes


class catboost_compressed_model_ctr(object):
    def __init__(self, projection, model_ctrs):
        self.projection = projection
        self.model_ctrs = model_ctrs


class catboost_model_ctrs_container(object):
    def __init__(self, used_model_ctrs_count, compressed_model_ctrs, ctr_data):
        self.used_model_ctrs_count = used_model_ctrs_count
        self.compressed_model_ctrs = compressed_model_ctrs
        self.ctr_data = ctr_data


###  Model data
class catboost_model(object):
    float_features_index = [
        0, 1, 2, 3, 4, 5,
    ]
    float_feature_count = 6
    cat_feature_count = 11
    binary_feature_count = 23
    tree_count = 40
    float_feature_borders = [
        [17.5, 30.5, 32, 35.5, 36.5, 38.5, 41.5, 44.5, 45.5, 46.5, 51.5, 52.5, 53.5, 56, 57.5],
        [59723, 73183.5, 114498.5, 115363.5, 119180.5, 156628, 171337.5, 177015.5, 192506.5, 198094.5, 202819.5, 205755, 208500.5, 209752.5, 213107.5, 222939, 250601, 271875, 303732.5, 313025.5, 318173.5, 337225.5, 380248],
        [4.5, 8, 9.5, 10.5, 11.5, 12.5, 13.5, 15.5],
        [1087, 3280, 5842],
        [808.5, 1738, 1881.5, 1944.5, 2189.5],
        [17, 19, 34, 42, 44.5, 46.5, 49, 55]
    ]
    tree_depth = [4, 3, 6, 6, 2, 5, 6, 6, 6, 6, 6, 2, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]
    tree_split_border = [4, 4, 4, 2, 2, 5, 3, 5, 3, 11, 2, 3, 1, 5, 6, 7, 2, 2, 3, 6, 5, 6, 3, 3, 2, 1, 6, 6, 5, 6, 2, 6, 1, 3, 1, 1, 2, 1, 6, 5, 5, 1, 1, 2, 7, 5, 10, 1, 3, 7, 1, 2, 3, 8, 4, 1, 2, 2, 2, 4, 2, 2, 2, 4, 1, 5, 3, 5, 22, 11, 2, 3, 7, 6, 7, 13, 4, 3, 3, 3, 2, 6, 2, 18, 4, 3, 7, 6, 6, 6, 1, 1, 4, 6, 1, 1, 2, 15, 22, 4, 17, 4, 4, 14, 6, 4, 1, 4, 5, 3, 2, 1, 8, 2, 6, 5, 2, 15, 2, 5, 2, 8, 8, 8, 4, 2, 2, 13, 3, 2, 7, 2, 1, 3, 5, 7, 8, 1, 4, 23, 19, 6, 8, 1, 3, 8, 6, 2, 1, 1, 8, 1, 2, 3, 1, 5, 5, 1, 1, 7, 4, 2, 1, 14, 1, 12, 4, 3, 20, 15, 12, 5, 2, 4, 2, 1, 9, 10, 4, 2, 5, 1, 21, 1, 4, 5, 7, 9, 16, 5, 1, 2, 5, 5, 5, 4, 3, 3, 10, 5, 3, 4, 2, 4, 6, 5, 5, 12, 8, 4, 2, 3, 1, 7, 1, 2, 8, 1, 2, 2]
    tree_split_feature_index = [12, 2, 0, 3, 3, 4, 19, 12, 3, 1, 2, 4, 12, 12, 5, 0, 3, 17, 12, 5, 12, 10, 4, 0, 11, 19, 5, 11, 6, 2, 5, 8, 6, 3, 2, 5, 12, 7, 5, 11, 4, 8, 4, 4, 11, 2, 1, 4, 5, 8, 7, 3, 2, 2, 10, 0, 3, 8, 7, 12, 11, 16, 19, 2, 18, 9, 8, 8, 1, 0, 6, 11, 2, 5, 5, 0, 8, 1, 6, 10, 3, 5, 18, 1, 12, 7, 11, 6, 5, 1, 19, 17, 2, 11, 6, 3, 11, 1, 1, 11, 1, 5, 1, 1, 5, 2, 10, 9, 11, 2, 3, 11, 1, 11, 0, 12, 3, 0, 10, 8, 16, 0, 5, 2, 15, 2, 0, 1, 17, 10, 2, 3, 11, 2, 9, 11, 2, 13, 12, 1, 1, 5, 5, 14, 14, 2, 5, 1, 21, 9, 2, 15, 9, 9, 20, 15, 8, 4, 11, 6, 15, 16, 11, 0, 22, 0, 17, 13, 1, 1, 1, 5, 3, 6, 11, 13, 1, 0, 15, 16, 8, 11, 1, 16, 17, 10, 0, 0, 1, 8, 21, 13, 5, 9, 1, 2, 14, 15, 0, 1, 1, 15, 3, 6, 11, 2, 0, 0, 5, 4, 3, 15, 22, 1, 1, 15, 2, 10, 14, 3]
    tree_split_xor_mask = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    cat_features_index = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    one_hot_cat_feature_index = []
    one_hot_hash_values = [
    ]
    ctr_feature_borders = [
        [0.999998987, 3.99999905, 7.99999905, 8.99999905, 9.99999905, 10.999999, 11.999999],
        [5.99999905, 8.99999905, 10.999999],
        [5.99999905, 7.99999905, 10.999999, 11.999999, 12.999999, 13.999999, 14.999999],
        [1.99999905, 3.99999905, 5.99999905, 6.99999905, 7.99999905],
        [6.99999905, 7.99999905, 8.99999905, 9.99999905, 10.999999, 12.999999],
        [7.99999905, 8.99999905, 9.99999905, 10.999999, 11.999999, 13.999999, 14.999999],
        [1.99999905, 7.99999905, 8.99999905, 12.999999, 13.999999],
        [5.99999905, 6.99999905, 7.99999905],
        [3.99999905, 4.99999905, 6.99999905],
        [4.99999905, 5.99999905, 7.99999905, 8.99999905, 9.99999905],
        [9.99999905, 10.999999],
        [7.99999905, 9.99999905, 10.999999, 11.999999],
        [10.999999, 12.999999],
        [4.99999905, 9.99999905, 13.999999],
        [11.999999],
        [12.999999],
        [11.999999]
    ]

    ## Aggregated array of leaf values for trees. Each tree is represented by a separate line:
    leaf_values = [
        0.05851683082421707, 0.04568814098967718, 0.05303087793444672, -0.04831584691892995, 0.05221501827391677, -0.03966093125936554, 0.04746819843083342, -0.1508104269689008, 0, 0, 0, -0.0585935592646627, 0, -0.09374969482346032, 0, -0.1171871185293254,
        0.03412285629589634, 0, 0, 0, 0.008599288049107097, -0.1363513875190378, -0.08233501260756868, 0,
        0.02065906024099881, 0, 0, 0, 0.01176154776268021, 0, 0, 0, 0.02568948515007112, 0, 0, 0, 0.0102051459057694, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02773976427493861, 0, 0, 0, 0.02161900436307856, 0.0372880885531951, 0, 0, 0.03818277691273161, -0.04477809747204255, 0, -0.0940275420806355, 0.03987731629945908, -0.05818650822558821, 0, -0.03960079899512613, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.09746771480964721, 0, 0, 0, 0.02697033663744471, 0, 0,
        0, 0, 0, 0, 0.00828072724247552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02665802910449623, 0, 0.01531285441406967, 0, 0.0270601982122119, 0, 0.009129895838303584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01510452830982339, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02908644306897316, 0.04107839941156618, 0.01480808712755431, -0.09721025611997322, 0.0208508526801188, -0.03605480277736363, 0.009129895838303584, -0.09562700158091338, 0, -0.05915530528409065, 0, 0, 0, -0.06628472682619137, 0, -0.03663427334377964,
        0.02439219401930303, 0.02223571070080361, -0.01581293651807325, -0.09908061304943452,
        -0.05506421137911746, 0, 0, 0, 0, 0, 0, 0, 0.01849716308629916, 0.006561665247449078, 0, 0, 0.03024548296184689, 0.008146307297229668, 0, 0, 0.02274304681589278, 0, 0, 0, -0.03679726915248217, 0, -0.05750448436357759, 0, 0.01890989257643887, 0.01696383032556776, 0, 0, -0.03581117248244754, 0.01779277398577122, 0.007675227710782623, 0,
        0, 0, 0, 0, 0, 0, 0.006036284456044839, 0, 0, 0, 0, 0, 0, 0, 0.003436293090724041, 0, -0.06418448047968028, 0.01128450300855506, 0.007279041593184946, 0, 0.0343950029036342, -0.05687644064655266, 0.01160271121397575, 0.008607949058877292, 0, -0.051512261798036, 0.007314893682786801, 0.004794378487053208, -0.03693965822167111, -0.05511309592771049, 0.008489424160387728, 0.01096098400966151, 0, 0, 0, 0, 0, 0, 0.002430476621435859, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.04533981982608391, 0, 0.009555188639895976, 0, -0.02540633125152754, 0, 0.01678316431428789, 0, -0.02232132288765785, 0, 0.003563232311282765, 0, -0.01072759774237923, -0.0198163422499899, -0.0008610249587601722, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.05878859510129701, 0.002888328900669942, -0.01992630491129423, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.007796059235266927, 0.001912656137010099, 0, 0, 0.002851675866483368, 0.01375767108530657, 0, 0, 0, 0, 0, 0, 0, 0.005418252279954743, 0, 0, 0, 0.01984230321330687, 0, 0, -0.04157348597782751, 0.006128618172983082, -0.02205237835544756, -0.05273769094567796,
        0, -0.03332958241555967, 0, 0, 0, 0, 0, 0, -0.005511336269697018, -0.03924225601473717, 0.006240699891562342, 0.01040649203802247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01026441209945657, 0, 0.003312786526972073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.02474821025206836, 0, 0, 0, 0.02947347041678677, -0.03927304003062135, 0.006377596597346024, 0, 0, -0.01879098453970757, 0, 0,
        0, 0.003605756307825755, 0, 0, 0.02438233484639511, 0.003648966362267192, 0.01583810808992736, 0.002305496909330927, 0, 0, 0, 0, 0, 0, 0, 0.003064623195446685, 0.01338025922663649, 0.005776206016559033, -0.01597961364026038, 0.005456295626317751, 0.007320779738830488, 0.005298409272931082, -0.07140254107906824, 0.006539622800549276, -0.02289430319966993, 0.005899846037255164, -0.03456588326152547, 0, 0.009495497265370098, 0, 0, 0, 0, 0.004527730371894872, 0, 0, 0, 0.001346402944299662, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.01913964540018411, 0.01030035752239385, -0.04294928693569564, -0.001396429059415727, -0.03841622034109317, 0.005147476968372922, 0, 0.006138029589760938, 0, 0, 0, 0, 0, 0, 0.007905802257376677, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.003557649970851078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.04706169580404447, 0.02693013183610981, 0, -0.03179648211923857, -0.02881588004757081, -0.01048570232637744, -0.01014512540856807, -0.03527102716517403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.004727579207738907, 0, 0, 0.007008833370962582, 0.002283161524645584, 0, -0.02947395970524947, 0, 0, 0, 0, 0, 0.0266733609737872, 0, 0,
        -0.03367462642591754, -0.00938514643025634, 0.004268469991632232, -0.05032281296736044,
        0, 0, 0, 0, 0.002209845122058744, -0.001207105094326419, 0, 0.01854677070634374, 0, 0, 0, 0, 0, -0.002475900865880851, 0, 0.01872703108192339, 0, 0, -0.03738486596351383, 0.02382269487875707, 0, 0.002174129387748502, 0, 0.02432505171233728, 0, 0, 0, -0.02564486393156338, 0.01147445169310686, 0.005712456091236395, -0.03787554310717866, -0.01731809605711499, 0, 0, 0, 0, 0.00274090426078878, 0.001209883479069668, 0, 0, 0, 0, 0, -0.04774755083762738, 0, 0.0008231188234825127, 0, 0.01511740104763567, 0, 0, -0.02716193237136313, 0, 0.006516742274042408, 0.008684198974211474, 0, 0, 0, 0, 0, -0.04532403508380154, 0, 0.003761667319829403, -0.03363142084950633, -0.002731135149218007,
        -0.00857140899130877, -0.03290402045869204, 0.003223958975242381, 0.0009271075254880864, -0.01388578829110156, -0.01852070646548079, 0.001353929616667244, 0.001697680768806394, 0, 0, 0, 0, 0.004441940189236805, -0.01348020878906374, 0.0005530332672132973, 0.0002307813132593246, 0, 0, 0, 0, 0.009421733330818832, 0, 0, -0.001286142810221269, 0, 0, 0, 0, 0, 0.008791661126498351, 0, 0.01761241937642535, -0.01401657775793434, -0.01205074942993865, 0, -0.004479160962553905, 0.01519983954761807, 0.02515476172619045, 0.00017743057007749, 0.001184937768661476, 0, 0, 0, 0, 0.02369640741910498, -0.01253842462502978, 0, -0.02692668116213832, 0, 0, 0, 0.008184458106645871, 0, 0.04011303778800466, 0, -1.383466936789092e-05, 0, 0, 0, 0, 0, 0, 0, 0.001537517479111299,
        -0.0289602365674568, -0.001181551524338578, 0.007392025102250871, 0.007747283569491805, 0, -0.02406964564972512, -0.02940871931484296, 0.01906981345660213, 0, -0.02953736360919506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.008786539870325882, 0, 0.004944473632512225, -0.007929318293996606, -0.03289532126552871, 0, 0, 0, 0.02203493129327527, -0.009483549678881851, -0.003548877038175808, 0, 0, 0, 0.001802134396456998, -0.01296658537095946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.005827205688263867, 0.004142284360827512, 0, 0, 0, 0.001096173188774688,
        0, 0, -0.01041150093522815, 0.005348510486836508, 0, 0.001879346279311195, -0.0426948349040508, -3.129482826146538e-05, 0, 3.7243487940593e-05, 0.002165445586487066, -0.01201512767197293, 0, -0.004630908673422809, 0.001851293670044185, 0.002972659543873357,
        0.002295837194574988, 0, 0.001010257114910656, 0, 0.008582365351899473, 0, 0, 0, 0.008308841069545875, 0, 0, 0, 0, 0, 0, 0, -0.02424125019532143, 0, -0.00655539372452263, -0.005552900483655876, -0.02536731457293335, -0.00518740147421539, 0, 0, -0.03141067762751806, 0, 0.01207378638742671, 0, -0.03949653269458129, 0, 0, 0, 0.0002949310742908398, 0, 0.003640378764645001, 0, 0.003073417893422849, 0, 0, 0, -0.003245118688333519, 0, 0.00360929855910709, 0, 0.002785756350973787, 0, 0, 0, 0.02701498083340228, -0.03799830922150252, -0.04385695144042016, 0, 0.02818904166033024, -0.01290759789758101, 0, 0, 0.000463091153100895, 0, 0, 0, 0.02837494873403444, 0, 0, 0,
        0, 0.001008818794996853, 0, 0, 0, 0, 0, 0, 0, 0.003141691334528184, 0, 0, 0, 0, 0, 0, 0, 0.006184258330538679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001470267928788044, 0, 0.0002388305009841212, 0, 0, 0, 0, -0.03653781771026643, -0.001333185966472311, 0.02685037814597792, -0.002150529180068453, 0, 0, 0, 0, -0.03322331767555606, 0.0008545134770868704, 0.02665826176653158, -0.002135845997287941, -0.006064324247847031, 0, -0.02622040172552438, 0.002919957541291437, -0.009047725799675882, 0.005497537003442515, -0.004572309661865791, 0.001890160897236798, -0.0006551149009788287, 0.0009345779942392119, -0.02307992239962195, 0.003256465448431856,
        -0.01880251718668995, -0.005610041155186835, 0, 0, -0.0150005488296543, -0.01058655963946882, 0, 0, 0, 0, 0, 0, -0.01059860623630774, 0, 0, 0, 0, -0.02097824622319767, 0.005852581076002355, 0.00617626301222549, 0.005276424669110789, 0.006351381395859083, 0.001865404659122867, 0.0007289512952361181, 0, -0.005918303183523965, 0, 0, 0, -0.0173977433476629, 0, -0.004847753048080305, 0, -0.01207069660764896, 0, 0, 0.04373423007637566, -0.03775349673322147, 0, 0, 0, 0, 0, 0, -0.01943412296661101, 0, 0, 0, -0.02837990818283926, 0, 0.007085312705122851, 0, 0.01549180546840748, 0.02390711864959927, -0.002101455695066092, 0.001834414142971013, 0, 0, 0, 0, 0, 0, 0, 0,
        0.01734144964484815, 0, 0.00417910436871345, 0, 0, 0, 0, 0, -0.02275946872288431, 0, 0, 0, 0, 0, 0, 0, -0.02578690345898336, 0, -0.001659696681854578, 0, 0, 0, 0, 0, -0.01055071362504868, 0, 0.004788035242490552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02102989707563517, 0, -0.002167053592237257, 0, -0.05090320394155684, 0.01013362380903502, 1.664519507131312e-05, 0.00169837623330703, -0.006920962884912964, 0, 0, 0, -0.003942572147377916, 0.0330983216420863, 0.002957561667183559, 0.01947352805251705,
        0.01341308803919746, 0, 0, 0, 0.01257374166480484, 0, 0, 0, 0, 0, 0, 0, -0.01925706999815845, 0, 0, 0, 0, 0, 0, 0, 0.00321015434904718, 0, 0, 0, 0, 0, 0, 0, 0.0005727646447564169, 0.0006165793946518566, 0, 0, -0.003348919620786305, -0.02039399727108728, -0.02715940213226474, 0, 0, 0, 0, -0.002084041351346986, 0, 0, 0, 0, 0.01809212086342759, 0.008593480111737857, 0.006124770849561742, -0.01809769898586567, 0, 0, 0, 0, 0.005663852782928568, 0.002202807135098679, 0.00496792591935546, 0, 0, 0, 0, 0, -0.0002171201170534588, 0, -0.004573047485701473, 0.001642169453010988,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001145560821555272, 0, 0, 0, -0.0004452003008891523, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.004712668546112051, 0, 0, 0, 0.004222672646820741, 0, 0.0135708615961705, 0, -0.003806714476029461, 0, -0.02468066821144478, -0.01601728204989239, 0, 0, 0, 0, 0.02131555847023858, -0.01462156015307784, 0, 0, 0.01064983491939241, 0, 0.008099620013750045, 0, -0.01429756485311046, 0, -0.002337731354540189, -0.007622070237065286, -0.004280057212989655, 0, 0, 0, -0.01856381644149529, -0.01052143754549599, 0, 0, 0.004165890541597606, -0.002498434689055003,
        0.003106233695841562, 0, 0, 0, -0.0009123732369406536, 0, 0, 0, -0.01130686321774348, 0, 0, 0, 0.002815694693479449, 0, 0, 0, -0.01692032797514153, 0, 0, 0, -0.0009098367197703947, 0, 0, 0, -0.004784083894572067, -0.01481741539892645, 0, 0, 0.007930116753305377, -0.01352624807964848, 0, 0, 0.01421360876959393, 0, 0, 0, -0.01073895268132543, 0, -0.0003585140710351515, 0, 0.01189311412422765, 0, 0.01781046550859811, -0.007051095220187428, 0.001179523285934153, 0, 0, 0, 0, 0, 0, 0, 0.006127261003152381, 0, 0, -0.002311275066487596, -0.01059736112824616, 0, 0, 0, -0.0050068182347339, -0.001412994316841771, -0.008021679591912629, -0.01016246500771907,
        -0.002965791603181298, 0.01543781757389361, 0.01761893474594578, 0,
        0, 0.001810023901984759, 0, 0.003021153684356823, 0, 0, -0.004420511253986989, 0.0011740724267442, 0, 0, -0.0003565662530275084, 0, 0.01257576329847837, 0, -0.0281866832360911, 0, 0, 0, 0, 0.004711980097069419, 0, 0.0123548153332585, 0.005128040759099073, -8.458371949055962e-05, 0, 0, -0.02178633927302177, 0, 0, 0, 0.009074575496329633, 0.004372276442129857, 0, 0.001162510979035783, 0, -0.001172041320985218, 0, 0, 0, 0.005082800711901585, 0, 0.001524397336247366, 0, -0.0006234078347555367, 0, 0, 0, 0.0005915680458291977, 0, 0.0002988246498983851, 0.01848923570965871, 0.001661851298777936, 0, 0.007079000719518182, -0.00799121547575875, -0.01582368941528843, 0, 0, 0, 0.002693165821374867, 0, 0.001454921323695712, 0, 0.001884712001019521,
        0.01055662364789203, 0, -0.01416504525979884, 0, 0.0006146102938390255, 0, 0, 0, -0.005921816464325491, -0.01140036672647327, -0.005969578866427816, 0, 0.01420215899120392, -0.004812542976162708, 0, 0, 0, 0, 0, 0, -0.006272147249029847, 0, 0, 0, 0, 0, 0, 0, 0.00710255524166327, -0.006245379329005717, -0.009468843237190577, 0.0001003883123893277, 0, 0, 0, 0, 0.006272906851700163, 0, 0, 0, 0, 0, 0, 0, 0.007019832349990925, 0, -0.007993652945274101, 0, 0, 0, 0, 0, -0.0009731127260501061, 0, 0, 0, 0, 0, 0, 0, 0.0018678449279112, 0.001395811668238868, 0, 0,
        0.004688073939877083, 0, 0.0009744783141571757, 0, -0.0004003858587704477, 0, 0.004741030157784317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.002726053643767992, 0, 0.003707167870506473, 0, -0.03618514142361456, 0.01662574795714819, 0, 0, -0.0008837321320721159, 0, 0.00418002038582585, 0, 0, 0, 0, 0, 0.0008501159767390567, 0, -0.01625318923333594, 0, -0.01451306762689693, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.002838641634128152, 0, 0, 0, -0.002330020487506252, 0, 0, 0, 0, 0, 0, 0, 0.02769289240469545, 0,
        0.002353750975471882, 0, 0, 0, 0, 0, 0.002232964829201315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0167924401834544, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01660212859826654, 0, 0.0008120494192475078, 0, 0, 0, -0.001927660718527195, 0, 0, 0, 0, 0, 0, 0, 0.01538030066721417, 0, 0, 0, -0.0125179389939167, 0, 0, 0, -0.0001780296875024507, 0.01393126344664031, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0.003899395515940973, 0.006189620379070662, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01568062264484047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.002116372643067269, -0.001526082432062877, 0, 0, 0, 0.01422815077093739,
        -0.0004924358010653337, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.004310486392851318, 0, 0, 0, 0, 0, -0.001983601494440411, -0.01169951631415156, 0.003015252332480261, 0.001237776843320934, 0, 0, 0.006434376299168963, -0.007922918779305141, 0, 0, 0, 0, 0, -0.009089380048651577, 0, 0.01316230929035499, 0.01129049239366295, 0, 0, 0, -0.01788154702941239, 0, 0, 0, 0, 0, 0, 0, 0.000775311538408119, 0, 0, 0, 0, 0, 0.0004150566189605011, 0, 0.002335968785970134, 0.01827612980416144, -0.001928602153871462, 0.002570958036802758, 0, 0, 0, 0, -0.001705575579650183, 0, 0.0002071307673795317, 0.002683800814491004,
        -0.01072004457276335, -0.003987584613628449, 0.003936030197162053, 0, 0, -0.0007496255084311572, 0, 0.0007743029782742556, 0, 0, 0, 0, 0, 0, 0, 0, -3.85863868328346e-05, 0, -0.02294565696449544, 0, -0.01012648412587416, 0.008063813581634612, 0.01005608116315929, 1.662656077926397e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0.0163073841944476, 0, 0, 0, 0, 0.001196097583181074, 0, 0, 0.0185556430936775, 0, 0, 0, 0, 0.0005888337220384477, 0, 0, 0, 0, -0.01005538058507227, 0, 0, 0.001275431017430841, 0, -0.002965956745514917, 0, 0, 0, 0, 0, -0.0001424461572116677, 0.002160979606454391, -0.007604998030646868,
        0.005626967455847445, -0.00256009691958049, 0.001077592529959953, 0.0009581455269416546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.04096057379129384, 0, -0.001862992102683903, -0.0007724569341462482, 0, 0, 0, 0, 0.01770506409122928, 0, 0.0004027457183606153, 0.003975153444097982, -0.004304205909601466, -0.005561018620109361, -0.005834478427207931, -0.00020444341950673, 0.001824903449781899, 0, -0.008465850673977014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0007811963625843532, 0, 0, 0, 0, 0, -0.0050092812189927, 0, 0.005957848391567894, 0, 0.02354862495142886, 0, 0.003174975982301404, 0.01217506528892332,
        0, 0, 0, 0, -0.003114563015337615, 0.001165628938630906, 0.01284903186139623, 0, 0, 0, 0.005676263511521727, 0, 0.003156497803885214, 0, 0.002984583954398128, -0.01037689475064006, 0, 0, -0.03184447258562972, 0, 0, 0, 0.003955144897989894, 0, 0, 0, 0.0008656312637025943, -0.009722498016897018, 0.0004716675448197319, 0, -0.001061018458383167, 0, 0, 0, 0.01741369047391368, 0, -0.01418179637662339, 0, 0.002190877784706575, 0, -0.01058428924516705, 0, 0, -0.006251856933729576, 0.002174133219654364, 0, -0.003944119323602114, -0.006922391515893277, 0, 0, 0.005176340766721617, 0, 0, 0, 0.008875423699886311, 0, 0.009270144170463181, 0, 0.001309889163035401, 0, 0.004370090061180222, 0.002348933417970768, 0.0053184447954435, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -0.001312775501603295, 0, 0, 0, 0.003714978246062004, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.002593696822964596, -0.002976717845172504, 0.004218358331099457, 0, -0.006674524232370083, 0, -0.007306972041757918, 0, -0.008871014248108258, 0.000769273753039707, 0, 0.00225228684714218, 0, 0.00231374247295303, 0.007838381200852394, -0.00643788206551083, 0.02217595043222212, 0, -0.01479483630471691, 0, 0, 0, -0.009077817938384825, 0, 0, 0.0004441499402940709, 0, 0.003816062712468673, 0, -0.00027335401896354, 0, 0.009635400735668051,
        -0.0001437008241161485, 0, -0.0006984889778222719, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0002378446577721248, 0, 0.0002931783110392935, 0, 0.00496857464534975, -0.01368654398438225, 0.001819490388145338, -0.001329848344229937, 0.003902357934306507, 0, 0, 0, 0, 0, 0, 0, 0.008700124955333127, 0, 0.003893060588635024, 0, -0.002689571253429981, 0.002335507533917496, -0.0009082428283507599, -0.0001149073435817698, -0.01891255654953534, 0, 0.001645220757985636, -0.0002676579847808107, 0, 0, 0, 0, -0.001235471704582773, -0.005259416972974185, 0.003857260186340776, 0.003463709857170297, 0.01338939945333076, 0.004417201155583438, -0.002832284278753921, -0.0006263964780474035, 0, 0, -0.0001590418226933845, 0, 0, 0, 0, 0, -0.01903002738365772, 0.01412435856055929, 0.001816932321241924, 0.0008172709842065554,
        0.004937287615496329, 0, -0.00635341161698699, 0, 0, 0, 0, 0, 0, 0, 0.001547336873335893, 0, 0, 0, -0.01384192024006873, 0, -0.001573587311710869, 0.0009969324650330822, 0.007982485825112618, 0.006233623053027606, 0.00962965899039781, 0, 0.001905688849557502, 0, 0, 0, -0.001432718558529263, -0.0002476075237348613, 0, 0, 0.006752956998047114, 0, 0, 0, 0, 0, 0, 0, -0.003278737525487077, 0, -0.005723306952361766, 0, 0.0001828448508295991, -0.002186472783540149, 0, 0, 0, 0, -0.01570681021646301, 0, -0.0009019034309143643, -0.003141995037067836, -0.003144979146937825, 0, -0.001382808872459668, 0, 0.01157431039430554, 0.001954564270632192, -0.002236386076230254, 7.13296596099221e-05, 0, 0, -0.001952121007575219, 0.009155793804315476,
        -0.001747624397656148, -0.003033124830283963, 0, 0, 0.001608846566020786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01278340371839655, 0, 0, 0, 0, 0, 0, -0.008534867172319851, -0.01046362057349283, -0.004096858140586333, 0, 0, 0.01190999667462336, 0.002518097366594223, 0, -0.001279221619294247, 0, 0, 0, -0.0002207092654562213, 0, 0, 0, -0.00748209106032625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0007193351402866625, 0, 0, 0, -0.01181443663525021, 0, 0, 0, 0.0005916119284297223, 0, 0, 0, 0.00415772263888298,
        0, 0, 0.003970730715556957, 0, -0.003194724672750664, 0, -0.001365895407301304, 0, 0, 0, -1.909268151914652e-05, -0.009169030524352419, 0.003944767393550245, 0, 0.001269770837018816, 0, -0.00923268684048606, 0, 0.002878691059791143, -0.008659796069073111, -0.0002733771525453647, 0, 0.0060302135789761, 0, -0.003208762414029747, 0.001763828295625862, -0.0008253811101245548, 0, -0.0009099864181112537, 0, -2.391661101679666e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.003315207242427177, 0, 0.00842332965205494, -0.005965290082010926, 0.00719240374030546, 0, 0.002600763238608525, 0, 0, 0.001856846390030737, -0.005984261691088528, 0, -0.001145799297706701, 0, 0.0005070500076362295, -0.006257121399353411,
        0.01106456367263211, 0, 0, 0, 0, 0, 0, 0, 0.001192256083599701, 0, -0.002953717181853356, 0, 0, 0, 0, 0, 0.00695053789061696, 0, 0, 0, 0, 0, 0, 0, -0.004699950168953318, 0, 0, 0, -0.008425912456359966, 0, 0, 0, -0.006071564404728867, 0.01811554331998461, 0, 0, -0.005518425713234272, 0, 0, 0, -0.0008490117476927004, 0, 0, 0, 0, 0, 0, 0, -0.01090431814080155, 0, 0, 0, -0.00801108422925653, 0, 0, 0, 0.003997835206810737, 0, 0.008398839076413011, -0.006957504938580956, 0.001717748629722561, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.009751158166955355, 0, 0, 0, 0, 0, 0, 0, -0.005080677742759011, 0, 0, 0, 0, 0, 0, -0.006641237715464226, 0.001114283882640368, 0, 0, 0, 0.007769675721280279, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.005105036290577059, 0, 0, 0, 0, 0, 0, 0, -0.008283595725771829, 0, 0, 0, 0
    ]
    scale = 1
    bias = 0.7821782231
    model_ctrs = catboost_model_ctrs_container(
        used_model_ctrs_count = 17,
        compressed_model_ctrs = [
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [3],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387099, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387099, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387099, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [5],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387101, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387101, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387101, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 16890222057671696978, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [7],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387103, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387103, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387103, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [8],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387072, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387072, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387072, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 16890222057671696975, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [10],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387074, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387074, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387074, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15)
                ]
            )
        ],
        ctr_data = catboost_ctr_data(
            learn_ctrs = {
                14216163332699387072 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 8473802870189803490 : 2, 7071392469244395075 : 1, 18446744073709551615 : 0, 8806438445905145973 : 3, 619730330622847022 : 0, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 0, count = 12), catboost_ctr_mean_history(sum = 1.4013e-45, count = 5), catboost_ctr_mean_history(sum = 2.94273e-44, count = 61), catboost_ctr_mean_history(sum = 0, count = 1)],
                    ctr_total = [0, 12, 1, 5, 21, 61, 0, 1]
                ),
                14216163332699387074 :
                catboost_ctr_value_table(
                    index_hash_viewer = {2136296385601851904 : 0, 7428730412605434673 : 1, 9959754109938180626 : 3, 14256903225472974739 : 5, 8056048104805248435 : 2, 18446744073709551615 : 0, 12130603730978457510 : 6, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 10789443546307262781 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 2.8026e-44, count = 73), catboost_ctr_mean_history(sum = 0, count = 2), catboost_ctr_mean_history(sum = 0, count = 2), catboost_ctr_mean_history(sum = 1.4013e-45, count = 0), catboost_ctr_mean_history(sum = 0, count = 1), catboost_ctr_mean_history(sum = 0, count = 1), catboost_ctr_mean_history(sum = 1.4013e-45, count = 0)],
                    ctr_total = [20, 73, 0, 2, 0, 2, 1, 0, 0, 1, 0, 1, 1, 0]
                ),
                14216163332699387099 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 15379737126276794113 : 5, 18446744073709551615 : 0, 14256903225472974739 : 2, 18048946643763804916 : 4, 2051959227349154549 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 7024059537692152076 : 6, 18446744073709551615 : 0, 15472181234288693070 : 1, 8864790892067322495 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 1.4013e-44, count = 58), catboost_ctr_mean_history(sum = 1.4013e-45, count = 6), catboost_ctr_mean_history(sum = 1.4013e-45, count = 5), catboost_ctr_mean_history(sum = 4.2039e-45, count = 6), catboost_ctr_mean_history(sum = 0, count = 4), catboost_ctr_mean_history(sum = 2.8026e-45, count = 0), catboost_ctr_mean_history(sum = 7.00649e-45, count = 0)],
                    ctr_total = [10, 58, 1, 6, 1, 5, 3, 6, 0, 4, 2, 0, 5, 0]
                ),
                14216163332699387101 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 13987540656699198946 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18089724839685297862 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 10353740403438739754 : 2, 3922001124998993866 : 0, 13686716744772876732 : 1, 18293943161539901837 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 0, count = 37), catboost_ctr_mean_history(sum = 0, count = 4), catboost_ctr_mean_history(sum = 3.08286e-44, count = 20), catboost_ctr_mean_history(sum = 0, count = 13), catboost_ctr_mean_history(sum = 0, count = 2), catboost_ctr_mean_history(sum = 0, count = 3)],
                    ctr_total = [0, 37, 0, 4, 22, 20, 0, 13, 0, 2, 0, 3]
                ),
                14216163332699387103 :
                catboost_ctr_value_table(
                    index_hash_viewer = {3607388709394294015 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18356215166324018775 : 0, 18365206492781874408 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0, 14559146096844143499 : 1, 18446744073709551615 : 0, 18446744073709551615 : 0, 11416626865500250542 : 3, 5549384008678792175 : 2},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 0, count = 14), catboost_ctr_mean_history(sum = 0, count = 22), catboost_ctr_mean_history(sum = 0, count = 22), catboost_ctr_mean_history(sum = 2.66247e-44, count = 17), catboost_ctr_mean_history(sum = 2.8026e-45, count = 3), catboost_ctr_mean_history(sum = 1.4013e-45, count = 1)],
                    ctr_total = [0, 14, 0, 22, 0, 22, 19, 17, 2, 3, 1, 1]
                ),
                16890222057671696975 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 8473802870189803490 : 2, 7071392469244395075 : 1, 18446744073709551615 : 0, 8806438445905145973 : 3, 619730330622847022 : 0, 18446744073709551615 : 0},
                    target_classes_count = 0,
                    counter_denominator = 82,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 1.68156e-44, count = 6), catboost_ctr_mean_history(sum = 1.14906e-43, count = 1)],
                    ctr_total = [12, 6, 82, 1]
                ),
                16890222057671696978 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 13987540656699198946 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18089724839685297862 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 10353740403438739754 : 2, 3922001124998993866 : 0, 13686716744772876732 : 1, 18293943161539901837 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 0,
                    counter_denominator = 42,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 5.1848e-44, count = 4), catboost_ctr_mean_history(sum = 5.88545e-44, count = 13), catboost_ctr_mean_history(sum = 2.8026e-45, count = 3)],
                    ctr_total = [37, 4, 42, 13, 2, 3]
                )
            }
        )
    )


### Routines to compute CTRs

def calc_hash(a, b):
    max_int = 0xffFFffFFffFFffFF
    MAGIC_MULT = 0x4906ba494954cb65
    return (MAGIC_MULT * ((a + MAGIC_MULT * b) & max_int)) & max_int


def calc_hashes(binarized_features, hashed_cat_features, transposed_cat_feature_indexes, binarized_feature_indexes):
    result = 0
    for cat_feature_index in transposed_cat_feature_indexes:
        result = calc_hash(result, hashed_cat_features[cat_feature_index])
    for bin_feature_index in binarized_feature_indexes:
        binary_feature = binarized_features[bin_feature_index.bin_index]
        if not(bin_feature_index.check_value_equal):
            result = calc_hash(result, 1 if (binary_feature >= bin_feature_index.value) else 0)
        else:
            result = calc_hash(result, 1 if (binary_feature == bin_feature_index.value) else 0)
    return result


def calc_ctrs(model_ctrs, binarized_features, hashed_cat_features, result):
    ctr_hash = 0
    result_index = 0

    for i in range(len(model_ctrs.compressed_model_ctrs)):
        proj = model_ctrs.compressed_model_ctrs[i].projection
        ctr_hash = calc_hashes(binarized_features, hashed_cat_features, proj.transposed_cat_feature_indexes, proj.binarized_indexes)
        for j in range(len(model_ctrs.compressed_model_ctrs[i].model_ctrs)):
            ctr = model_ctrs.compressed_model_ctrs[i].model_ctrs[j]
            learn_ctr = model_ctrs.ctr_data.learn_ctrs[ctr.base_hash]
            ctr_type = ctr.base_ctr_type
            bucket = learn_ctr.resolve_hash_index(ctr_hash)
            if bucket is None:
                result[result_index] = ctr.calc(0, 0)
            else:
                if ctr_type == "BinarizedTargetMeanValue" or ctr_type == "FloatTargetMeanValue":
                    ctr_mean_history = learn_ctr.ctr_mean_history[bucket]
                    result[result_index] = ctr.calc(ctr_mean_history.sum, ctr_mean_history.count)
                elif ctr_type == "Counter" or ctr_type == "FeatureFreq":
                    ctr_total = learn_ctr.ctr_total
                    denominator = learn_ctr.counter_denominator
                    result[result_index] = ctr.calc(ctr_total[bucket], denominator)
                elif ctr_type == "Buckets":
                    ctr_history = learn_ctr.ctr_total
                    target_classes_count = learn_ctr.target_classes_count
                    total_count = 0
                    good_count = ctr_history[bucket * target_classes_count + ctr.target_border_idx];
                    for class_id in range(target_classes_count):
                        total_count += ctr_history[bucket * target_classes_count + class_id]
                    result[result_index] = ctr.calc(good_count, total_count)
                else:
                    ctr_history = learn_ctr.ctr_total;
                    target_classes_count = learn_ctr.target_classes_count;

                    if target_classes_count > 2:
                        good_count = 0
                        total_count = 0
                        for class_id in range(ctr.target_border_idx + 1):
                            total_count += ctr_history[bucket * target_classes_count + class_id]
                        for class_id in range(ctr.target_border_idx + 1, target_classes_count):
                            good_count += ctr_history[bucket * target_classes_count + class_id]
                        total_count += good_count;
                        result[result_index] = ctr.calc(good_count, total_count);
                    else:
                        result[result_index] = ctr.calc(ctr_history[bucket * 2 + 1], ctr_history[bucket * 2] + ctr_history[bucket * 2 + 1])
            result_index += 1



cat_features_hashes = {
    "Female": -2114564283,
    "Protective-serv": -2075156126,
    "Assoc-voc": -2029370604,
    "Married-civ-spouse": -2019910086,
    "Federal-gov": -1993066135,
    "Transport-moving": -1903253868,
    "Farming-fishing": -1888947309,
    "Prof-school": -1742589394,
    "Self-emp-inc": -1732053524,
    "?": -1576664757,
    "Handlers-cleaners": -1555793520,
    "0": -1438285038,
    "Philippines": -1437257447,
    "Male": -1291328762,
    "11th": -1209300766,
    "Unmarried": -1158645841,
    "Local-gov": -1105932163,
    "Divorced": -993514283,
    "Some-college": -870577664,
    "Asian-Pac-Islander": -787966085,
    "Sales": -760428919,
    "Self-emp-not-inc": -661998850,
    "Widowed": -651660490,
    "Masters": -453513993,
    "State-gov": -447941100,
    "Doctorate": -434936054,
    "White": -218697806,
    "Own-child": -189887997,
    "Amer-Indian-Eskimo": -86031875,
    "Exec-managerial": -26537793,
    "Husband": 60472414,
    "Italy": 117615621,
    "Not-in-family": 143014663,
    "n": 239748506,
    "Married-spouse-absent": 261588508,
    "Prof-specialty": 369959660,
    "Assoc-acdm": 475479755,
    "Adm-clerical": 495735304,
    "Bachelors": 556725573,
    "HS-grad": 580496350,
    "Craft-repair": 709691013,
    "Other-relative": 739168919,
    "Other-service": 786213683,
    "9th": 840896980,
    "Separated": 887350706,
    "10th": 888723975,
    "Mexico": 972041323,
    "Hong": 995245846,
    "1": 1121341681,
    "Tech-support": 1150039955,
    "Black": 1161225950,
    "Canada": 1510821218,
    "Wife": 1708186408,
    "United-States": 1736516096,
    "Never-married": 1959200218,
    "Machine-op-inspct": 2039859473,
    "7th-8th": 2066982375,
    "Private": 2084267031,
}

def hash_uint64(string):
    return cat_features_hashes.get(str(string), 0x7fFFffFF)


### Applicator for the CatBoost model

def apply_catboost_model(float_features, cat_features=[], ntree_start=0, ntree_end=catboost_model.tree_count):
    """
    Applies the model built by CatBoost.

    Parameters
    ----------

    float_features : list of float features

    cat_features : list of categorical features
        You need to pass float and categorical features separately in the same order they appeared in train dataset.
        For example if you had features f1,f2,f3,f4, where f2 and f4 were considered categorical, you need to pass here float_features=f1,f3, cat_features=f2,f4


    Returns
    -------
    prediction : formula value for the model and the features

    """
    if ntree_end == 0:
        ntree_end = catboost_model.tree_count
    else:
        ntree_end = min(ntree_end, catboost_model.tree_count)

    model = catboost_model

    assert len(float_features) >= model.float_feature_count
    assert len(cat_features) >= model.cat_feature_count

    # Binarise features
    binary_features = [0] * model.binary_feature_count
    binary_feature_index = 0

    for i in range(len(model.float_feature_borders)):
        for border in model.float_feature_borders[i]:
            binary_features[binary_feature_index] += 1 if (float_features[model.float_features_index[i]] > border) else 0
        binary_feature_index += 1
    transposed_hash = [0] * model.cat_feature_count
    for i in range(model.cat_feature_count):
        transposed_hash[i] = hash_uint64(cat_features[i])

    if len(model.one_hot_cat_feature_index) > 0:
        cat_feature_packed_indexes = {}
        for i in range(model.cat_feature_count):
            cat_feature_packed_indexes[model.cat_features_index[i]] = i
        for i in range(len(model.one_hot_cat_feature_index)):
            cat_idx = cat_feature_packed_indexes[model.one_hot_cat_feature_index[i]]
            hash = transposed_hash[cat_idx]
            for border_idx in range(len(model.one_hot_hash_values[i])):
                binary_features[binary_feature_index] |= (1 if hash == model.one_hot_hash_values[i][border_idx] else 0) * (border_idx + 1)
            binary_feature_index += 1

    if hasattr(model, 'model_ctrs') and model.model_ctrs.used_model_ctrs_count > 0:
        ctrs = [0.] * model.model_ctrs.used_model_ctrs_count;
        calc_ctrs(model.model_ctrs, binary_features, transposed_hash, ctrs)
        for i in range(len(model.ctr_feature_borders)):
            for border in model.ctr_feature_borders[i]:
                binary_features[binary_feature_index] += 1 if ctrs[i] > border else 0
            binary_feature_index += 1

    # Extract and sum values from trees
    result = 0.
    tree_splits_index = 0
    current_tree_leaf_values_index = 0
    for tree_id in range(ntree_start, ntree_end):
        current_tree_depth = model.tree_depth[tree_id]
        index = 0
        for depth in range(current_tree_depth):
            border_val = model.tree_split_border[tree_splits_index + depth]
            feature_index = model.tree_split_feature_index[tree_splits_index + depth]
            xor_mask = model.tree_split_xor_mask[tree_splits_index + depth]
            index |= ((binary_features[feature_index] ^ xor_mask) >= border_val) << depth
        result += model.leaf_values[current_tree_leaf_values_index + index]
        tree_splits_index += current_tree_depth
        current_tree_leaf_values_index += (1 << current_tree_depth)
    return model.scale * result + model.bias



