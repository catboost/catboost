### Types to hold CTR's data

class catboost_model_ctr(object):
    def __init__(self, base_hash, base_ctr_type, target_border_idx, prior_num, prior_denom, shift, scale):
        self.base_hash = base_hash
        self.base_ctr_type = base_ctr_type
        self.target_border_idx = target_border_idx
        self.prior_num = prior_num
        self.prior_denom = prior_denom
        self.shift = shift
        self.scale = scale

    def calc(self, count_in_class, total_count):
        ctr = (count_in_class + self.prior_num) / float(total_count + self.prior_denom)
        return (ctr + self.shift) * self.scale


class catboost_bin_feature_index_value(object):
    def __init__(self, bin_index, check_value_equal, value):
        self.bin_index = bin_index
        self.check_value_equal = check_value_equal
        self.value = value


class catboost_ctr_mean_history(object):
    def __init__(self, sum, count):
        self.sum = sum
        self.count = count


class catboost_ctr_value_table(object):
    def __init__(self, index_hash_viewer, target_classes_count, counter_denominator, ctr_mean_history, ctr_total):
        self.index_hash_viewer = index_hash_viewer
        self.target_classes_count = target_classes_count
        self.counter_denominator = counter_denominator
        self.ctr_mean_history = ctr_mean_history
        self.ctr_total = ctr_total

    def resolve_hash_index(self, hash):
        try:
            return self.index_hash_viewer[hash]
        except KeyError:
            return None


class catboost_ctr_data(object):
    def __init__(self, learn_ctrs):
        self.learn_ctrs = learn_ctrs


class catboost_projection(object):
    def __init__(self, transposed_cat_feature_indexes, binarized_indexes):
        self.transposed_cat_feature_indexes = transposed_cat_feature_indexes
        self.binarized_indexes = binarized_indexes


class catboost_compressed_model_ctr(object):
    def __init__(self, projection, model_ctrs):
        self.projection = projection
        self.model_ctrs = model_ctrs


class catboost_model_ctrs_container(object):
    def __init__(self, used_model_ctrs_count, compressed_model_ctrs, ctr_data):
        self.used_model_ctrs_count = used_model_ctrs_count
        self.compressed_model_ctrs = compressed_model_ctrs
        self.ctr_data = ctr_data


###  Model data
class catboost_model(object):
    float_features_index = [
        0, 1, 2, 3, 4, 5,
    ]
    float_feature_count = 6
    cat_feature_count = 11
    binary_feature_count = 21
    tree_count = 40
    float_feature_borders = [
        [27.5, 30.5, 34.5, 35.5, 37.5, 41.5, 46.5, 50, 59.5],
        [71939, 209752.5, 216825, 222939, 238960, 313025.5, 332801, 449128.5],
        [5.5, 6.5, 10.5, 12.5, 13.5, 14.5],
        [1087, 3280, 5842],
        [808.5, 1622.5, 2189.5, 2396],
        [36.5, 46.5, 49]
    ]
    tree_depth = [4, 6, 6, 4, 6, 6, 1, 4, 2, 2, 6, 3, 3, 6, 1, 4, 6, 6, 2, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 6, 4, 2, 3, 6, 5, 3, 6, 6, 6, 3]
    tree_split_border = [3, 3, 4, 2, 2, 3, 2, 4, 1, 2, 3, 7, 6, 4, 1, 2, 4, 5, 8, 1, 4, 1, 2, 2, 1, 2, 3, 9, 1, 6, 2, 3, 4, 4, 5, 1, 7, 3, 4, 8, 4, 4, 7, 5, 3, 1, 1, 3, 5, 3, 3, 4, 6, 4, 5, 2, 3, 6, 8, 2, 3, 2, 5, 3, 3, 2, 3, 4, 3, 1, 2, 7, 5, 8, 4, 5, 3, 6, 4, 3, 5, 1, 8, 3, 2, 4, 4, 5, 6, 3, 6, 4, 4, 1, 2, 2, 2, 3, 3, 5, 7, 5, 3, 4, 3, 2, 5, 5, 1, 5, 6, 3, 6, 1, 4, 2, 5, 2, 2, 6, 9, 3, 4, 5, 2, 2, 1, 3, 2, 3, 8, 2, 1, 3, 2, 4, 1, 5, 1, 2, 4, 3, 3, 1, 2, 1, 1, 6, 4, 7, 3, 4, 3, 4, 4, 4, 7, 3, 3, 3, 3, 2, 4, 1, 3, 1, 2, 1, 2, 4, 1, 1, 3, 2, 2, 5, 7, 4, 2, 5, 4, 5, 4]
    tree_split_feature_index = [13, 2, 0, 3, 3, 4, 17, 13, 0, 19, 12, 0, 2, 11, 13, 18, 12, 2, 0, 3, 12, 15, 0, 12, 3, 10, 13, 14, 5, 0, 5, 3, 13, 13, 17, 18, 18, 5, 16, 14, 12, 13, 17, 10, 18, 9, 10, 13, 7, 3, 13, 6, 12, 13, 7, 2, 10, 14, 1, 3, 12, 5, 11, 10, 13, 10, 2, 14, 7, 16, 3, 18, 12, 17, 10, 0, 13, 17, 13, 2, 10, 14, 17, 3, 8, 11, 9, 2, 1, 11, 16, 15, 7, 1, 3, 5, 4, 6, 17, 12, 1, 7, 2, 12, 2, 11, 14, 6, 2, 16, 18, 3, 7, 11, 9, 3, 2, 16, 15, 7, 0, 13, 18, 9, 4, 5, 17, 12, 9, 2, 7, 1, 3, 13, 5, 9, 12, 1, 14, 7, 4, 15, 3, 7, 3, 3, 6, 16, 7, 18, 13, 8, 1, 17, 13, 2, 7, 14, 16, 8, 11, 3, 13, 20, 9, 3, 13, 4, 6, 13, 19, 8, 0, 10, 8, 2, 14, 17, 14, 18, 12, 2, 1]
    tree_split_xor_mask = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    cat_features_index = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    one_hot_cat_feature_index = []
    one_hot_hash_values = [
    ]
    ctr_feature_borders = [
        [1.99999905, 2.99999905, 3.99999905, 5.99999905, 7.99999905],
        [2.99999905, 3.99999905, 4.99999905, 6.99999905, 9.99999905, 10.999999, 11.999999, 12.999999],
        [4.99999905, 7.99999905, 11.999999, 12.999999],
        [3.99999905, 8.99999905, 11.999999, 12.999999, 13.999999],
        [4.99999905, 5.99999905, 7.99999905, 9.99999905, 11.999999],
        [7.99999905, 9.99999905, 10.999999, 11.999999, 13.999999],
        [6.99999905, 7.99999905, 10.999999, 11.999999, 12.999999, 13.999999],
        [4.99999905, 9.99999905, 12.999999, 13.999999],
        [2.99999905, 3.99999905, 5.99999905, 6.99999905, 7.99999905, 8.99999905, 10.999999, 11.999999, 13.999999],
        [6.99999905, 8.99999905, 9.99999905, 10.999999],
        [7.99999905, 8.99999905, 9.99999905, 11.999999, 13.999999, 14.999999],
        [0.999998987, 2.99999905, 3.99999905, 5.99999905, 6.99999905, 8.99999905, 9.99999905, 11.999999],
        [0.999998987, 1.99999905, 2.99999905, 3.99999905, 4.99999905, 9.99999905, 11.999999],
        [7.99999905, 11.999999],
        [11.999999]
    ]

    ## Aggregated array of leaf values for trees. Each tree is represented by a separate line:
    leaf_values = [
        0.7880368776902805, 0.7867524803450497, 0.7874876288255437, 0.7773408822732144, 0.7874059456610444, 0.7782074049532165, 0.7869306981585028, 0.7670792134500819, 0.7821782231330872, 0.7821782231330872, 0.7821782231330872, 0.7763118865907118, 0.7821782231330872, 0.7727920846652867, 0.7821782231330872, 0.7704455500483365,
        0.003976368137671248, 0, 0, 0, 0.005169690515611968, 0, 0, 0, 0, 0, 0, 0, 0.001599356361663726, 0, 0, 0, 0.003984664483974143, 0, 0, 0, 0.005419846583099941, 0, 0, 0, -0.005830056486737188, 0, 0, 0, -0.007081696653487106, -0.01160948002011432, -0.005836555406691942, 0, 0.00159384274818326, 0, 0, 0, 0.00424109318094769, 0, 0, 0, 0, 0, 0, 0, 0.00261543976583078, 0, 0, 0, 0.00364650619645865, 0, 0, 0, 0.004637322716415355, 0, 0, 0, 0.003331221464643159, 0, 0, 0, -0.005018113607206865, -0.01155668299241305, -0.005753093972283941, 0,
        0, 0.001553806523438635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.006622825197287259, 0.002495840994278184, 0, 0, 0, 0, 0, 0, 0, 0.001564019987817316, 0, 0, 0, 0, 0, 0, 0, 0.003109971329713985, 0, 0.003575501950221085, 0, 0, 0, 0, 0, 0.004354578631253992, 0, 0.004370292348974498, 0, 0, 0, 0, -0.0026997907651662, -0.001610809265053736, -0.00993352243076028, -0.009125699597417505, -0.009127941613620957, 0, 0, 0.00178454171129082, 0, 0.005675716584589659, 0, 0.003113901903582833, 0, 0, 0, 0,
        -0.001314115296816921, 0.005708350173674256, -0.01180611476895657, 0.001524711540623615, -0.002958000055485705, 0.00481546672024603, -0.009000767731207173, -0.00172470942308717, -0.009099374168133032, 0.001510626026285627, -0.005679585306482896, 0, -0.00900122635984436, -0.005623223630249949, 0, 0,
        0, 0, 0, 0, 0.001813243565869722, 0, 0, 0, 0, 0, 0, 0.003062290598790211, 0, 0, 0.001797766693368555, 0.002993807100222541, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.003263932616075313, 0, 0, 0, -0.002972336995564962, 0, -0.01029971256600132, 0, 0.001680431842611455, 0, 0.003301336564206218, 0.00535961715623982, 0, 0.001548292873630225, -0.008304023904761563, 0.004176342852088737, 0, 0, 0, 0, -0.005566858794480265, 0, -0.00562037567221386, 0, 0, 0, 0, 0, 0, 0, -0.01120266373937536, -0.003265402498099214,
        0.004336006214046193, 0.003393750108749793, 0.003996272329876063, 0, 0.004914886469317892, 0.001107146419915755, 0.003603696549093107, 0, 0.002907901054408412, 0.001785097724208549, 0, 0, 0.004527672869002853, -0.006106913324113612, 0.002336135045485468, 0, 0, 0, 0, 0, 0.002894380111316895, -0.01127053972653346, 0.001429492443630908, 0, 0, 0, 0, 0, 0.001472446974456976, -0.01249689281762213, 0.001506206437436821, 0, 0, 0, 0, 0, 0, -0.005533331452313915, 0, 0, 0, -0.005556558935777402, 0, 0, 0, -0.008862460636739157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.005465635786778092, 0, 0,
        0.005401593349285408, -0.007679690743606212,
        0.002792833662311172, -0.005653030436289475, 0.001390644181827061, -0.002984577198678855, 0.004039395310966793, 0, 0.004994939597927501, -0.006423468943758759, 0, 0, 0, 0, 0.003177100238787053, 0.003558554724185827, 0.004469520757264649, -0.009752822164446447,
        -0.002530485590771002, -0.01351910011420432, 0.003056214440059436, 0.003642448591003023,
        -0.006806829483478119, 0, 0.001740228435259057, 0.004938772870228158,
        0, 0, 0, 0, 0, 0, 0, 0, 0.001344546835970351, 0, 0, 0, 0, 0, 0, 0, 0.001345450442209422, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.002640785659657609, 0.001644790254337651, 0, 0, 0, 0, 0, -0.005540602847473389, 0, 0, 0.001320831756837683, 0, 0, 0, 0.002616849431631456, 0, 0.001321456397331494, -0.01345872863079496, 0.001276525454501771, 0, 0.004080299079716508, 0, 0.00132822049341367, 0, 0.00134424102993566, -0.002870234694144457, 0, 0, 0, 0, 0.002101335483617512, 0.003645236127499295, 0.002965164785320852, -0.003668831988076188, 0.003287938875338565, 0, 0.004506626286708471, 0,
        0.003829448620325868, -0.0124685045693824, 0.004761423256267189, -0.002047594288467481, 0, -0.008213760651179987, 0, -0.01062445730121561,
        0, -0.01537372074208929, 0, -0.003003652287897843, 0.003357337104641654, 0, 0.004641369575984959, -0.002932082615810923,
        0.001281458672385922, 0, 0.001263638277770864, 0.00207128943693085, 0.001280561843193493, -0.008635111207937257, 0.001247737895270103, -0.00517103903698099, 0, 0, 0, 0, 0, -0.008211882455498608, 0.002573384760301832, -0.00119125409789617, 0.001257644582840557, 0, 0.001224444277046747, 0, 0, -0.005141713814492103, 0.002425547542760039, 0.001833336781286055, 0, 0, 0.002949969522237644, 0, 0.003179858669780385, -0.007957783117623799, 0.004303498042835681, -0.0007408703439873704, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001233276706769122, 0, 0, 0, 0, 0, 0, 0, 0.002359845587681255, 0,
        0.001126054595708068, -0.01362049945919299,
        -0.002689479429769963, 0.002532735168210232, -0.01186902368808777, 0.001184834016074296, 0, 0, 0, 0, -0.0003240632956534191, 0.001210606466921111, -0.009915567500146378, 0.00182972673626195, 0, 0.004173443410035452, 0, 0.002346731025387528,
        0, 0, 0, 0, 0, 0, 0, -0.007607222267036852, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.002137158710794722, 0, -0.0004522725232643838, 0, 0, 0.001283615541638656, -0.009297833775687239, 0, 0, 0, 0, 0, 0, 0, -0.00507836644005561, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00114302143700068, -0.008088708521384576, 0, 0, 0, -0.004627404767562463, 0.001244406809941814, 0.002998899380353667, 0.001210938938648711, 0, 0, 0, 0.001243392862804709, -0.005551248224299402, 0.001900612378848822, 0, 0.004093589805625858, -0.0002845360182458464, 0.001952082332821792, 0, 0.003868877190494988, -0.008827014979948967,
        -0.005340921748907342, 0, 0.001780887621812904, 0, 0.001949544524710163, 0, 0, 0, 0.0005507943055779489, -0.008211569236557449, 0.003892441609908703, 0, 0.002616940524350051, 0, 0.001181945591890142, 0, 0, 0, 0, 0, 0.002941320583878851, 0, 0.001171354852605955, 0, 0, 0, 0, 0, 0.003720614228820196, 0, 0.003149112873081884, 0, 0, 0, 0.003022645710248891, 0, 0.001228876089799257, 0, 0.001157118099702172, 0, -0.00615928166050322, -0.004915184387581696, -0.01011145735862785, -0.004592699232581473, 0.001196018145427428, 0, 0.001900506018475205, -0.005102780302058693, 0, 0, 0, 0, 0.001929665051791603, 0, 0.001823626527294318, 0, 0, 0, 0, -0.004853482289971215, 0.003251135865941117, 0, 0.001759460647993311, 0,
        0.003790951867866544, 0.0001140763322472993, 0.004013600111137387, -0.006674506826732431,
        0.001880658569538963, 0, 0, 0, 0, 0, 0.001231083799353105, 0, 0.002210214707231873, 0.002985005046580272, 0.002280368798334714, -0.002828036013346791, 0.002369727748410294, 0, 0.001734396400361892, 0, 0, 0.001689083774685355, 0.00117606081028898, -0.002387409477489091, 0, 0, 0, 0, 0.002950446927528725, -0.0009208952588625675, 0.001757064939059413, -0.01186699589454388, 0.003587311570132973, 0, 0.003335170805833696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.004767022373528468, 0, 0, 0, 0, 0, -0.004828261705417214, 0, -0.009663092788652133, 0, 0, 0, 0,
        -0.01071338822877017, -0.002894340102466354, 0, 0, 0, 0.001531216910099915, 0, 0, -0.00446529379724723, -0.01072743233887919, 0, 0, 0, -0.009577192120522271, 0, 0, 0, -0.004976147218048604, 0, 0, 0, 0.003350850847998413, 0, 0, 0, 0.002534615177923252, 0, 0, 0, -0.004888222131164322, 0, 0, 0, 0.00178161297808539, 0.0009989007260950769, 0.003213029017910024, 0, -0.001842714023811485, 0, 0.003555598728576014, 0, 0, 0, 0.001063132435180401, 0, 0, 0, 0.001842615008783652, 0, 0, 0.001053058421629918, 0.001605432136073729, 0, 0.001134817657914664, 0, 0.002897625329676534, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.004787229453535196, 0.002827116968683091,
        0, 0, 0.002333746987071938, 0.001621202956768457, -0.004709738990542205, 0.00159533016070293, 0.001671966056314759, 0.003657958297918085, 0, 0, 0, 0, 0, 0, -0.009629537049442301, -0.007859568427003498, 0, 0, -0.004963426059501017, 0, -0.007071007353637867, 0, -0.00646166997633961, 0.002684458807290564, 0, 0, 0, 0, -0.004319467364711646, 0, 0, 0, 0, 0, 0, 0, -0.004811345207388852, 0, 0.001910701112515383, 0.002910321003756684, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.009319259230103256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, -0.009522671232379702, 0, 0.001132687849635261, 0, 0.001061585096316232, 0.0009735097723167522, 0, 0, 0, 0.002832993518384152, 0, 0, 0.001011992130915202, 0, 0, 0.002968193544242519, 0, 3.399831805387335e-05, 0, 0.002686252338421378, 0, 0.003376446436670369, 0, 0, 0, 0.002106822690815129, 0, 0.001542509940243061, 0, 0.002208350530735655, 0, 0, -0.01127921146430006, -0.004272375318910944, 0.001147194102223976, 0, 0.001550795184683127, 0.001533470246934304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.01035295721652487, 0, 0.002191044871642091, 0, 0.00117350757298233, 0, -0.002746964644011771, 0, 0.002529682377572422, 0, 0.001602767227938621, 0, 0.0015853795862643,
        0, 0.001124192690952878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001659925697260648, 0, 0, 0.002159774194442628, 0, 0, 0, 0, 0.001061105833647865, 0, 0, 0, 0, 0, 0, 0, 0.001503916862165649, 0, 0, -0.001432999879027998, 0, -0.008535892280443987, 0.00113859014664961, 0, 0.001099665219852402, -0.004515201732226096, -0.004854267583877249, -0.00757340066749913, 0, -0.004202477276108989, 0, 0, 0.001587388025468518, 0.0025107097601647, 0.002176610176618062, 0.0006837736779514591, 0.001605865050447037, -0.007855117921693796, 0, 0, 0, 0, -0.0008889014516297893, 0.0003917952049783271, 0.001640745749738438, -0.007274855465307601, 0.001044141222398179, 0, 0.003234485502181104, 0, 0.003043187461254058,
        -0.005140308943809026, 0, -0.007218163432540999, 0.001130050720740609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.004667599736646872, 0, 0, 0.0009924967801780789, -0.007438686929237956, 0.0008887535791259001, 0, 0, -0.004170958697242667, -0.00448133771999132, 0, 0.0009638729900837436, -0.001446897890553971, 0.002680187101538267, 0, 0, 0, 0, 0, 0.001115761245959189, 0, 0, 0, 0, 0, 0, 0.001968569725353034, 0, -0.002979413574615178, 0.002660829844411539, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00240981039797228, 0.003266779689442544, 0.003249014880404249, -0.004683944701517151, 0, 0, -0.004892548262171074,
        -0.006256378495874886, 0, -0.006609835928545285, 0, 0.001107393036801539, 0, -0.004824526229506384, -0.004447727687842628, 0, 0, 0, 0, -0.0001936653084074176, -0.004139676507712559, 0.0009720296244332592, 0, 0.002526112117763915, -0.004948666420818719, -0.01031251922136587, 0, 0.004264840020150451, 0, -0.00428965006664022, 0, 0, 0, 0, 0, 0.003161302450581022, -0.004648815117040981, 0.002778400006780065, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.002308445393690123, -0.004632592739404488, 0.001192165254339539, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001899659429917686, -0.004855854151024968, 0, 0,
        0, 0, 0.001123027830305084, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0009329341749702946, -0.005054833789921916, 0.003066506963091855, -0.01146948167090544, 0.002101206425150132, -0.002143271513727484, 0.003138462023237836, 0.002204816070863547, 0, 0, 0, -0.001687646157365106, 0, 0, 0.0009832691312494177, 0.001844966788167876, 0, 0, 0.0009026829089327726, -0.006744189053367588, 0, 0, 0.002282260043068115, -0.009612018979396278, 0, 0, 0, -0.004257477691859527, 0, 0, 0, -0.007091196012781666,
        -0.007185846272757622, 0.002113889525232533, -0.0009267939882538986, 0.002817102035048719, -0.006612407396729026, 4.442682894437068e-05, 0, 0.0009323138876286239, 0, 0.001366011141036067, -0.0004460633059375049, 0.002864248799552894, 0, 0, -0.004421363597170891, 0.002169458235537166, -0.00127096995818735, 0.002022736048384466, 0.0043755807587419, 0.001852558896384636, -0.008752344967782212, 0.002919560301021231, -0.004209501974135929, 0.001347152884985133, 0, 0.0007708120977994541, 0.004744762093565569, 0.002090317865036731, 0, 0, -0.002252696759980038, 0.002213058729340775, 0, 0, 0, 0, -0.004058047517829007, -0.004328348620320347, 0, 0.001026133998210107, -0.004511827184026484, 0, 0, 0, 0, 0, -0.004597874468448829, -0.004835971365868172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.004928087543654029, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, -0.007198832304470373, 0, 0, 0.002416299100173961, 0.002930081970384359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0007553020859716999, 0, -0.005079790827522918, 0.00292782757477672, -0.008901672420111697, 0.0008955795860574655, -0.008129290199535268, 0.002754874869471353, 0.001049357494061253, 0.002005461048442654, -0.01015508922941723, 0, -0.004951279951553744, 0, 0, 0, 0.003379819196104198, 0, 0, 0.002154883153487075, -0.001664528322154802, 0, -0.003331095615316795, 0.002674216879323937, 0.0004221525246060369, 0.0008865535401236894, 0,
        -0.00814080336333757, -0.00134058621353208, 0, -0.004114983880383583, -0.002820770028635527, 0.003012884550677844, 0, 0, -0.003966642486991838, -0.006922496563648697, 0, 0, 0, -0.00750306588336015, 0, 0,
        -0.008162144284457761, 0.001295319814769378, 0, -0.01184062443042328,
        -0.01043211338913347, -0.003848087987761123, -0.0005911984642767427, -0.008997882295914264, 9.423594097221845e-05, -0.004101171361006684, 0.003024245339785581, -0.002929471071857057,
        0, 0.0007193016318880186, 0, 0, 0, 0, 0, 0, 0, 0.002522864689510308, 0, 0.001938349677302984, 0, 0, 0, 0.001743044522332087, 0, 0.001234229580279694, 0, 0, 0, -0.004909371866381014, 0, 0, 0, 0.001564470481480748, 0, 0, 0, 0, 0, 0.002804298865648607, 0, 0.002334409518873524, 0, 0, -0.006421129107279745, 0.001708219202828819, -0.006378002628211263, 0, 0, 0.002313271073222417, 0, 0.002294056024840836, 0, -0.007081464362280685, 0, -0.00726679546077388, 0.001401544099455491, 0.001657759901228639, 0, 0, -0.003798434254282472, -0.0004132849840465874, 0, 0, 0, 0.001862295592268226, 0, 0.00192734964756528, 0, 0.0006761236070649958, 0, -0.0001765855070294277,
        0, 0, 0, 0, 0, -0.001877535118314081, 0.001111144372852301, 0.002196040745461148, 0, -0.005560809059621356, 0, -0.006083401171505119, 0, 0.001781767019455863, 0, -0.01057352881851848, 0.001575898999617691, 0, 0, -0.006888352841349984, 0, 0.003651399550339471, 0.001005276748418902, 0, 0.002478933836900984, -0.006994354009710052, 0.002135179450581928, -0.001050246147372859, 0.002630126499623195, 0.001206235254452004, 0.002373193942479276, -0.007113287929162012,
        -0.008509800137946427, -0.0002592417030055289, 0.002148587626617667, 0.002771492748400022, -0.003763515463926377, -0.009755807980091655, 0, -0.004532672432792056,
        0.001187807767097285, 0, 0.002253166514513897, 0, 0.00193016225083605, 0, 0.002261527445300227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001969247872133717, -0.002742429122259994, 0.00181448704417465, -0.01078055220900479, 0.00206475736010694, 0.0007853712270790184, 0.002350005923852017, 0.002100442043730826, 0, -0.004090102131824966, 0, -0.006101095605565003, 0, 0, 0.0009769509778258909, -0.008864989721601341, 0, 0, 0, 0, 0, 0, 0.000843770759415211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.00413308481013205, 0, -0.001188199908680223, 0.0006751625144098757, -0.004070886682104712, 0, -0.001950005089456029, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0.0009972893038923613, 0, 0, 0, 0, 0.0007949941195115134, 0, 0.001471459081759117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001006826988814635, 0.001334103223711996, 0, 0.003448531061043312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001337912475043756, 0, -0.004612494331410869, 0.0008011615374697591, 0.002429962972050752, 0, 0.002903447867974722, 0, 0, 0, 0, 0, 0, -0.006122238348336116, 0, 0, 0.0008334369499176378, 0, 0, 0.00140218425540727, 0.002512238037270522, -0.01062939880199636, -0.004434998062019894,
        0, 0.001499703425293173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.00465157416511051, 0, 0, 0, 0.0007675022597914941, 0, 0, 0, -0.0008908000259571789, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00104622135477477, 0, 0, 0, 0, 0, 0.003037205228089335, 0, -0.006516759644949582, 0, 0, 0, 0, 0, 0.003404685275805944, 0, 0, 0, 0.002045180161167835, 0, 0, -0.008611111284682666, -0.0004349151690924567, -0.003504794474085023, -0.00871460306489466, 0.001285562548747507, 0.002397425351600856, 0, 0.001235963558174883,
        -0.003311534804984139, 0.002131146575385555, -0.009557357065961952, -0.001009532838437842, 0.001131055119270364, 0.002338358210649318, -0.005376863658646115, 0
    ]
    scale = 1
    bias = 0
    model_ctrs = catboost_model_ctrs_container(
        used_model_ctrs_count = 15,
        compressed_model_ctrs = [
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [3],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387099, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387099, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387099, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 16890222057671696980, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [5],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387101, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387101, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387101, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 16890222057671696978, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [7],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387103, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387103, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387103, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [8],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 16890222057671696975, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [10],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387074, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387074, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387074, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15)
                ]
            )
        ],
        ctr_data = catboost_ctr_data(
            learn_ctrs = {
                14216163332699387074 :
                catboost_ctr_value_table(
                    index_hash_viewer = {2136296385601851904 : 0, 7428730412605434673 : 1, 9959754109938180626 : 3, 14256903225472974739 : 5, 8056048104805248435 : 2, 18446744073709551615 : 0, 12130603730978457510 : 6, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 10789443546307262781 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 2.8026e-44, count = 73), catboost_ctr_mean_history(sum = 0, count = 2), catboost_ctr_mean_history(sum = 0, count = 2), catboost_ctr_mean_history(sum = 1.4013e-45, count = 0), catboost_ctr_mean_history(sum = 0, count = 1), catboost_ctr_mean_history(sum = 0, count = 1), catboost_ctr_mean_history(sum = 1.4013e-45, count = 0)],
                    ctr_total = [20, 73, 0, 2, 0, 2, 1, 0, 0, 1, 0, 1, 1, 0]
                ),
                14216163332699387099 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 15379737126276794113 : 5, 18446744073709551615 : 0, 14256903225472974739 : 2, 18048946643763804916 : 4, 2051959227349154549 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 7024059537692152076 : 6, 18446744073709551615 : 0, 15472181234288693070 : 1, 8864790892067322495 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 1.4013e-44, count = 58), catboost_ctr_mean_history(sum = 1.4013e-45, count = 6), catboost_ctr_mean_history(sum = 1.4013e-45, count = 5), catboost_ctr_mean_history(sum = 4.2039e-45, count = 6), catboost_ctr_mean_history(sum = 0, count = 4), catboost_ctr_mean_history(sum = 2.8026e-45, count = 0), catboost_ctr_mean_history(sum = 7.00649e-45, count = 0)],
                    ctr_total = [10, 58, 1, 6, 1, 5, 3, 6, 0, 4, 2, 0, 5, 0]
                ),
                14216163332699387101 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 13987540656699198946 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18089724839685297862 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 10353740403438739754 : 2, 3922001124998993866 : 0, 13686716744772876732 : 1, 18293943161539901837 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 0, count = 37), catboost_ctr_mean_history(sum = 0, count = 4), catboost_ctr_mean_history(sum = 3.08286e-44, count = 20), catboost_ctr_mean_history(sum = 0, count = 13), catboost_ctr_mean_history(sum = 0, count = 2), catboost_ctr_mean_history(sum = 0, count = 3)],
                    ctr_total = [0, 37, 0, 4, 22, 20, 0, 13, 0, 2, 0, 3]
                ),
                14216163332699387103 :
                catboost_ctr_value_table(
                    index_hash_viewer = {3607388709394294015 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18356215166324018775 : 0, 18365206492781874408 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0, 14559146096844143499 : 1, 18446744073709551615 : 0, 18446744073709551615 : 0, 11416626865500250542 : 3, 5549384008678792175 : 2},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 0, count = 14), catboost_ctr_mean_history(sum = 0, count = 22), catboost_ctr_mean_history(sum = 0, count = 22), catboost_ctr_mean_history(sum = 2.66247e-44, count = 17), catboost_ctr_mean_history(sum = 2.8026e-45, count = 3), catboost_ctr_mean_history(sum = 1.4013e-45, count = 1)],
                    ctr_total = [0, 14, 0, 22, 0, 22, 19, 17, 2, 3, 1, 1]
                ),
                16890222057671696975 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 8473802870189803490 : 2, 7071392469244395075 : 1, 18446744073709551615 : 0, 8806438445905145973 : 3, 619730330622847022 : 0, 18446744073709551615 : 0},
                    target_classes_count = 0,
                    counter_denominator = 82,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 1.68156e-44, count = 6), catboost_ctr_mean_history(sum = 1.14906e-43, count = 1)],
                    ctr_total = [12, 6, 82, 1]
                ),
                16890222057671696978 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 13987540656699198946 : 4, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18089724839685297862 : 5, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 10353740403438739754 : 2, 3922001124998993866 : 0, 13686716744772876732 : 1, 18293943161539901837 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 0,
                    counter_denominator = 42,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 5.1848e-44, count = 4), catboost_ctr_mean_history(sum = 5.88545e-44, count = 13), catboost_ctr_mean_history(sum = 2.8026e-45, count = 3)],
                    ctr_total = [37, 4, 42, 13, 2, 3]
                ),
                16890222057671696980 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 15379737126276794113 : 5, 18446744073709551615 : 0, 14256903225472974739 : 2, 18048946643763804916 : 4, 2051959227349154549 : 3, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 7024059537692152076 : 6, 18446744073709551615 : 0, 15472181234288693070 : 1, 8864790892067322495 : 0},
                    target_classes_count = 0,
                    counter_denominator = 68,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 9.52883e-44, count = 7), catboost_ctr_mean_history(sum = 8.40779e-45, count = 9), catboost_ctr_mean_history(sum = 5.60519e-45, count = 2)],
                    ctr_total = [68, 7, 6, 9, 4, 2, 5]
                )
            }
        )
    )


### Routines to compute CTRs

def calc_hash(a, b):
    max_int = 0xffFFffFFffFFffFF
    MAGIC_MULT = 0x4906ba494954cb65
    return (MAGIC_MULT * ((a + MAGIC_MULT * b) & max_int)) & max_int


def calc_hashes(binarized_features, hashed_cat_features, transposed_cat_feature_indexes, binarized_feature_indexes):
    result = 0
    for cat_feature_index in transposed_cat_feature_indexes:
        result = calc_hash(result, hashed_cat_features[cat_feature_index])
    for bin_feature_index in binarized_feature_indexes:
        binary_feature = binarized_features[bin_feature_index.bin_index]
        if not(bin_feature_index.check_value_equal):
            result = calc_hash(result, 1 if (binary_feature >= bin_feature_index.value) else 0)
        else:
            result = calc_hash(result, 1 if (binary_feature == bin_feature_index.value) else 0)
    return result


def calc_ctrs(model_ctrs, binarized_features, hashed_cat_features, result):
    ctr_hash = 0
    result_index = 0

    for i in range(len(model_ctrs.compressed_model_ctrs)):
        proj = model_ctrs.compressed_model_ctrs[i].projection
        ctr_hash = calc_hashes(binarized_features, hashed_cat_features, proj.transposed_cat_feature_indexes, proj.binarized_indexes)
        for j in range(len(model_ctrs.compressed_model_ctrs[i].model_ctrs)):
            ctr = model_ctrs.compressed_model_ctrs[i].model_ctrs[j]
            learn_ctr = model_ctrs.ctr_data.learn_ctrs[ctr.base_hash]
            ctr_type = ctr.base_ctr_type
            bucket = learn_ctr.resolve_hash_index(ctr_hash)
            if bucket is None:
                result[result_index] = ctr.calc(0, 0)
            else:
                if ctr_type == "BinarizedTargetMeanValue" or ctr_type == "FloatTargetMeanValue":
                    ctr_mean_history = learn_ctr.ctr_mean_history[bucket]
                    result[result_index] = ctr.calc(ctr_mean_history.sum, ctr_mean_history.count)
                elif ctr_type == "Counter" or ctr_type == "FeatureFreq":
                    ctr_total = learn_ctr.ctr_total
                    denominator = learn_ctr.counter_denominator
                    result[result_index] = ctr.calc(ctr_total[bucket], denominator)
                elif ctr_type == "Buckets":
                    ctr_history = learn_ctr.ctr_total
                    target_classes_count = learn_ctr.target_classes_count
                    total_count = 0
                    good_count = ctr_history[bucket * target_classes_count + ctr.target_border_idx];
                    for class_id in range(target_classes_count):
                        total_count += ctr_history[bucket * target_classes_count + class_id]
                    result[result_index] = ctr.calc(good_count, total_count)
                else:
                    ctr_history = learn_ctr.ctr_total;
                    target_classes_count = learn_ctr.target_classes_count;

                    if target_classes_count > 2:
                        good_count = 0
                        total_count = 0
                        for class_id in range(ctr.target_border_idx + 1):
                            total_count += ctr_history[bucket * target_classes_count + class_id]
                        for class_id in range(ctr.target_border_idx + 1, target_classes_count):
                            good_count += ctr_history[bucket * target_classes_count + class_id]
                        total_count += good_count;
                        result[result_index] = ctr.calc(good_count, total_count);
                    else:
                        result[result_index] = ctr.calc(ctr_history[bucket * 2 + 1], ctr_history[bucket * 2] + ctr_history[bucket * 2 + 1])
            result_index += 1



cat_features_hashes = {
    "Female": -2114564283,
    "Protective-serv": -2075156126,
    "Assoc-voc": -2029370604,
    "Married-civ-spouse": -2019910086,
    "Federal-gov": -1993066135,
    "Transport-moving": -1903253868,
    "Farming-fishing": -1888947309,
    "Prof-school": -1742589394,
    "Self-emp-inc": -1732053524,
    "?": -1576664757,
    "Handlers-cleaners": -1555793520,
    "0": -1438285038,
    "Philippines": -1437257447,
    "Male": -1291328762,
    "11th": -1209300766,
    "Unmarried": -1158645841,
    "Local-gov": -1105932163,
    "Divorced": -993514283,
    "Some-college": -870577664,
    "Asian-Pac-Islander": -787966085,
    "Sales": -760428919,
    "Self-emp-not-inc": -661998850,
    "Widowed": -651660490,
    "Masters": -453513993,
    "State-gov": -447941100,
    "Doctorate": -434936054,
    "White": -218697806,
    "Own-child": -189887997,
    "Amer-Indian-Eskimo": -86031875,
    "Exec-managerial": -26537793,
    "Husband": 60472414,
    "Italy": 117615621,
    "Not-in-family": 143014663,
    "n": 239748506,
    "Married-spouse-absent": 261588508,
    "Prof-specialty": 369959660,
    "Assoc-acdm": 475479755,
    "Adm-clerical": 495735304,
    "Bachelors": 556725573,
    "HS-grad": 580496350,
    "Craft-repair": 709691013,
    "Other-relative": 739168919,
    "Other-service": 786213683,
    "9th": 840896980,
    "Separated": 887350706,
    "10th": 888723975,
    "Mexico": 972041323,
    "Hong": 995245846,
    "1": 1121341681,
    "Tech-support": 1150039955,
    "Black": 1161225950,
    "Canada": 1510821218,
    "Wife": 1708186408,
    "United-States": 1736516096,
    "Never-married": 1959200218,
    "Machine-op-inspct": 2039859473,
    "7th-8th": 2066982375,
    "Private": 2084267031,
}

def hash_uint64(string):
    return cat_features_hashes.get(str(string), 0x7fFFffFF)


### Applicator for the CatBoost model

def apply_catboost_model(float_features, cat_features=[], ntree_start=0, ntree_end=catboost_model.tree_count):
    """
    Applies the model built by CatBoost.

    Parameters
    ----------

    float_features : list of float features

    cat_features : list of categorical features
        You need to pass float and categorical features separately in the same order they appeared in train dataset.
        For example if you had features f1,f2,f3,f4, where f2 and f4 were considered categorical, you need to pass here float_features=f1,f3, cat_features=f2,f4


    Returns
    -------
    prediction : formula value for the model and the features

    """
    if ntree_end == 0:
        ntree_end = catboost_model.tree_count
    else:
        ntree_end = min(ntree_end, catboost_model.tree_count)

    model = catboost_model

    assert len(float_features) >= model.float_feature_count
    assert len(cat_features) >= model.cat_feature_count

    # Binarise features
    binary_features = [0] * model.binary_feature_count
    binary_feature_index = 0

    for i in range(len(model.float_feature_borders)):
        for border in model.float_feature_borders[i]:
            binary_features[binary_feature_index] += 1 if (float_features[model.float_features_index[i]] > border) else 0
        binary_feature_index += 1
    transposed_hash = [0] * model.cat_feature_count
    for i in range(model.cat_feature_count):
        transposed_hash[i] = hash_uint64(cat_features[i])

    if len(model.one_hot_cat_feature_index) > 0:
        cat_feature_packed_indexes = {}
        for i in range(model.cat_feature_count):
            cat_feature_packed_indexes[model.cat_features_index[i]] = i
        for i in range(len(model.one_hot_cat_feature_index)):
            cat_idx = cat_feature_packed_indexes[model.one_hot_cat_feature_index[i]]
            hash = transposed_hash[cat_idx]
            for border_idx in range(len(model.one_hot_hash_values[i])):
                binary_features[binary_feature_index] |= (1 if hash == model.one_hot_hash_values[i][border_idx] else 0) * (border_idx + 1)
            binary_feature_index += 1

    if hasattr(model, 'model_ctrs') and model.model_ctrs.used_model_ctrs_count > 0:
        ctrs = [0.] * model.model_ctrs.used_model_ctrs_count;
        calc_ctrs(model.model_ctrs, binary_features, transposed_hash, ctrs)
        for i in range(len(model.ctr_feature_borders)):
            for border in model.ctr_feature_borders[i]:
                binary_features[binary_feature_index] += 1 if ctrs[i] > border else 0
            binary_feature_index += 1

    # Extract and sum values from trees
    result = 0.
    tree_splits_index = 0
    current_tree_leaf_values_index = 0
    for tree_id in range(ntree_start, ntree_end):
        current_tree_depth = model.tree_depth[tree_id]
        index = 0
        for depth in range(current_tree_depth):
            border_val = model.tree_split_border[tree_splits_index + depth]
            feature_index = model.tree_split_feature_index[tree_splits_index + depth]
            xor_mask = model.tree_split_xor_mask[tree_splits_index + depth]
            index |= ((binary_features[feature_index] ^ xor_mask) >= border_val) << depth
        result += model.leaf_values[current_tree_leaf_values_index + index]
        tree_splits_index += current_tree_depth
        current_tree_leaf_values_index += (1 << current_tree_depth)
    return model.scale * result + model.bias



