#include <string>
#include <vector>

/* Model data */
static const struct CatboostModel {
    unsigned int FloatFeatureCount = 50;
    unsigned int BinaryFeatureCount = 12;
    unsigned int TreeCount = 2;
    unsigned int TreeDepth[2] = {6, 6};
    unsigned int TreeSplits[12] = {4, 0, 11, 1, 9, 8, 5, 10, 3, 7, 2, 6};
    unsigned int BorderCounts[50] = {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    float Borders[12] = {0.156479999f, 0.748417497f, 0.0504557006f, 0.398038983f, 0.0867389515f, 0.5f, 0.185759991f, 0.318073004f, 0.423586994f, 0.00513814017f, 0.00177894998f, 0.005463365f, };

    /* Aggregated array of leaf values for trees. Each tree is represented by a separate line: */
    double LeafValues[128] = {
        0.05960256437951928, 0.06070146909282823, 0.06015918889076437, 0.05959448117928647, 0.0599721206163218, 0.06062821605892021, 0.0605089520658085, 0.06288086010413954, 0.05955195210314157, 0.06099448115395449, 0.06229438070265529, 0.06050201132893562, 0.06192215820207864, 0.06190509985324542, 0.06176463823760008, 0.06162483396958104, 0.06005946608783778, 0.06062279438329973, 0.06004824625411104, 0.06064448116028749, 0.06103598718641752, 0.06270338815639177, 0.06267781612256605, 0.06172957858253918, 0.05938985894333002, 0.06132279437063375, 0.0613444811476215, 0.06109824623511206, 0.0616944811412885, 0.0620775132274143, 0.06146759860387622, 0.06253466764112585, 0.05988602370841774, 0.0604175986228752, 0.05969421006123277, 0.06050201132893562, 0.06009357756463582, 0.0597648340096226, 0.06094687741927594, 0.06145321607326258, 0.06024776317952554, 0.06096483398790947, 0.06303508723080734, 0.06050201132893562, 0.0608775135811513, 0.06275863771560382, 0.06071954670341606, 0.06099448115395449, 0.05989259863237469, 0.0648667073624649, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06221517819009029, 0.06050201132893562, 0.06404448115730725, 0.05957821609654565, 0.06004824625411104, 0.06050201132893562, 0.06050201132893562, 0.06050201132893562, 0.06240996302870024, 0.06057324624461156, 0.06019598720161671,
        -0.0009068310388559039, 0.0005823790048818268, 0.0003022397759053274, 0.001236387425717793, -0.001110814547534013, 0, -0.0009955282825560336, 0.0005900790335013008, -0.0007270945767319858, -0.0004503618368394611, -0.0004830951003004704, 0, -0.0007312046291846942, 0, -0.0003228709852496245, 0.001331784484289174, -0.0009001571778393699, 0.0008336580731940341, 0.0001846719011632318, 0.001297891181080824, -0.0009618816738515486, 0, -8.710280354874731e-05, 0.000935069827523146, -0.000469122101802195, 0.000927062975956497, 0.0009596543982336384, 0.0001628772571593989, -0.0005596775005835593, 6.159951384984342e-05, -0.0003414199319814777, 0.002115943356260227, 0, -0.001142222399221946, 0, 0.001164318208439542, -0.000457458598429662, 0.0005900790335013008, 0, 9.584290627186962e-05, 0.001870434369045688, 0.0005927637363117251, 0.0005925413825713574, 0.0005833861550049742, 0.0002303670248576997, 0.005328653757534604, -0.000235488818658018, 0, 0, -0.0003494213597650448, -0.0003075385840448801, 0.001911465205838799, 0, 0, 0.0003968806892349656, 0.001932862827397617, -7.592085855706009e-05, 0, 0.001140556113073425, 0.002650395860214851, 0.0002143034913390684, 0, -0.0003199517355933474, 0.002342043877120708
    };
} CatboostModelStatic;

/* Model applicator */
double ApplyCatboostModel(
    const std::vector<float>& features
) {
    const struct CatboostModel& model = CatboostModelStatic;

    /* Binarise features */
    std::vector<unsigned char> binaryFeatures(model.BinaryFeatureCount);
    unsigned int binFeatureIndex = 0;
    for (unsigned int i = 0; i < model.FloatFeatureCount; ++i) {
        for(unsigned int j = 0; j < model.BorderCounts[i]; ++j) {
            binaryFeatures[binFeatureIndex] = (unsigned char)(features[i] > model.Borders[binFeatureIndex]);
            ++binFeatureIndex;
        }
    }

    /* Extract and sum values from trees */
    double result = 0.0;
    const unsigned int* treeSplitsPtr = model.TreeSplits;
    const double* leafValuesForCurrentTreePtr = model.LeafValues;
    for (unsigned int treeId = 0; treeId < model.TreeCount; ++treeId) {
        const unsigned int currentTreeDepth = model.TreeDepth[treeId];
        unsigned int index = 0;
        for (unsigned int depth = 0; depth < currentTreeDepth; ++depth) {
            index |= (binaryFeatures[treeSplitsPtr[depth]] << depth);
        }
        result += leafValuesForCurrentTreePtr[index];
        treeSplitsPtr += currentTreeDepth;
        leafValuesForCurrentTreePtr += (1 << currentTreeDepth);
    }
    return result;
}

double ApplyCatboostModel(
    const std::vector<float>& floatFeatures,
    const std::vector<std::string>&
) {
    return ApplyCatboostModel(floatFeatures);
}
